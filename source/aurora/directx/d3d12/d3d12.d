module aurora.directx.d3d12.d3d12;

version(Windows):

public import aurora.directx.com;
public import aurora.directx.dxgi.dxgiformat;
public import aurora.directx.dxgi.dxgicommon;
public import aurora.directx.d3d.d3dcommon;

public:

///
/// Constants
///

enum int D3D12_16BIT_INDEX_STRIP_CUT_VALUE = 0xffff;
enum int D3D12_32BIT_INDEX_STRIP_CUT_VALUE = 0xffffffff;
enum int D3D12_8BIT_INDEX_STRIP_CUT_VALUE = 0xff;
enum int D3D12_APPEND_ALIGNED_ELEMENT = 0xffffffff;
enum int D3D12_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9;
enum int D3D12_CLIP_OR_CULL_DISTANCE_COUNT = 8;
enum int D3D12_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2;
enum int D3D12_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14;
enum int D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4;
enum int D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15;
enum int D3D12_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = 16;
enum int D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
enum int D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15;
enum int D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
enum int D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
enum int D3D12_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64;
enum int D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
enum int D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1;
enum int D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
enum int D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
enum int D3D12_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32;
enum int D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1;
enum int D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128;
enum int D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1;
enum int D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1;
enum int D3D12_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128;
enum int D3D12_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1;
enum int D3D12_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16;
enum int D3D12_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1;
enum int D3D12_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1;
enum int D3D12_COMMONSHADER_SAMPLER_SLOT_COUNT = 16;
enum int D3D12_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32;
enum int D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4;
enum int D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_COMMONSHADER_TEMP_REGISTER_COUNT = 4096;
enum int D3D12_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3;
enum int D3D12_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3;
enum int D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10;
enum int D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10;
enum int D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8;
enum int D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7;
enum int D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT = 256;
enum int D3D12_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256;
enum int D3D12_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64;
enum int D3D12_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240;
enum int D3D12_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68;
enum int D3D12_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224;
enum int D3D12_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72;
enum int D3D12_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208;
enum int D3D12_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76;
enum int D3D12_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192;
enum int D3D12_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = 84;
enum int D3D12_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176;
enum int D3D12_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92;
enum int D3D12_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160;
enum int D3D12_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100;
enum int D3D12_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144;
enum int D3D12_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112;
enum int D3D12_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128;
enum int D3D12_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128;
enum int D3D12_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112;
enum int D3D12_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144;
enum int D3D12_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96;
enum int D3D12_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = 168;
enum int D3D12_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80;
enum int D3D12_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = 204;
enum int D3D12_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64;
enum int D3D12_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256;
enum int D3D12_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48;
enum int D3D12_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340;
enum int D3D12_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32;
enum int D3D12_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512;
enum int D3D12_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16;
enum int D3D12_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768;
enum int D3D12_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1;
enum int D3D12_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256;
enum int D3D12_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768;
enum int D3D12_CS_4_X_THREAD_GROUP_MAX_X = 768;
enum int D3D12_CS_4_X_THREAD_GROUP_MAX_Y = 768;
enum int D3D12_CS_4_X_UAV_REGISTER_COUNT = 1;
enum int D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535;
enum int D3D12_CS_TGSM_REGISTER_COUNT = 8192;
enum int D3D12_CS_TGSM_REGISTER_READS_PER_INST = 1;
enum int D3D12_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1;
enum int D3D12_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1;
enum int D3D12_CS_THREADGROUPID_REGISTER_COMPONENTS = 3;
enum int D3D12_CS_THREADGROUPID_REGISTER_COUNT = 1;
enum int D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = 1;
enum int D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = 1;
enum int D3D12_CS_THREADIDINGROUP_REGISTER_COMPONENTS = 3;
enum int D3D12_CS_THREADIDINGROUP_REGISTER_COUNT = 1;
enum int D3D12_CS_THREADID_REGISTER_COMPONENTS = 3;
enum int D3D12_CS_THREADID_REGISTER_COUNT = 1;
enum int D3D12_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024;
enum int D3D12_CS_THREAD_GROUP_MAX_X = 1024;
enum int D3D12_CS_THREAD_GROUP_MAX_Y = 1024;
enum int D3D12_CS_THREAD_GROUP_MAX_Z = 64;
enum int D3D12_CS_THREAD_GROUP_MIN_X = 1;
enum int D3D12_CS_THREAD_GROUP_MIN_Y = 1;
enum int D3D12_CS_THREAD_GROUP_MIN_Z = 1;
enum int D3D12_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384;
enum float D3D12_DEFAULT_BLEND_FACTOR_ALPHA = 1.0f;
enum float D3D12_DEFAULT_BLEND_FACTOR_BLUE = 1.0f;
enum float D3D12_DEFAULT_BLEND_FACTOR_GREEN = 1.0f;
enum float D3D12_DEFAULT_BLEND_FACTOR_RED = 1.0f;
enum float D3D12_DEFAULT_BORDER_COLOR_COMPONENT = 0.0f;
enum int D3D12_DEFAULT_DEPTH_BIAS = 0;
enum float D3D12_DEFAULT_DEPTH_BIAS_CLAMP = 0.0f;
enum int D3D12_DEFAULT_MAX_ANISOTROPY = 16;
enum float D3D12_DEFAULT_MIP_LOD_BIAS = 0.0f;
enum int D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 4194304;
enum int D3D12_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0;
enum int D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT = 65536;
enum int D3D12_DEFAULT_SAMPLE_MASK = 0xffffffff;
enum int D3D12_DEFAULT_SCISSOR_ENDX = 0;
enum int D3D12_DEFAULT_SCISSOR_ENDY = 0;
enum int D3D12_DEFAULT_SCISSOR_STARTX = 0;
enum int D3D12_DEFAULT_SCISSOR_STARTY = 0;
enum float D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0.0f;
enum int D3D12_DEFAULT_STENCIL_READ_MASK = 0xff;
enum int D3D12_DEFAULT_STENCIL_REFERENCE = 0;
enum int D3D12_DEFAULT_STENCIL_WRITE_MASK = 0xff;
enum int D3D12_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0;
enum int D3D12_DEFAULT_VIEWPORT_HEIGHT = 0;
enum float D3D12_DEFAULT_VIEWPORT_MAX_DEPTH = 0.0f;
enum float D3D12_DEFAULT_VIEWPORT_MIN_DEPTH = 0.0f;
enum int D3D12_DEFAULT_VIEWPORT_TOPLEFTX = 0;
enum int D3D12_DEFAULT_VIEWPORT_TOPLEFTY = 0;
enum int D3D12_DEFAULT_VIEWPORT_WIDTH = 0;
enum int D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND = 0xffffffff;
enum int D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_END = 0xfffffff7;
enum int D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_START = 0xfffffff0;
enum int D3D12_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
enum int D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = 4;
enum int D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = 32;
enum int D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
enum int D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = 1;
enum int D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = 3;
enum int D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = 1;
enum int D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = 2;
enum int D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = 1;
enum int D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
enum int D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
enum int D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
enum int D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
enum int D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
enum int D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
enum int D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
enum int D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
enum int D3D12_DS_OUTPUT_REGISTER_COMPONENTS = 4;
enum int D3D12_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_DS_OUTPUT_REGISTER_COUNT = 32;
enum float D3D12_float16_FUSED_TOLERANCE_IN_ULP = 0.6;
enum float D3D12_float32_MAX = 3.402823466e+38f;
enum float D3D12_float32_TO_INTEGER_TOLERANCE_IN_ULP = 0.6f;
enum float D3D12_float_TO_SRGB_EXPONENT_DENOMINATOR = 2.4f;
enum float D3D12_float_TO_SRGB_EXPONENT_NUMERATOR = 1.0f;
enum float D3D12_float_TO_SRGB_OFFSET = 0.055f;
enum float D3D12_float_TO_SRGB_SCALE_1 = 12.92f;
enum float D3D12_float_TO_SRGB_SCALE_2 = 1.055f;
enum float D3D12_float_TO_SRGB_THRESHOLD = 0.0031308f;
enum float D3D12_FTOI_INSTRUCTION_MAX_INPUT = 2147483647.999f;
enum float D3D12_FTOI_INSTRUCTION_MIN_INPUT = -2147483648.999f;
enum float D3D12_FTOU_INSTRUCTION_MAX_INPUT = 4294967295.999f;
enum float D3D12_FTOU_INSTRUCTION_MIN_INPUT = 0.0f;
enum int D3D12_GS_INPUT_INSTANCE_ID_READS_PER_INST = 2;
enum int D3D12_GS_INPUT_INSTANCE_ID_READ_PORTS = 1;
enum int D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = 1;
enum int D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = 1;
enum int D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1;
enum int D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1;
enum int D3D12_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2;
enum int D3D12_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1;
enum int D3D12_GS_INPUT_REGISTER_COMPONENTS = 4;
enum int D3D12_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_GS_INPUT_REGISTER_COUNT = 32;
enum int D3D12_GS_INPUT_REGISTER_READS_PER_INST = 2;
enum int D3D12_GS_INPUT_REGISTER_READ_PORTS = 1;
enum int D3D12_GS_INPUT_REGISTER_VERTICES = 32;
enum int D3D12_GS_MAX_INSTANCE_COUNT = 32;
enum int D3D12_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = 1024;
enum int D3D12_GS_OUTPUT_ELEMENTS = 32;
enum int D3D12_GS_OUTPUT_REGISTER_COMPONENTS = 4;
enum int D3D12_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_GS_OUTPUT_REGISTER_COUNT = 32;
enum int D3D12_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = 32;
enum int D3D12_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = 32;
enum int D3D12_HS_CONTROL_POINT_REGISTER_COMPONENTS = 4;
enum int D3D12_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_HS_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
enum int D3D12_HS_CONTROL_POINT_REGISTER_READ_PORTS = 1;
enum int D3D12_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = 0xffffffff;
enum int D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = 1;
enum int D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = 1;
enum int D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
enum int D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = 1;
enum int D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = 1;
enum int D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = 1;
enum int D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
enum int D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = 1;
enum int D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
enum int D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
enum int D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
enum int D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
enum int D3D12_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = 0xffffffff;
enum float D3D12_HS_MAXTESSFACTOR_LOWER_BOUND = 1.0f;
enum float D3D12_HS_MAXTESSFACTOR_UPPER_BOUND = 64.0f;
enum int D3D12_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
enum int D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = 1;
enum int D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = 1;
enum int D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = 2;
enum int D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = 1;
enum int D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
enum int D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
enum int D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
enum int D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
enum int D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = 128;
enum int D3D12_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0;
enum int D3D12_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0;
enum int D3D12_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0;
enum int D3D12_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1;
enum int D3D12_IA_INSTANCE_ID_BIT_COUNT = 32;
enum int D3D12_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32;
enum int D3D12_IA_PATCH_MAX_CONTROL_POINT_COUNT = 32;
enum int D3D12_IA_PRIMITIVE_ID_BIT_COUNT = 32;
enum int D3D12_IA_VERTEX_ID_BIT_COUNT = 32;
enum int D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32;
enum int D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128;
enum int D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 32;
enum int D3D12_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 0xffffffff;
enum int D3D12_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 0xffffffff;
enum int D3D12_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = 0xffffffff;
enum int D3D12_KEEP_UNORDERED_ACCESS_VIEWS = 0xffffffff;
enum float D3D12_LINEAR_GAMMA = 1.0f;
enum int D3D12_MAJOR_VERSION = 12;
enum float D3D12_MAX_BORDER_COLOR_COMPONENT = 1.0f;
enum float D3D12_MAX_DEPTH = 1.0f;
enum int D3D12_MAX_LIVE_STATIC_SAMPLERS = 2032;
enum int D3D12_MAX_MAXANISOTROPY = 16;
enum int D3D12_MAX_MULTISAMPLE_SAMPLE_COUNT = 32;
enum float D3D12_MAX_POSITION_VALUE = 3.402823466e+34f;
enum int D3D12_MAX_ROOT_COST = 64;
enum int D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_size_tIER_1 = 1000000;
enum int D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_size_tIER_2 = 1000000;
enum int D3D12_MAX_SHADER_VISIBLE_SAMPLER_HEAP_SIZE = 2048;
enum int D3D12_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17;
enum int D3D12_MAX_VIEW_INSTANCE_COUNT = 4;
enum int D3D12_MINOR_VERSION = 0;
enum float D3D12_MIN_BORDER_COLOR_COMPONENT = 0.0f;
enum float D3D12_MIN_DEPTH = 0.0f;
enum int D3D12_MIN_MAXANISOTROPY = 0;
enum float D3D12_MIP_LOD_BIAS_MAX = 15.99f;
enum float D3D12_MIP_LOD_BIAS_MIN = -16.0f;
enum int D3D12_MIP_LOD_FRACTIONAL_BIT_COUNT = 8;
enum int D3D12_MIP_LOD_RANGE_BIT_COUNT = 8;
enum float D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = 1.4f;
enum int D3D12_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0;
enum int D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END = 0xffffffff;
enum int D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START = 0xfffffff8;
enum int D3D12_PACKED_TILE = 0xffffffff;
enum int D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15;
enum int D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16;
enum int D3D12_PS_CS_UAV_REGISTER_COMPONENTS = 1;
enum int D3D12_PS_CS_UAV_REGISTER_COUNT = 8;
enum int D3D12_PS_CS_UAV_REGISTER_READS_PER_INST = 1;
enum int D3D12_PS_CS_UAV_REGISTER_READ_PORTS = 1;
enum int D3D12_PS_FRONTFACING_DEFAULT_VALUE = 0xffffffff;
enum int D3D12_PS_FRONTFACING_FALSE_VALUE = 0;
enum int D3D12_PS_FRONTFACING_TRUE_VALUE = 0xffffffff;
enum int D3D12_PS_INPUT_REGISTER_COMPONENTS = 4;
enum int D3D12_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_PS_INPUT_REGISTER_COUNT = 32;
enum int D3D12_PS_INPUT_REGISTER_READS_PER_INST = 2;
enum int D3D12_PS_INPUT_REGISTER_READ_PORTS = 1;
enum float D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.0f;
enum int D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1;
enum int D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1;
enum int D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1;
enum int D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_PS_OUTPUT_MASK_REGISTER_COUNT = 1;
enum int D3D12_PS_OUTPUT_REGISTER_COMPONENTS = 4;
enum int D3D12_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_PS_OUTPUT_REGISTER_COUNT = 8;
enum float D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.5f;
enum int D3D12_RAW_UAV_SRV_BYTE_ALIGNMENT = 16;
enum int D3D12_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096;
enum int D3D12_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27;
enum int D3D12_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
enum int D3D12_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096;
enum int D3D12_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32;
enum int D3D12_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32;
enum int D3D12_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384;
enum int D3D12_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024;
enum int D3D12_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
enum int D3D12_REQ_MAXANISOTROPY = 16;
enum int D3D12_REQ_MIP_LEVELS = 15;
enum int D3D12_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048;
enum int D3D12_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096;
enum int D3D12_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384;
enum int D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128;
enum float D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = 0.25f;
enum int D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = 2048;
enum int D3D12_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20;
enum int D3D12_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096;
enum int D3D12_REQ_SUBRESOURCES = 30720;
enum int D3D12_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048;
enum int D3D12_REQ_TEXTURE1D_U_DIMENSION = 16384;
enum int D3D12_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048;
enum int D3D12_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384;
enum int D3D12_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048;
enum int D3D12_REQ_TEXTURECUBE_DIMENSION = 16384;
enum int D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0;
enum int D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES = 0xffffffff;
enum int D3D12_SHADER_MAJOR_VERSION = 5;
enum int D3D12_SHADER_MAX_INSTANCES = 65535;
enum int D3D12_SHADER_MAX_INTERFACES = 253;
enum int D3D12_SHADER_MAX_INTERFACE_CALL_SITES = 4096;
enum int D3D12_SHADER_MAX_TYPES = 65535;
enum int D3D12_SHADER_MINOR_VERSION = 1;
enum int D3D12_SHIFT_INSTRUCTION_PAD_VALUE = 0;
enum int D3D12_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5;
enum int D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT = 8;
enum int D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 65536;
enum int D3D12_SMALL_RESOURCE_PLACEMENT_ALIGNMENT = 4096;
enum int D3D12_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
enum int D3D12_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512;
enum int D3D12_SO_BUFFER_SLOT_COUNT = 4;
enum int D3D12_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 0xffffffff;
enum int D3D12_SO_NO_RASTERIZED_STREAM = 0xffffffff;
enum int D3D12_SO_OUTPUT_COMPONENT_COUNT = 128;
enum int D3D12_SO_STREAM_COUNT = 4;
enum int D3D12_SPEC_DATE_DAY = 14;
enum int D3D12_SPEC_DATE_MONTH = 11;
enum int D3D12_SPEC_DATE_YEAR = 2014;
enum float D3D12_SPEC_VERSION = 1.16;
enum float D3D12_SRGB_GAMMA = 2.2f;
enum float D3D12_SRGB_TO_float_DENOMINATOR_1 = 12.92f;
enum float D3D12_SRGB_TO_float_DENOMINATOR_2 = 1.055f;
enum float D3D12_SRGB_TO_float_EXPONENT = 2.4f;
enum float D3D12_SRGB_TO_float_OFFSET = 0.055f;
enum float D3D12_SRGB_TO_float_THRESHOLD = 0.04045f;
enum float D3D12_SRGB_TO_float_TOLERANCE_IN_ULP = 0.5f;
enum int D3D12_STANDARD_COMPONENT_BIT_COUNT = 32;
enum int D3D12_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64;
enum int D3D12_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4;
enum int D3D12_STANDARD_PIXEL_COMPONENT_COUNT = 128;
enum int D3D12_STANDARD_PIXEL_ELEMENT_COUNT = 32;
enum int D3D12_STANDARD_VECTOR_SIZE = 4;
enum int D3D12_STANDARD_VERTEX_ELEMENT_COUNT = 32;
enum int D3D12_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64;
enum int D3D12_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8;
enum int D3D12_SUBTEXEL_FRACTIONAL_BIT_COUNT = 8;
enum int D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_END = 0xffffffff;
enum int D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_START = 0xfffffff0;
enum int D3D12_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = 64;
enum int D3D12_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = 64;
enum int D3D12_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = 63;
enum int D3D12_TESSELLATOR_MAX_TESSELLATION_FACTOR = 64;
enum int D3D12_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = 2;
enum int D3D12_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = 1;
enum int D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1;
enum int D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16;
enum int D3D12_TEXTURE_DATA_PITCH_ALIGNMENT = 256;
enum int D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT = 512;
enum int D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES = 65536;
enum int D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT = 4096;
enum int D3D12_UAV_SLOT_COUNT = 64;
enum int D3D12_UNBOUND_MEMORY_ACCESS_RESULT = 0;
enum int D3D12_VIDEO_DECODE_MAX_ARGUMENTS = 10;
enum int D3D12_VIDEO_DECODE_STATUS_MACROBLOCKS_AFFECTED_UNKNOWN = 0xffffffff;
enum int D3D12_VIDEO_PROCESS_MAX_FILTERS = 32;
enum int D3D12_VIDEO_PROCESS_STEREO_VIEWS = 2;
enum int D3D12_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15;
enum int D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16;
enum int D3D12_VIEWPORT_BOUNDS_MAX = 32767;
enum int D3D12_VIEWPORT_BOUNDS_MIN = -32768;
enum int D3D12_VS_INPUT_REGISTER_COMPONENTS = 4;
enum int D3D12_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_VS_INPUT_REGISTER_COUNT = 32;
enum int D3D12_VS_INPUT_REGISTER_READS_PER_INST = 2;
enum int D3D12_VS_INPUT_REGISTER_READ_PORTS = 1;
enum int D3D12_VS_OUTPUT_REGISTER_COMPONENTS = 4;
enum int D3D12_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum int D3D12_VS_OUTPUT_REGISTER_COUNT = 32;
enum int D3D12_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10;
enum int D3D12_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25;
enum int D3D12_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25;

enum int D3D12_SHADER_COMPONENT_MAPPING_MASK = 0x7;
enum int D3D12_SHADER_COMPONENT_MAPPING_SHIFT = 3;
enum int D3D12_FILTER_REDUCTION_TYPE_MASK = 0x3;
enum int D3D12_FILTER_REDUCTION_TYPE_SHIFT = 7;
enum int D3D12_FILTER_TYPE_MASK = 0x3;
enum int D3D12_MIN_FILTER_SHIFT = 4;
enum int D3D12_MAG_FILTER_SHIFT = 2;
enum int D3D12_MIP_FILTER_SHIFT = 0;
enum int D3D12_ANISOTROPIC_FILTERING_BIT = 0x40;

const IID D3D12ExperimentalShaderModels = { 0x76f5573e, 0xf13a, 0x40f5, [0xb2, 0x97, 0x81, 0xce, 0x9e, 0x18, 0x93, 0x3f]};

alias ulong D3D12_GPU_VIRTUAL_ADDRESS;
alias D3D_PRIMITIVE_TOPOLOGY D3D12_PRIMITIVE_TOPOLOGY;
alias D3D_PRIMITIVE D3D12_PRIMITIVE;
alias RECT D3D12_RECT;


///
/// Mixins
///

///This macros have not yet been converted to mixins
/*
#define D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES (1<<(D3D12_SHADER_COMPONENT_MAPPING_SHIFT*4)) 
#define D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING(Src0,Src1,Src2,Src3) ((((Src0)&D3D12_SHADER_COMPONENT_MAPPING_MASK)| \
                                                                (((Src1)&D3D12_SHADER_COMPONENT_MAPPING_MASK)<<D3D12_SHADER_COMPONENT_MAPPING_SHIFT)| \
                                                                (((Src2)&D3D12_SHADER_COMPONENT_MAPPING_MASK)<<(D3D12_SHADER_COMPONENT_MAPPING_SHIFT*2))| \
                                                                (((Src3)&D3D12_SHADER_COMPONENT_MAPPING_MASK)<<(D3D12_SHADER_COMPONENT_MAPPING_SHIFT*3))| \
                                                                D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES))
#define D3D12_DECODE_SHADER_4_COMPONENT_MAPPING(ComponentToExtract,Mapping) ((D3D12_SHADER_COMPONENT_MAPPING)(Mapping >> (D3D12_SHADER_COMPONENT_MAPPING_SHIFT*ComponentToExtract) & D3D12_SHADER_COMPONENT_MAPPING_MASK))
#define D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING(0,1,2,3) 
#define D3D12_ENCODE_BASIC_FILTER( min, mag, mip, reduction )                                                     \
                                   ( ( D3D12_FILTER ) (                                                           \
                                   ( ( ( min ) & D3D12_FILTER_TYPE_MASK ) << D3D12_MIN_FILTER_SHIFT ) |           \
                                   ( ( ( mag ) & D3D12_FILTER_TYPE_MASK ) << D3D12_MAG_FILTER_SHIFT ) |           \
                                   ( ( ( mip ) & D3D12_FILTER_TYPE_MASK ) << D3D12_MIP_FILTER_SHIFT ) |           \
                                   ( ( ( reduction ) & D3D12_FILTER_REDUCTION_TYPE_MASK ) << D3D12_FILTER_REDUCTION_TYPE_SHIFT ) ) ) 
#define D3D12_ENCODE_ANISOTROPIC_FILTER( reduction )                                                  \
                                         ( ( D3D12_FILTER ) (                                         \
                                         D3D12_ANISOTROPIC_FILTERING_BIT |                            \
                                         D3D12_ENCODE_BASIC_FILTER( D3D12_FILTER_TYPE_LINEAR,         \
                                                                    D3D12_FILTER_TYPE_LINEAR,         \
                                                                    D3D12_FILTER_TYPE_LINEAR,         \
                                                                    reduction ) ) )                     
#define D3D12_DECODE_MIN_FILTER( D3D12Filter )                                                              \
                                 ( ( D3D12_FILTER_TYPE )                                                    \
                                 ( ( ( D3D12Filter ) >> D3D12_MIN_FILTER_SHIFT ) & D3D12_FILTER_TYPE_MASK ) ) 
#define D3D12_DECODE_MAG_FILTER( D3D12Filter )                                                              \
                                 ( ( D3D12_FILTER_TYPE )                                                    \
                                 ( ( ( D3D12Filter ) >> D3D12_MAG_FILTER_SHIFT ) & D3D12_FILTER_TYPE_MASK ) ) 
#define D3D12_DECODE_MIP_FILTER( D3D12Filter )                                                              \
                                 ( ( D3D12_FILTER_TYPE )                                                    \
                                 ( ( ( D3D12Filter ) >> D3D12_MIP_FILTER_SHIFT ) & D3D12_FILTER_TYPE_MASK ) ) 
#define D3D12_DECODE_FILTER_REDUCTION( D3D12Filter )                                                        \
                                 ( ( D3D12_FILTER_REDUCTION_TYPE )                                                      \
                                 ( ( ( D3D12Filter ) >> D3D12_FILTER_REDUCTION_TYPE_SHIFT ) & D3D12_FILTER_REDUCTION_TYPE_MASK ) ) 
#define D3D12_DECODE_IS_COMPARISON_FILTER( D3D12Filter )                                                    \
                                 ( D3D12_DECODE_FILTER_REDUCTION( D3D12Filter ) == D3D12_FILTER_REDUCTION_TYPE_COMPARISON ) 
#define D3D12_DECODE_IS_ANISOTROPIC_FILTER( D3D12Filter )                                               \
                            ( ( ( D3D12Filter ) & D3D12_ANISOTROPIC_FILTERING_BIT ) &&                  \
                            ( D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MIN_FILTER( D3D12Filter ) ) &&   \
                            ( D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MAG_FILTER( D3D12Filter ) ) &&   \
                            ( D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MIP_FILTER( D3D12Filter ) ) )      
*/

///
/// Functions
///

HRESULT D3D12CreateDevice(IUnknown pAdapter, D3D_FEATURE_LEVEL MinimumFeatureLevel, REFIID riid, void** ppDevice );
HRESULT D3D12GetDebugInterface(REFIID riid, void** ppvDebug);
HRESULT D3D12EnableExperimentalFeatures(uint NumFeatures, const IID* pIIDs, void* pConfigurationStructs, uint* pConfigurationStructSizes);
HRESULT D3D12SerializeRootSignature(const D3D12_ROOT_SIGNATURE_DESC* pRootSignature, D3D_ROOT_SIGNATURE_VERSION Version, ID3DBlob* ppBlob, ID3DBlob* ppErrorBlob);
HRESULT D3D12CreateRootSignatureDeserializer(const void *pSrcData, size_t SrcDataSizeInBytes, REFIID pRootSignatureDeserializerInterface, void** ppRootSignatureDeserializer);
HRESULT D3D12SerializeVersionedRootSignature(const D3D12_VERSIONED_ROOT_SIGNATURE_DESC* pRootSignature, ID3DBlob* ppBlob, ID3DBlob* ppErrorBlob);
HRESULT D3D12CreateVersionedRootSignatureDeserializer(const void *pSrcData, size_t SrcDataSizeInBytes, REFIID pRootSignatureDeserializerInterface, void** ppRootSignatureDeserializer);

///
/// Enumerations
///

enum D3D12_COMMAND_LIST_TYPE
{
    DIRECT= 0,
    BUNDLE= 1,
    COMPUTE= 2,
    COPY= 3,
    VIDEO_DECODE= 4,
    VIDEO_PROCESS= 5
}

enum D3D12_COMMAND_QUEUE_FLAGS
{
    NONE = 0,
    DISABLE_GPU_TIMEOUT= 0x1
}

enum D3D12_COMMAND_QUEUE_PRIORITY
{
    NORMAL= 0,
    HIGH= 100,
    GLOBAL_REALTIME= 10000
}

enum D3D12_PRIMITIVE_TOPOLOGY_TYPE
{
    UNDEFINED= 0,
    POINT= 1,
    LINE= 2,
    TRIANGLE= 3,
    PATCH= 4
}

enum D3D12_INPUT_CLASSIFICATION
{
    PER_VERTEX_DATA= 0,
    PER_INSTANCE_DATA= 1
}

enum D3D12_FILL_MODE
{
    D3D12_FILL_MODE_WIREFRAME= 2,
    D3D12_FILL_MODE_SOLID= 3
}

enum D3D12_CULL_MODE
{
    NONE= 1,
    FRONT= 2,
    BACK= 3
}

enum D3D12_COMPARISON_FUNC
{
    NEVER = 1,
    LESS = 2,
    EQUAL = 3,
    LESS_EQUAL = 4,
    GREATER = 5,
    NOT_EQUAL = 6,
    GREATER_EQUAL = 7,
    ALWAYS = 8
}

enum D3D12_DEPTH_WRITE_MASK
{
    ZERO = 0,
    ALL = 1
}

enum D3D12_STENCIL_OP
{
    KEEP = 1,
    ZERO = 2,
    REPLACE = 3,
    INCR_SAT = 4,
    DECR_SAT = 5,
    INVERT = 6,
    INCR = 7,
    DECR = 8
}

enum D3D12_BLEND
{
    ZERO = 1,
    ONE = 2,
    SRC_COLOR = 3,
    INV_SRC_COLOR = 4,
    SRC_ALPHA = 5,
    INV_SRC_ALPHA = 6,
    DEST_ALPHA = 7,
    INV_DEST_ALPHA = 8,
    DEST_COLOR = 9,
    INV_DEST_COLOR = 10,
    SRC_ALPHA_SAT = 11,
    BLEND_FACTOR = 14,
    INV_BLEND_FACTOR = 15,
    SRC1_COLOR = 16,
    INV_SRC1_COLOR = 17,
    SRC1_ALPHA = 18,
    INV_SRC1_ALPHA = 19
}

enum D3D12_BLEND_OP
{
    ADD = 1,
    SUBTRACT = 2,
    REV_SUBTRACT = 3,
    MIN = 4,
    MAX = 5
}

enum D3D12_COLOR_WRITE_ENABLE
{
    RED = 1,
    GREEN = 2,
    BLUE = 4,
    ALPHA = 8,
    ALL = ( ( ( RED | GREEN )  | BLUE )  | ALPHA ) 
}

enum D3D12_LOGIC_OP
{
    CLEAR = 0,
    SET = ( CLEAR + 1 ),
    COPY = ( SET + 1 ),
    COPY_INVERTED = ( COPY + 1 ),
    NOOP = ( COPY_INVERTED + 1 ),
    INVERT = ( NOOP + 1 ),
    AND = ( INVERT + 1 ),
    NAND = ( AND + 1 ),
    OR = ( NAND + 1 ),
    NOR = ( OR + 1 ),
    XOR = ( NOR + 1 ),
    EQUIV = ( XOR + 1 ),
    AND_REVERSE = ( EQUIV + 1 ),
    AND_INVERTED = ( AND_REVERSE + 1 ),
    OR_REVERSE = ( AND_INVERTED + 1 ),
    OR_INVERTED = ( OR_REVERSE + 1 ) }

enum D3D12_CONSERVATIVE_RASTERIZATION_MODE
{
    OFF = 0,
    ON = 1
}

enum D3D12_INDEX_BUFFER_STRIP_CUT_VALUE
{
    VALUE_DISABLED = 0,
    VALUE_0xFFFF = 1,
    VALUE_0xFFFFFFFF = 2
}

enum D3D12_PIPELINE_STATE_FLAGS
{
    NONE = 0,
    TOOL_DEBUG = 0x1
}

enum D3D12_PIPELINE_STATE_SUBOBJECT_TYPE
{
    ROOT_SIGNATURE = 0,
    VS = ( ROOT_SIGNATURE + 1 ),
    PS = ( VS + 1 ),
    DS = ( PS + 1 ),
    HS = ( DS + 1 ),
    GS = ( HS + 1 ),
    CS = ( GS + 1 ),
    STREAM_OUTPUT = ( CS + 1 ),
    BLEND = ( STREAM_OUTPUT + 1 ),
    SAMPLE_MASK = ( BLEND + 1 ),
    RASTERIZER = ( SAMPLE_MASK + 1 ),
    DEPTH_STENCIL = ( RASTERIZER + 1 ),
    INPUT_LAYOUT = ( DEPTH_STENCIL + 1 ),
    IB_STRIP_CUT_VALUE = ( INPUT_LAYOUT + 1 ),
    PRIMITIVE_TOPOLOGY = ( IB_STRIP_CUT_VALUE + 1 ),
    RENDER_TARGET_FORMATS = ( PRIMITIVE_TOPOLOGY + 1 ),
    DEPTH_STENCIL_FORMAT = ( RENDER_TARGET_FORMATS + 1 ),
    SAMPLE_DESC = ( DEPTH_STENCIL_FORMAT + 1 ),
    NODE_MASK = ( SAMPLE_DESC + 1 ),
    CACHED_PSO = ( NODE_MASK + 1 ),
    FLAGS = ( CACHED_PSO + 1 ),
    DEPTH_STENCIL1 = ( FLAGS + 1 ),
    VIEW_INSTANCING = ( DEPTH_STENCIL1 + 1 ),
    MAX_VALID = ( VIEW_INSTANCING + 1 )
}

enum D3D12_FEATURE
{
    D3D12_OPTIONS = 0,
    ARCHITECTURE = 1,
    FEATURE_LEVELS = 2,
    FORMAT_SUPPORT = 3,
    MULTISAMPLE_QUALITY_LEVELS = 4,
    FORMAT_INFO = 5,
    GPU_VIRTUAL_ADDRESS_SUPPORT = 6,
    SHADER_MODEL = 7,
    D3D12_OPTIONS1 = 8,
    ROOT_SIGNATURE = 12,
    ARCHITECTURE1 = 16,
    D3D12_OPTIONS2 = 18,
    SHADER_CACHE = 19,
    COMMAND_QUEUE_PRIORITY = 20,
    D3D12_OPTIONS3 = 21,
    EXISTING_HEAPS = 22
}

enum D3D12_SHADER_MIN_PRECISION_SUPPORT
{
    SUPPORT_NONE = 0,
    SUPPORT_10_BIT = 0x1,
    SUPPORT_16_BIT = 0x2
}

enum D3D12_TILED_RESOURCES_TIER
{
    TIER_NOT_SUPPORTED = 0,
    TIER_1 = 1,
    TIER_2 = 2,
    TIER_3 = 3
}

enum D3D12_RESOURCE_BINDING_TIER
{
    TIER_1 = 1,
    TIER_2 = 2,
    TIER_3 = 3
}

enum D3D12_CONSERVATIVE_RASTERIZATION_TIER
{
    TIER_NOT_SUPPORTED = 0,
    TIER_1 = 1,
    TIER_2 = 2,
    TIER_3 = 3
}

enum D3D12_FORMAT_SUPPORT1
{
    NONE = 0,
    BUFFER = 0x1,
    IA_VERTEX_BUFFER = 0x2,
    IA_INDEX_BUFFER = 0x4,
    SO_BUFFER = 0x8,
    TEXTURE1D = 0x10,
    TEXTURE2D = 0x20,
    TEXTURE3D = 0x40,
    TEXTURECUBE = 0x80,
    SHADER_LOAD = 0x100,
    SHADER_SAMPLE = 0x200,
    SHADER_SAMPLE_COMPARISON = 0x400,
    SHADER_SAMPLE_MONO_TEXT = 0x800,
    MIP = 0x1000,
    RENDER_TARGET = 0x4000,
    BLENDABLE = 0x8000,
    DEPTH_STENCIL = 0x10000,
    MULTISAMPLE_RESOLVE = 0x40000,
    DISPLAY = 0x80000,
    CAST_WITHIN_BIT_LAYOUT = 0x100000,
    MULTISAMPLE_RENDERTARGET = 0x200000,
    MULTISAMPLE_LOAD = 0x400000,
    SHADER_GATHER = 0x800000,
    BACK_BUFFER_CAST = 0x1000000,
    TYPED_UNORDERED_ACCESS_VIEW = 0x2000000,
    SHADER_GATHER_COMPARISON = 0x4000000,
    DECODER_OUTPUT = 0x8000000,
    VIDEO_PROCESSOR_OUTPUT = 0x10000000,
    VIDEO_PROCESSOR_INPUT = 0x20000000,
    VIDEO_ENCODER = 0x40000000
}

enum D3D12_FORMAT_SUPPORT2
{
    NONE = 0,
    UAV_ATOMIC_ADD = 0x1,
    UAV_ATOMIC_BITWISE_OPS = 0x2,
    UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 0x4,
    UAV_ATOMIC_EXCHANGE = 0x8,
    UAV_ATOMIC_SIGNED_MIN_OR_MAX = 0x10,
    UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 0x20,
    UAV_TYPED_LOAD = 0x40,
    UAV_TYPED_STORE = 0x80,
    OUTPUT_MERGER_LOGIC_OP = 0x100,
    TILED = 0x200,
    MULTIPLANE_OVERLAY = 0x4000
}

enum D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS
{
    NONE = 0,
    TILED_RESOURCE = 0x1
}

enum D3D12_CROSS_NODE_SHARING_TIER
{
    TIER_NOT_SUPPORTED = 0,
    TIER_1_EMULATED = 1,
    TIER_1 = 2,
    TIER_2 = 3
}

enum D3D12_RESOURCE_HEAP_TIER
{
    TIER_1 = 1,
    TIER_2 = 2
}

enum D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER
{
    TIER_NOT_SUPPORTED = 0,
    TIER_1 = 1,
    TIER_2 = 2
}

enum D3D12_VIEW_INSTANCING_TIER
{
    TIER_NOT_SUPPORTED = 0,
    TIER_1 = 1,
    TIER_2 = 2,
    TIER_3 = 3
}

enum D3D_ROOT_SIGNATURE_VERSION
{
    VERSION_1 = 0x1,
    VERSION_1_0 = 0x1,
    VERSION_1_1 = 0x2
}

enum D3D_SHADER_MODEL
{
    MODEL_5_1 = 0x51,
    MODEL_6_0 = 0x60,
    MODEL_6_1 = 0x61
}

enum D3D12_SHADER_CACHE_SUPPORT_FLAGS
{
    NONE = 0,
    SINGLE_PSO = 0x1,
    LIBRARY = 0x2,
    AUTOMATIC_INPROC_CACHE = 0x4,
    AUTOMATIC_DISK_CACHE = 0x8
}

enum D3D12_COMMAND_LIST_SUPPORT_FLAGS
{
    NONE = 0,
    DIRECT = ( 1 << D3D12_COMMAND_LIST_TYPE.DIRECT ),
    BUNDLE = ( 1 << D3D12_COMMAND_LIST_TYPE.BUNDLE ),
    COMPUTE = ( 1 << D3D12_COMMAND_LIST_TYPE.COMPUTE ),
    COPY = ( 1 << D3D12_COMMAND_LIST_TYPE.COPY ),
    VIDEO_DECODE = ( 1 << D3D12_COMMAND_LIST_TYPE.VIDEO_DECODE ),
    VIDEO_PROCESS = ( 1 << D3D12_COMMAND_LIST_TYPE.VIDEO_PROCESS )
}

enum D3D12_HEAP_TYPE
{
    DEFAULT = 1,
    UPLOAD = 2,
    READBACK = 3,
    CUSTOM = 4
}

enum D3D12_CPU_PAGE_PROPERTY
{
    UNKNOWN = 0,
    NOT_AVAILABLE = 1,
    WRITE_COMBINE = 2,
    WRITE_BACK = 3
}

enum D3D12_MEMORY_POOL
{
    POOL_UNKNOWN = 0,
    POOL_L0 = 1,
    POOL_L1 = 2
}

enum D3D12_HEAP_FLAGS
{
    NONE = 0,
    SHARED = 0x1,
    DENY_BUFFERS = 0x4,
    ALLOW_DISPLAY = 0x8,
    SHARED_CROSS_ADAPTER = 0x20,
    DENY_RT_DS_TEXTURES = 0x40,
    DENY_NON_RT_DS_TEXTURES = 0x80,
    HARDWARE_PROTECTED = 0x100,
    ALLOW_WRITE_WATCH = 0x200,
    ALLOW_ALL_BUFFERS_AND_TEXTURES = 0,
    ALLOW_ONLY_BUFFERS = 0xc0,
    ALLOW_ONLY_NON_RT_DS_TEXTURES = 0x44,
    ALLOW_ONLY_RT_DS_TEXTURES = 0x84
}

enum D3D12_RESOURCE_DIMENSION
{
    UNKNOWN = 0,
    BUFFER = 1,
    TEXTURE1D = 2,
    TEXTURE2D = 3,
    TEXTURE3D = 4
}

enum D3D12_TEXTURE_LAYOUT
{
    LAYOUT_UNKNOWN = 0,
    LAYOUT_ROW_MAJOR = 1,
    LAYOUT_64KB_UNDEFINED_SWIZZLE = 2,
    LAYOUT_64KB_STANDARD_SWIZZLE = 3
}

enum D3D12_RESOURCE_FLAGS
{
    NONE = 0,
    ALLOW_RENDER_TARGET = 0x1,
    ALLOW_DEPTH_STENCIL = 0x2,
    ALLOW_UNORDERED_ACCESS = 0x4,
    DENY_SHADER_RESOURCE = 0x8,
    ALLOW_CROSS_ADAPTER = 0x10,
    ALLOW_SIMULTANEOUS_ACCESS = 0x20,
    VIDEO_DECODE_REFERENCE_ONLY = 0x40
}

enum D3D12_TILE_RANGE_FLAGS
{
    NONE = 0,
    NULL = 1,
    SKIP = 2,
    REUSE_SINGLE_TILE = 4
}

enum D3D12_TILE_MAPPING_FLAGS
{
    NONE = 0,
    NO_HAZARD = 0x1
}

enum D3D12_TILE_COPY_FLAGS
{
    NONE = 0,
    NO_HAZARD = 0x1,
    LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 0x2,
    SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 0x4
}

enum D3D12_RESOURCE_STATES
{
    COMMON = 0,
    VERTEX_AND_CONSTANT_BUFFER = 0x1,
    INDEX_BUFFER = 0x2,
    RENDER_TARGET = 0x4,
    UNORDERED_ACCESS = 0x8,
    DEPTH_WRITE = 0x10,
    DEPTH_READ = 0x20,
    NON_PIXEL_SHADER_RESOURCE = 0x40,
    PIXEL_SHADER_RESOURCE = 0x80,
    STREAM_OUT = 0x100,
    INDIRECT_ARGUMENT = 0x200,
    COPY_DEST = 0x400,
    COPY_SOURCE = 0x800,
    RESOLVE_DEST = 0x1000,
    RESOLVE_SOURCE = 0x2000,
    GENERIC_READ = ( ( ( ( ( 0x1 | 0x2 )  | 0x40 )  | 0x80 )  | 0x200 )  | 0x800 ) ,
    PRESENT = 0,
    PREDICATION = 0x200,
    VIDEO_DECODE_READ = 0x10000,
    VIDEO_DECODE_WRITE = 0x20000,
    VIDEO_PROCESS_READ = 0x40000,
    VIDEO_PROCESS_WRITE = 0x80000
}

enum D3D12_RESOURCE_BARRIER_TYPE
{
    TRANSITION = 0,
    ALIASING = ( TRANSITION + 1 ) ,
    UAV = ( ALIASING + 1 ) 
}

enum D3D12_RESOURCE_BARRIER_FLAGS
{
    NONE = 0,
    BEGIN_ONLY = 0x1,
    END_ONLY = 0x2
}

enum D3D12_TEXTURE_COPY_TYPE
{
    SUBRESOURCE_INDEX = 0,
    PLACED_FOOTPRINT = 1
}

enum D3D12_RESOLVE_MODE
{
    DECOMPRESS = 0,
    MIN = 1,
    MAX = 2,
    AVERAGE = 3
}

enum D3D12_VIEW_INSTANCING_FLAGS
{
    NONE = 0,
    ENABLE_VIEW_INSTANCE_MASKING = 0x1
}

enum D3D12_SHADER_COMPONENT_MAPPING
{
    FROM_MEMORY_COMPONENT_0 = 0,
    FROM_MEMORY_COMPONENT_1 = 1,
    FROM_MEMORY_COMPONENT_2 = 2,
    FROM_MEMORY_COMPONENT_3 = 3,
    FORCE_VALUE_0 = 4,
    FORCE_VALUE_1 = 5
}

enum D3D12_BUFFER_SRV_FLAGS
{
    NONE = 0,
    RAW = 0x1
}

enum D3D12_SRV_DIMENSION
{
    UNKNOWN = 0,
    BUFFER = 1,
    TEXTURE1D = 2,
    TEXTURE1DARRAY = 3,
    TEXTURE2D = 4,
    TEXTURE2DARRAY = 5,
    TEXTURE2DMS = 6,
    TEXTURE2DMSARRAY = 7,
    TEXTURE3D = 8,
    TEXTURECUBE = 9,
    TEXTURECUBEARRAY = 10
}

enum D3D12_FILTER
{
    MIN_MAG_MIP_POINT = 0,
    MIN_MAG_POINT_MIP_LINEAR = 0x1,
    MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
    MIN_POINT_MAG_MIP_LINEAR = 0x5,
    MIN_LINEAR_MAG_MIP_POINT = 0x10,
    MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
    MIN_MAG_LINEAR_MIP_POINT = 0x14,
    MIN_MAG_MIP_LINEAR = 0x15,
    ANISOTROPIC = 0x55,
    COMPARISON_MIN_MAG_MIP_POINT = 0x80,
    COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
    COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
    COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
    COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
    COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
    COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
    COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
    COMPARISON_ANISOTROPIC = 0xd5,
    MINIMUM_MIN_MAG_MIP_POINT = 0x100,
    MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
    MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
    MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
    MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
    MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
    MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
    MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
    MINIMUM_ANISOTROPIC = 0x155,
    MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
    MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
    MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
    MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
    MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
    MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
    MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
    MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
    MAXIMUM_ANISOTROPIC = 0x1d5
}

enum D3D12_FILTER_TYPE
{
    POINT = 0,
    LINEAR = 1
}

enum REDUCTION_TYPE
{
    STANDARD = 0,
    COMPARISON = 1,
    MINIMUM = 2,
    MAXIMUM = 3
}

enum D3D12_TEXTURE_ADDRESS_MODE
{
    WRAP = 1,
    MIRROR = 2,
    CLAMP = 3,
    BORDER = 4,
    MIRROR_ONCE = 5
}

enum D3D12_BUFFER_UAV_FLAGS
{
    NONE = 0,
    RAW = 0x1
}

enum D3D12_UAV_DIMENSION
{
    UNKNOWN = 0,
    BUFFER = 1,
    TEXTURE1D = 2,
    TEXTURE1DARRAY = 3,
    TEXTURE2D = 4,
    TEXTURE2DARRAY = 5,
    TEXTURE3D = 8
}

enum D3D12_RTV_DIMENSION
{
    UNKNOWN = 0,
    BUFFER = 1,
    TEXTURE1D = 2,
    TEXTURE1DARRAY = 3,
    TEXTURE2D = 4,
    TEXTURE2DARRAY = 5,
    TEXTURE2DMS = 6,
    TEXTURE2DMSARRAY = 7,
    TEXTURE3D = 8
}

enum D3D12_DSV_FLAGS
{
    NONE = 0,
    READ_ONLY_DEPTH = 0x1,
    READ_ONLY_STENCIL = 0x2
}

enum D3D12_DSV_DIMENSION
{
    UNKNOWN = 0,
    TEXTURE1D = 1,
    TEXTURE1DARRAY = 2,
    TEXTURE2D = 3,
    TEXTURE2DARRAY = 4,
    TEXTURE2DMS = 5,
    TEXTURE2DMSARRAY = 6
}

enum D3D12_CLEAR_FLAGS
{
    DEPTH = 0x1,
    STENCIL = 0x2
}

enum D3D12_FENCE_FLAGS
{
    NONE = 0,
    SHARED = 0x1,
    SHARED_CROSS_ADAPTER = 0x2,
    NON_MONITORED = 0x4
}

enum D3D12_DESCRIPTOR_HEAP_TYPE
{
    CBV_SRV_UAV = 0,
    SAMPLER = ( CBV_SRV_UAV + 1 ) ,
    RTV = ( SAMPLER + 1 ) ,
    DSV = ( RTV + 1 ) ,
    NUM_TYPES = ( DSV + 1 ) 
}

enum D3D12_DESCRIPTOR_HEAP_FLAGS
{
    NONE = 0,
    SHADER_VISIBLE = 0x1
}

enum D3D12_DESCRIPTOR_RANGE_TYPE
{
    SRV = 0,
    UAV = ( SRV + 1 ) ,
    CBV = ( UAV + 1 ) ,
    SAMPLER = ( CBV + 1 ) 
}

enum D3D12_SHADER_VISIBILITY
{
    ALL = 0,
    VERTEX = 1,
    HULL = 2,
    DOMAIN = 3,
    GEOMETRY = 4,
    PIXEL = 5
}

enum D3D12_ROOT_PARAMETER_TYPE
{
    TYPE_DESCRIPTOR_TABLE = 0,
    TYPE_32BIT_CONSTANTS = ( TYPE_DESCRIPTOR_TABLE + 1 ) ,
    TYPE_CBV = ( TYPE_32BIT_CONSTANTS + 1 ) ,
    TYPE_SRV = ( TYPE_CBV + 1 ) ,
    TYPE_UAV = ( TYPE_SRV + 1 ) 
}

enum D3D12_ROOT_SIGNATURE_FLAGS
{
    NONE = 0,
    ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT = 0x1,
    DENY_VERTEX_SHADER_ROOT_ACCESS = 0x2,
    DENY_HULL_SHADER_ROOT_ACCESS = 0x4,
    DENY_DOMAIN_SHADER_ROOT_ACCESS = 0x8,
    DENY_GEOMETRY_SHADER_ROOT_ACCESS = 0x10,
    DENY_PIXEL_SHADER_ROOT_ACCESS = 0x20,
    ALLOW_STREAM_OUTPUT = 0x40
}

enum D3D12_STATIC_BORDER_COLOR
{
    TRANSPARENT_BLACK = 0,
    OPAQUE_BLACK = ( TRANSPARENT_BLACK + 1 ) ,
    OPAQUE_WHITE = ( OPAQUE_BLACK + 1 ) 
}

enum D3D12_DESCRIPTOR_RANGE_FLAGS
{
    NONE = 0,
    DESCRIPTORS_VOLATILE = 0x1,
    DATA_VOLATILE = 0x2,
    DATA_STATIC_WHILE_SET_AT_EXECUTE = 0x4,
    DATA_STATIC = 0x8
}

enum D3D12_ROOT_DESCRIPTOR_FLAGS
{
    NONE = 0,
    DATA_VOLATILE = 0x2,
    DATA_STATIC_WHILE_SET_AT_EXECUTE = 0x4,
    DATA_STATIC = 0x8
}

enum D3D12_QUERY_HEAP_TYPE
{
    OCCLUSION = 0,
    TIMESTAMP = 1,
    PIPELINE_STATISTICS = 2,
    SO_STATISTICS = 3,
    VIDEO_DECODE_STATISTICS = 4,
    COPY_QUEUE_TIMESTAMP = 5
}

enum D3D12_QUERY_TYPE
{
    OCCLUSION = 0,
    BINARY_OCCLUSION = 1,
    TIMESTAMP = 2,
    PIPELINE_STATISTICS = 3,
    SO_STATISTICS_STREAM0 = 4,
    SO_STATISTICS_STREAM1 = 5,
    SO_STATISTICS_STREAM2 = 6,
    SO_STATISTICS_STREAM3 = 7,
    VIDEO_DECODE_STATISTICS = 8
}

enum D3D12_PREDICATION_OP
{
    EQUAL_ZERO = 0,
    NOT_EQUAL_ZERO = 1
}

enum D3D12_INDIRECT_ARGUMENT_TYPE
{
    DRAW = 0,
    DRAW_INDEXED = ( DRAW + 1 ) ,
    DISPATCH = ( DRAW_INDEXED + 1 ) ,
    VERTEX_BUFFER_VIEW = ( DISPATCH + 1 ) ,
    INDEX_BUFFER_VIEW = ( VERTEX_BUFFER_VIEW + 1 ) ,
    CONSTANT = ( INDEX_BUFFER_VIEW + 1 ) ,
    CONSTANT_BUFFER_VIEW = ( CONSTANT + 1 ) ,
    SHADER_RESOURCE_VIEW = ( CONSTANT_BUFFER_VIEW + 1 ) ,
    UNORDERED_ACCESS_VIEW = ( SHADER_RESOURCE_VIEW + 1 ) 
}

enum D3D12_WRITEBUFFERIMMEDIATE_MODE
{
    DEFAULT = 0,
    MARKER_IN = 0x1,
    MARKER_OUT = 0x2
}

enum D3D12_MULTIPLE_FENCE_WAIT_FLAGS
{
    NONE = 0,
    ANY = 0x1,
    ALL = 0
}

enum D3D12_RESIDENCY_PRIORITY
{
    MINIMUM	= 0x28000000,
    LOW	= 0x50000000,
    NORMAL = 0x78000000,
    HIGH = 0xa0010000,
    MAXIMUM = 0xc8000000
}

enum D3D12_RESIDENCY_FLAGS
{
    NONE = 0,
    DENY_OVERBUDGET = 0x1
}

///
/// Structures
///

struct D3D12_COMMAND_QUEUE_DESC
{
    D3D12_COMMAND_LIST_TYPE Type;
    int Priority;
    D3D12_COMMAND_QUEUE_FLAGS Flags;
    uint NodeMask;
}

struct D3D12_INPUT_ELEMENT_DESC
{
    LPCSTR SemanticName;
    uint SemanticIndex;
    DXGI_FORMAT Format;
    uint InputSlot;
    uint AlignedByteOffset;
    D3D12_INPUT_CLASSIFICATION InputSlotClass;
    uint InstanceDataStepRate;
}

struct D3D12_SO_DECLARATION_ENTRY
{
    uint Stream;
    LPCSTR SemanticName;
    uint SemanticIndex;
    BYTE StartComponent;
    BYTE ComponentCount;
    BYTE OutputSlot;
}

struct D3D12_VIEWPORT
{
    float TopLeftX;
    float TopLeftY;
    float Width;
    float Height;
    float MinDepth;
    float MaxDepth;
}


struct D3D12_BOX
{
    uint left;
    uint top;
    uint front;
    uint right;
    uint bottom;
    uint back;
}

struct D3D12_DEPTH_STENCILOP_DESC
{
    D3D12_STENCIL_OP StencilFailOp;
    D3D12_STENCIL_OP StencilDepthFailOp;
    D3D12_STENCIL_OP StencilPassOp;
    D3D12_COMPARISON_FUNC StencilFunc;
}

struct D3D12_DEPTH_STENCIL_DESC
{
    bool DepthEnable;
    D3D12_DEPTH_WRITE_MASK DepthWriteMask;
    D3D12_COMPARISON_FUNC DepthFunc;
    bool StencilEnable;
    ubyte StencilReadMask;
    ubyte StencilWriteMask;
    D3D12_DEPTH_STENCILOP_DESC FrontFace;
    D3D12_DEPTH_STENCILOP_DESC BackFace;
}

struct D3D12_DEPTH_STENCIL_DESC1
{
    bool DepthEnable;
    D3D12_DEPTH_WRITE_MASK DepthWriteMask;
    D3D12_COMPARISON_FUNC DepthFunc;
    bool StencilEnable;
    ubyte StencilReadMask;
    ubyte StencilWriteMask;
    D3D12_DEPTH_STENCILOP_DESC FrontFace;
    D3D12_DEPTH_STENCILOP_DESC BackFace;
    bool DepthBoundsTestEnable;
}

struct D3D12_RENDER_TARGET_BLEND_DESC
{
    bool BlendEnable;
    bool LogicOpEnable;
    D3D12_BLEND SrcBlend;
    D3D12_BLEND DestBlend;
    D3D12_BLEND_OP BlendOp;
    D3D12_BLEND SrcBlendAlpha;
    D3D12_BLEND DestBlendAlpha;
    D3D12_BLEND_OP BlendOpAlpha;
    D3D12_LOGIC_OP LogicOp;
    ubyte RenderTargetWriteMask;
}

struct D3D12_BLEND_DESC
{
    bool AlphaToCoverageEnable;
    bool IndependentBlendEnable;
    D3D12_RENDER_TARGET_BLEND_DESC[8] RenderTarget;
}

struct D3D12_RASTERIZER_DESC
{
    D3D12_FILL_MODE FillMode;
    D3D12_CULL_MODE CullMode;
    bool FrontCounterClockwise;
    int DepthBias;
    float DepthBiasClamp;
    float SlopeScaledDepthBias;
    bool DepthClipEnable;
    bool MultisampleEnable;
    bool AntialiasedLineEnable;
    uint ForcedSampleCount;
    D3D12_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster;
}

struct D3D12_SHADER_BYTECODE
{
    const void *pShaderBytecode;
    size_t BytecodeLength;
}

struct D3D12_STREAM_OUTPUT_DESC
{
    const D3D12_SO_DECLARATION_ENTRY *pSODeclaration;
    uint NumEntries;
    const uint *pBufferStrides;
    uint NumStrides;
    uint RasterizedStream;
}

struct D3D12_INPUT_LAYOUT_DESC
{
    const D3D12_INPUT_ELEMENT_DESC *pInputElementDescs;
    uint NumElements;
}

struct D3D12_CACHED_PIPELINE_STATE
{
    const void *pCachedBlob;
    size_t CachedBlobSizeInBytes;
}

struct D3D12_GRAPHICS_PIPELINE_STATE_DESC
{
    ID3D12RootSignature pRootSignature;
    D3D12_SHADER_BYTECODE VS;
    D3D12_SHADER_BYTECODE PS;
    D3D12_SHADER_BYTECODE DS;
    D3D12_SHADER_BYTECODE HS;
    D3D12_SHADER_BYTECODE GS;
    D3D12_STREAM_OUTPUT_DESC StreamOutput;
    D3D12_BLEND_DESC BlendState;
    uint SampleMask;
    D3D12_RASTERIZER_DESC RasterizerState;
    D3D12_DEPTH_STENCIL_DESC DepthStencilState;
    D3D12_INPUT_LAYOUT_DESC InputLayout;
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE IBStripCutValue;
    D3D12_PRIMITIVE_TOPOLOGY_TYPE PrimitiveTopologyType;
    uint NumRenderTargets;
    DXGI_FORMAT[8] RTVFormats;
    DXGI_FORMAT DSVFormat;
    DXGI_SAMPLE_DESC SampleDesc;
    uint NodeMask;
    D3D12_CACHED_PIPELINE_STATE CachedPSO;
    D3D12_PIPELINE_STATE_FLAGS Flags;
}

struct D3D12_COMPUTE_PIPELINE_STATE_DESC
{
    ID3D12RootSignature pRootSignature;
    D3D12_SHADER_BYTECODE CS;
    uint NodeMask;
    D3D12_CACHED_PIPELINE_STATE CachedPSO;
    D3D12_PIPELINE_STATE_FLAGS Flags;
}

struct D3D12_RT_FORMAT_ARRAY
{
    DXGI_FORMAT[8] RTFormats;
    uint NumRenderTargets;
}

struct D3D12_PIPELINE_STATE_STREAM_DESC
{
    size_t SizeInBytes;
    void *pPipelineStateSubobjectStream;
}

struct D3D12_FEATURE_DATA_D3D12_OPTIONS
{
    bool DoublePrecisionFloatShaderOps;
    bool OutputMergerLogicOp;
    D3D12_SHADER_MIN_PRECISION_SUPPORT MinPrecisionSupport;
    D3D12_TILED_RESOURCES_TIER TiledResourcesTier;
    D3D12_RESOURCE_BINDING_TIER ResourceBindingTier;
    bool PSSpecifiedStencilRefSupported;
    bool TypedUAVLoadAdditionalFormats;
    bool ROVsSupported;
    D3D12_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
    uint MaxGPUVirtualAddressBitsPerResource;
    bool StandardSwizzle64KBSupported;
    D3D12_CROSS_NODE_SHARING_TIER CrossNodeSharingTier;
    bool CrossAdapterRowMajorTextureSupported;
    bool VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation;
    D3D12_RESOURCE_HEAP_TIER ResourceHeapTier;
}

struct D3D12_FEATURE_DATA_D3D12_OPTIONS1
{
    bool WaveOps;
    uint WaveLaneCountMin;
    uint WaveLaneCountMax;
    uint TotalLaneCount;
    bool ExpandedComputeResourceStates;
    bool Int64ShaderOps;
}

struct D3D12_FEATURE_DATA_D3D12_OPTIONS2
{
    bool DepthBoundsTestSupported;
    D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER ProgrammableSamplePositionsTier;
}

struct D3D12_FEATURE_DATA_ROOT_SIGNATURE
{
    D3D_ROOT_SIGNATURE_VERSION HighestVersion;
}

struct D3D12_FEATURE_DATA_ARCHITECTURE
{
    uint NodeIndex;
    bool TileBasedRenderer;
    bool UMA;
    bool CacheCoherentUMA;
}

struct D3D12_FEATURE_DATA_ARCHITECTURE1
{
    uint NodeIndex;
    bool TileBasedRenderer;
    bool UMA;
    bool CacheCoherentUMA;
    bool IsolatedMMU;
}

struct D3D12_FEATURE_DATA_FEATURE_LEVELS
{
    uint NumFeatureLevels;
    const D3D_FEATURE_LEVEL *pFeatureLevelsRequested;
    D3D_FEATURE_LEVEL MaxSupportedFeatureLevel;
}

struct D3D12_FEATURE_DATA_SHADER_MODEL
{
    D3D_SHADER_MODEL HighestShaderModel;
}

struct D3D12_FEATURE_DATA_FORMAT_SUPPORT
{
    DXGI_FORMAT Format;
    D3D12_FORMAT_SUPPORT1 Support1;
    D3D12_FORMAT_SUPPORT2 Support2;
}

struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS
{
    DXGI_FORMAT Format;
    uint SampleCount;
    D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS Flags;
    uint NumQualityLevels;
}

struct D3D12_FEATURE_DATA_FORMAT_INFO
{
    DXGI_FORMAT Format;
    ubyte PlaneCount;
}

struct D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
{
    uint MaxGPUVirtualAddressBitsPerResource;
    uint MaxGPUVirtualAddressBitsPerProcess;
}

struct D3D12_FEATURE_DATA_SHADER_CACHE
{
    D3D12_SHADER_CACHE_SUPPORT_FLAGS SupportFlags;
}

struct D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY
{
    D3D12_COMMAND_LIST_TYPE CommandListType;
    uint Priority;
    bool PriorityForTypeIsSupported;
}

struct D3D12_FEATURE_DATA_D3D12_OPTIONS3
{
    bool CopyQueueTimestampQueriesSupported;
    bool CastingFullyTypedFormatSupported;
    D3D12_COMMAND_LIST_SUPPORT_FLAGS WriteBufferImmediateSupportFlags;
    D3D12_VIEW_INSTANCING_TIER ViewInstancingTier;
    bool BarycentricsSupported;
}

struct D3D12_FEATURE_DATA_EXISTING_HEAPS
{
    bool Supported;
}

struct D3D12_RESOURCE_ALLOCATION_INFO
{
    ulong SizeInBytes;
    ulong Alignment;
}

struct D3D12_HEAP_PROPERTIES
{
    D3D12_HEAP_TYPE Type;
    D3D12_CPU_PAGE_PROPERTY CPUPageProperty;
    D3D12_MEMORY_POOL MemoryPoolPreference;
    uint CreationNodeMask;
    uint VisibleNodeMask;
}

struct D3D12_HEAP_DESC
{
    ulong SizeInBytes;
    D3D12_HEAP_PROPERTIES Properties;
    ulong Alignment;
    D3D12_HEAP_FLAGS Flags;
}

struct D3D12_RESOURCE_DESC
{
    D3D12_RESOURCE_DIMENSION Dimension;
    ulong Alignment;
    ulong Width;
    uint Height;
    ushort DepthOrArraySize;
    ushort MipLevels;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
    D3D12_TEXTURE_LAYOUT Layout;
    D3D12_RESOURCE_FLAGS Flags;
}

struct D3D12_DEPTH_STENCIL_VALUE
{
    float Depth;
    ubyte Stencil;
}

struct D3D12_CLEAR_VALUE
{
    DXGI_FORMAT Format;
    union 
{
        float[4] Color;
        D3D12_DEPTH_STENCIL_VALUE DepthStencil;
    }
}

struct D3D12_RANGE
{
    size_t Begin;
    size_t End;
}

struct D3D12_RANGE_UINT64
{
    ulong Begin;
    ulong End;
}

struct D3D12_SUBRESOURCE_RANGE_UINT64
{
    uint Subresource;
    D3D12_RANGE_UINT64 Range;
}

struct D3D12_SUBRESOURCE_INFO
{
    ulong Offset;
    uint RowPitch;
    uint DepthPitch;
}

struct D3D12_TILED_RESOURCE_COORDINATE
{
    uint X;
    uint Y;
    uint Z;
    uint Subresource;
}

struct D3D12_TILE_REGION_SIZE
{
    uint NumTiles;
    bool UseBox;
    uint Width;
    ushort Height;
    ushort Depth;
}

struct D3D12_SUBRESOURCE_TILING
{
    uint WidthInTiles;
    ushort HeightInTiles;
    ushort DepthInTiles;
    uint StartTileIndexInOverallResource;
}

struct D3D12_TILE_SHAPE
{
    uint WidthInTexels;
    uint HeightInTexels;
    uint DepthInTexels;
}

struct D3D12_PACKED_MIP_INFO
{
    ubyte NumStandardMips;
    ubyte NumPackedMips;
    uint NumTilesForPackedMips;
    uint StartTileIndexInOverallResource;
}

struct D3D12_RESOURCE_TRANSITION_BARRIER
{
    ID3D12Resource pResource;
    uint Subresource;
    D3D12_RESOURCE_STATES StateBefore;
    D3D12_RESOURCE_STATES StateAfter;
}

struct D3D12_RESOURCE_ALIASING_BARRIER
{
    ID3D12Resource pResourceBefore;
    ID3D12Resource pResourceAfter;
}

struct D3D12_RESOURCE_UAV_BARRIER
{
    ID3D12Resource pResource;
}

struct D3D12_RESOURCE_BARRIER
{
    D3D12_RESOURCE_BARRIER_TYPE Type;
    D3D12_RESOURCE_BARRIER_FLAGS Flags;
    union 
    {
        D3D12_RESOURCE_TRANSITION_BARRIER Transition;
        D3D12_RESOURCE_ALIASING_BARRIER Aliasing;
        D3D12_RESOURCE_UAV_BARRIER UAV;
    }
}

struct D3D12_SUBRESOURCE_FOOTPRINT
{
    DXGI_FORMAT Format;
    uint Width;
    uint Height;
    uint Depth;
    uint RowPitch;
}

struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT
{
    ulong Offset;
    D3D12_SUBRESOURCE_FOOTPRINT Footprint;
}

struct D3D12_TEXTURE_COPY_LOCATION
{
    ID3D12Resource pResource;
    D3D12_TEXTURE_COPY_TYPE Type;
    union 
    {
        D3D12_PLACED_SUBRESOURCE_FOOTPRINT PlacedFootprint;
        uint SubresourceIndex;
    }
}

struct D3D12_SAMPLE_POSITION
{
    byte X;
    byte Y;
}

struct D3D12_VIEW_INSTANCE_LOCATION
{
    uint ViewportArrayIndex;
    uint RenderTargetArrayIndex;
}

struct D3D12_VIEW_INSTANCING_DESC
{
    uint ViewInstanceCount;
    const D3D12_VIEW_INSTANCE_LOCATION *pViewInstanceLocations;
    D3D12_VIEW_INSTANCING_FLAGS Flags;
}

struct D3D12_BUFFER_SRV
{
    ulong FirstElement;
    uint NumElements;
    uint StructureByteStride;
    D3D12_BUFFER_SRV_FLAGS Flags;
}

struct D3D12_TEX1D_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
    float ResourceMinLODClamp;
}

struct D3D12_TEX1D_ARRAY_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
    uint FirstArraySlice;
    uint ArraySize;
    float ResourceMinLODClamp;
}

struct D3D12_TEX2D_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
    uint PlaneSlice;
    float ResourceMinLODClamp;
}

struct D3D12_TEX2D_ARRAY_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
    uint FirstArraySlice;
    uint ArraySize;
    uint PlaneSlice;
    float ResourceMinLODClamp;
}

struct D3D12_TEX3D_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
    float ResourceMinLODClamp;
}

struct D3D12_TEXCUBE_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
    float ResourceMinLODClamp;
}

struct D3D12_TEXCUBE_ARRAY_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
    uint First2DArrayFace;
    uint NumCubes;
    float ResourceMinLODClamp;
}

struct D3D12_TEX2DMS_SRV
{
    uint UnusedField_NothingToDefine;
}

struct D3D12_TEX2DMS_ARRAY_SRV
{
    uint FirstArraySlice;
    uint ArraySize;
}

struct D3D12_SHADER_RESOURCE_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D12_SRV_DIMENSION ViewDimension;
    uint Shader4ComponentMapping;
    union 
    {
        D3D12_BUFFER_SRV Buffer;
        D3D12_TEX1D_SRV Texture1D;
        D3D12_TEX1D_ARRAY_SRV Texture1DArray;
        D3D12_TEX2D_SRV Texture2D;
        D3D12_TEX2D_ARRAY_SRV Texture2DArray;
        D3D12_TEX2DMS_SRV Texture2DMS;
        D3D12_TEX2DMS_ARRAY_SRV Texture2DMSArray;
        D3D12_TEX3D_SRV Texture3D;
        D3D12_TEXCUBE_SRV TextureCube;
        D3D12_TEXCUBE_ARRAY_SRV TextureCubeArray;
    }
}

struct D3D12_CONSTANT_BUFFER_VIEW_DESC
{
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    uint SizeInBytes;
}

struct D3D12_SAMPLER_DESC
{
    D3D12_FILTER Filter;
    D3D12_TEXTURE_ADDRESS_MODE AddressU;
    D3D12_TEXTURE_ADDRESS_MODE AddressV;
    D3D12_TEXTURE_ADDRESS_MODE AddressW;
    float MipLODBias;
    uint MaxAnisotropy;
    D3D12_COMPARISON_FUNC ComparisonFunc;
    float[4] BorderColor;
    float MinLOD;
    float MaxLOD;
}

struct D3D12_BUFFER_UAV
{
    ulong FirstElement;
    uint NumElements;
    uint StructureByteStride;
    ulong CounterOffsetInBytes;
    D3D12_BUFFER_UAV_FLAGS Flags;
}

struct D3D12_TEX1D_UAV
{
    uint MipSlice;
}

struct D3D12_TEX1D_ARRAY_UAV
{
    uint MipSlice;
    uint FirstArraySlice;
    uint ArraySize;
}

struct D3D12_TEX2D_UAV
{
    uint MipSlice;
    uint PlaneSlice;
}

struct D3D12_TEX2D_ARRAY_UAV
{
    uint MipSlice;
    uint FirstArraySlice;
    uint ArraySize;
    uint PlaneSlice;
}

struct D3D12_TEX3D_UAV
{
    uint MipSlice;
    uint FirstWSlice;
    uint WSize;
}

struct D3D12_UNORDERED_ACCESS_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D12_UAV_DIMENSION ViewDimension;
    union 
    {
        D3D12_BUFFER_UAV Buffer;
        D3D12_TEX1D_UAV Texture1D;
        D3D12_TEX1D_ARRAY_UAV Texture1DArray;
        D3D12_TEX2D_UAV Texture2D;
        D3D12_TEX2D_ARRAY_UAV Texture2DArray;
        D3D12_TEX3D_UAV Texture3D;
    }
}

struct D3D12_BUFFER_RTV
{
    ulong FirstElement;
    uint NumElements;
}

struct D3D12_TEX1D_RTV
{
    uint MipSlice;
}

struct D3D12_TEX1D_ARRAY_RTV
{
    uint MipSlice;
    uint FirstArraySlice;
    uint ArraySize;
}

struct D3D12_TEX2D_RTV
{
    uint MipSlice;
    uint PlaneSlice;
}

struct D3D12_TEX2DMS_RTV
{
    uint UnusedField_NothingToDefine;
}

struct D3D12_TEX2D_ARRAY_RTV
{
    uint MipSlice;
    uint FirstArraySlice;
    uint ArraySize;
    uint PlaneSlice;
}

struct D3D12_TEX2DMS_ARRAY_RTV
{
    uint FirstArraySlice;
    uint ArraySize;
}

struct D3D12_TEX3D_RTV
{
    uint MipSlice;
    uint FirstWSlice;
    uint WSize;
}

struct D3D12_RENDER_TARGET_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D12_RTV_DIMENSION ViewDimension;
    union 
    {
        D3D12_BUFFER_RTV Buffer;
        D3D12_TEX1D_RTV Texture1D;
        D3D12_TEX1D_ARRAY_RTV Texture1DArray;
        D3D12_TEX2D_RTV Texture2D;
        D3D12_TEX2D_ARRAY_RTV Texture2DArray;
        D3D12_TEX2DMS_RTV Texture2DMS;
        D3D12_TEX2DMS_ARRAY_RTV Texture2DMSArray;
        D3D12_TEX3D_RTV Texture3D;
    }
}

struct D3D12_TEX1D_DSV
{
    uint MipSlice;
}

struct D3D12_TEX1D_ARRAY_DSV
{
    uint MipSlice;
    uint FirstArraySlice;
    uint ArraySize;
}

struct D3D12_TEX2D_DSV
{
    uint MipSlice;
}

struct D3D12_TEX2D_ARRAY_DSV
{
    uint MipSlice;
    uint FirstArraySlice;
    uint ArraySize;
}

struct D3D12_TEX2DMS_DSV
{
    uint UnusedField_NothingToDefine;
}

struct D3D12_TEX2DMS_ARRAY_DSV
{
    uint FirstArraySlice;
    uint ArraySize;
}

struct D3D12_DEPTH_STENCIL_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D12_DSV_DIMENSION ViewDimension;
    D3D12_DSV_FLAGS Flags;
    union 
    {
        D3D12_TEX1D_DSV Texture1D;
        D3D12_TEX1D_ARRAY_DSV Texture1DArray;
        D3D12_TEX2D_DSV Texture2D;
        D3D12_TEX2D_ARRAY_DSV Texture2DArray;
        D3D12_TEX2DMS_DSV Texture2DMS;
        D3D12_TEX2DMS_ARRAY_DSV Texture2DMSArray;
    }
}

struct D3D12_DESCRIPTOR_HEAP_DESC
{
    D3D12_DESCRIPTOR_HEAP_TYPE Type;
    uint NumDescriptors;
    D3D12_DESCRIPTOR_HEAP_FLAGS Flags;
    uint NodeMask;
}

struct D3D12_DESCRIPTOR_RANGE
{
    D3D12_DESCRIPTOR_RANGE_TYPE RangeType;
    uint NumDescriptors;
    uint BaseShaderRegister;
    uint RegisterSpace;
    uint OffsetInDescriptorsFromTableStart;
}

struct D3D12_ROOT_DESCRIPTOR_TABLE
{
    uint NumDescriptorRanges;
    const D3D12_DESCRIPTOR_RANGE *pDescriptorRanges;
}

struct D3D12_ROOT_CONSTANTS
{
    uint ShaderRegister;
    uint RegisterSpace;
    uint Num32BitValues;
}

struct D3D12_ROOT_DESCRIPTOR
{
    uint ShaderRegister;
    uint RegisterSpace;
}

struct D3D12_ROOT_PARAMETER
{
    D3D12_ROOT_PARAMETER_TYPE ParameterType;
    union 
    {
        D3D12_ROOT_DESCRIPTOR_TABLE DescriptorTable;
        D3D12_ROOT_CONSTANTS Constants;
        D3D12_ROOT_DESCRIPTOR Descriptor;
    }
    D3D12_SHADER_VISIBILITY ShaderVisibility;
}

struct D3D12_STATIC_SAMPLER_DESC
{
    D3D12_FILTER Filter;
    D3D12_TEXTURE_ADDRESS_MODE AddressU;
    D3D12_TEXTURE_ADDRESS_MODE AddressV;
    D3D12_TEXTURE_ADDRESS_MODE AddressW;
    float MipLODBias;
    uint MaxAnisotropy;
    D3D12_COMPARISON_FUNC ComparisonFunc;
    D3D12_STATIC_BORDER_COLOR BorderColor;
    float MinLOD;
    float MaxLOD;
    uint ShaderRegister;
    uint RegisterSpace;
    D3D12_SHADER_VISIBILITY ShaderVisibility;
}

struct D3D12_ROOT_SIGNATURE_DESC
{
    uint NumParameters;
    const D3D12_ROOT_PARAMETER *pParameters;
    uint NumStaticSamplers;
    const D3D12_STATIC_SAMPLER_DESC *pStaticSamplers;
    D3D12_ROOT_SIGNATURE_FLAGS Flags;
}

struct D3D12_DESCRIPTOR_RANGE1
{
    D3D12_DESCRIPTOR_RANGE_TYPE RangeType;
    uint NumDescriptors;
    uint BaseShaderRegister;
    uint RegisterSpace;
    D3D12_DESCRIPTOR_RANGE_FLAGS Flags;
    uint OffsetInDescriptorsFromTableStart;
}

struct D3D12_ROOT_DESCRIPTOR_TABLE1
{
    uint NumDescriptorRanges;
    const D3D12_DESCRIPTOR_RANGE1 *pDescriptorRanges;
}

struct D3D12_ROOT_DESCRIPTOR1
{
    uint ShaderRegister;
    uint RegisterSpace;
    D3D12_ROOT_DESCRIPTOR_FLAGS Flags;
}

struct D3D12_ROOT_PARAMETER1
{
    D3D12_ROOT_PARAMETER_TYPE ParameterType;
    union 
    {
        D3D12_ROOT_DESCRIPTOR_TABLE1 DescriptorTable;
        D3D12_ROOT_CONSTANTS Constants;
        D3D12_ROOT_DESCRIPTOR1 Descriptor;
    }
    D3D12_SHADER_VISIBILITY ShaderVisibility;
}

struct D3D12_ROOT_SIGNATURE_DESC1
{
    uint NumParameters;
    const D3D12_ROOT_PARAMETER1 *pParameters;
    uint NumStaticSamplers;
    const D3D12_STATIC_SAMPLER_DESC *pStaticSamplers;
    D3D12_ROOT_SIGNATURE_FLAGS Flags;
}

struct D3D12_VERSIONED_ROOT_SIGNATURE_DESC
{
    D3D_ROOT_SIGNATURE_VERSION Version;
    union 
    {
        D3D12_ROOT_SIGNATURE_DESC Desc_1_0;
        D3D12_ROOT_SIGNATURE_DESC1 Desc_1_1;
    }
}

struct D3D12_CPU_DESCRIPTOR_HANDLE
{
    size_t ptr;
}

struct D3D12_GPU_DESCRIPTOR_HANDLE
{
    ulong ptr;
}

struct D3D12_DISCARD_REGION
{
    uint NumRects;
    const D3D12_RECT *pRects;
    uint FirstSubresource;
    uint NumSubresources;
}

struct D3D12_QUERY_HEAP_DESC
{
    D3D12_QUERY_HEAP_TYPE Type;
    uint Count;
    uint NodeMask;
}

struct D3D12_QUERY_DATA_PIPELINE_STATISTICS
{
    ulong IAVertices;
    ulong IAPrimitives;
    ulong VSInvocations;
    ulong GSInvocations;
    ulong GSPrimitives;
    ulong CInvocations;
    ulong CPrimitives;
    ulong PSInvocations;
    ulong HSInvocations;
    ulong DSInvocations;
    ulong CSInvocations;
}

struct D3D12_QUERY_DATA_SO_STATISTICS
{
    ulong NumPrimitivesWritten;
    ulong PrimitivesStorageNeeded;
}

struct D3D12_STREAM_OUTPUT_BUFFER_VIEW
{
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    ulong SizeInBytes;
    D3D12_GPU_VIRTUAL_ADDRESS BufferFilledSizeLocation;
}

struct D3D12_DRAW_ARGUMENTS
{
    uint VertexCountPerInstance;
    uint InstanceCount;
    uint StartVertexLocation;
    uint StartInstanceLocation;
}

struct D3D12_DRAW_INDEXED_ARGUMENTS
{
    uint IndexCountPerInstance;
    uint InstanceCount;
    uint StartIndexLocation;
    int BaseVertexLocation;
    uint StartInstanceLocation;
}

struct D3D12_DISPATCH_ARGUMENTS
{
    uint ThreadGroupCountX;
    uint ThreadGroupCountY;
    uint ThreadGroupCountZ;
}

struct D3D12_VERTEX_BUFFER_VIEW
{
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    uint SizeInBytes;
    uint StrideInBytes;
}

struct D3D12_INDEX_BUFFER_VIEW
{
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    uint SizeInBytes;
    DXGI_FORMAT Format;
}

struct D3D12_INDIRECT_ARGUMENT_DESC
{
    D3D12_INDIRECT_ARGUMENT_TYPE Type;
    union 
    {
        struct VertexBuffer
        {
            uint Slot;
        };
        struct Constant 
        {
            uint RootParameterIndex;
            uint DestOffsetIn32BitValues;
            uint Num32BitValuesToSet;
        };
        struct ConstantBufferView
        {
            uint RootParameterIndex;
        };
        struct ShaderResourceView
        {
            uint RootParameterIndex;
        };
        struct UnorderedAccessView
        {
            uint RootParameterIndex;
        };
    };
}

struct D3D12_COMMAND_SIGNATURE_DESC
{
    uint ByteStride;
    uint NumArgumentDescs;
    const D3D12_INDIRECT_ARGUMENT_DESC *pArgumentDescs;
    uint NodeMask;
}

struct D3D12_WRITEBUFFERIMMEDIATE_PARAMETER
{
    D3D12_GPU_VIRTUAL_ADDRESS Dest;
    uint Value;
}
struct D3D12_SUBRESOURCE_DATA
{
    const void *pData;
    LONG_PTR RowPitch;
    LONG_PTR SlicePitch;
}

struct D3D12_MEMCPY_DEST
{
    void *pData;
    size_t RowPitch;
    size_t SlicePitch;
}

struct D3D12_RESOURCE_ALLOCATION_INFO1
{
    ulong Offset;
    ulong Alignment;
    ulong SizeInBytes;
}

///
/// Interfaces
///

mixin(uuid!(ID3D12Object, "c4fec28f-7966-4e95-9f94-f431cb56c3b8"));
public interface ID3D12Object : IUnknown
{
extern(Windows):
	HRESULT GetPrivateData(REFGUID guid, uint *pDataSize, void *pData);
    HRESULT SetName(const wchar *Name);
    HRESULT SetPrivateData(REFGUID guid, uint DataSize, const void *pData);
    HRESULT SetPrivateDataInterface(REFGUID guid, const IUnknown *pData);
}

mixin(uuid!(ID3D12DeviceChild, "905db94b-a00c-4140-9df5-2b64ca9ea357"));
public interface ID3D12DeviceChild : ID3D12Object
{
extern(Windows):
	HRESULT GetDevice(REFIID riid, void **ppvDevice);
}

mixin(uuid!(ID3D12RootSignature, "c54a6b66-72df-4ee8-8be5-a946a1429214"));
public interface ID3D12RootSignature : ID3D12DeviceChild
{
extern(Windows):
}

mixin(uuid!(ID3D12RootSignatureDeserializer, "34AB647B-3CC8-46AC-841B-C0965645C046"));
public interface ID3D12RootSignatureDeserializer : IUnknown
{
extern(Windows):
    D3D12_ROOT_SIGNATURE_DESC* GetRootSignatureDesc();
}

mixin(uuid!(ID3D12VersionedRootSignatureDeserializer, "7F91CE67-090C-4BB7-B78E-ED8FF2E31DA0"));
public interface ID3D12VersionedRootSignatureDeserializer : IUnknown
{
extern(Windows):
    HRESULT GetRootSignatureDescAtVersion(D3D_ROOT_SIGNATURE_VERSION convertToVersion, const D3D12_VERSIONED_ROOT_SIGNATURE_DESC **ppDesc);
    const D3D12_VERSIONED_ROOT_SIGNATURE_DESC* GetUnconvertedRootSignatureDesc();
}

mixin(uuid!(ID3D12Pageable, "63ee58fb-1268-4835-86da-f008ce62f0d6"));
public interface ID3D12Pageable : ID3D12DeviceChild
{
extern(Windows):
}

mixin(uuid!(ID3D12Heap, "6b3b2502-6e51-45b3-90ee-9884265e8df3"));
public interface ID3D12Heap : ID3D12Pageable
{
extern(Windows):
    D3D12_HEAP_DESC GetDesc();
}

mixin(uuid!(ID3D12Resource, "696442be-a72e-4059-bc79-5b5c98040fad"));
public interface ID3D12Resource : ID3D12Pageable
{
extern(Windows):
    HRESULT Map(uint Subresource, const D3D12_RANGE *pReadRange, void **ppData);
    void Unmap(uint Subresource, const D3D12_RANGE *pWrittenRange);
    D3D12_RESOURCE_DESC GetDesc();
    D3D12_GPU_VIRTUAL_ADDRESS GetGPUVirtualAddress();
    HRESULT WriteToSubresource(uint DstSubresource, const D3D12_BOX *pDstBox, const void *pSrcData, uint SrcRowPitch, uint SrcDepthPitch);
    HRESULT ReadFromSubresource(void *pDstData, uint DstRowPitch, uint DstDepthPitch, uint SrcSubresource, const D3D12_BOX *pSrcBox);
    HRESULT GetHeapProperties(D3D12_HEAP_PROPERTIES *pHeapProperties, D3D12_HEAP_FLAGS *pHeapFlags);
}

mixin(uuid!(ID3D12CommandAllocator, "6102dee4-af59-4b09-b999-b44d73f09b24"));
public interface ID3D12CommandAllocator : ID3D12Pageable
{
extern(Windows):
    HRESULT Reset();
}

mixin(uuid!(ID3D12Fence, "0a753dcf-c4d8-4b91-adf6-be5a60d95a76"));
public interface ID3D12Fence : ID3D12Pageable
{
extern(Windows):
    ulong GetCompletedValue();
    HRESULT SetEventOnCompletion(ulong Value, HANDLE hEvent);
    HRESULT Signal(ulong Value);
}

mixin(uuid!(ID3D12Fence1, "433685fe-e22b-4ca0-a8db-b5b4f4dd0e4a"));
public interface ID3D12Fence1 : ID3D12Fence
{
extern(Windows):
    D3D12_FENCE_FLAGS GetCreationFlags();
}

mixin(uuid!(ID3D12PipelineState, "765a30f3-f624-4c6f-a828-ace948622445"));
public interface ID3D12PipelineState : ID3D12Pageable
{
extern(Windows):
    HRESULT GetCachedBlob(ID3DBlob *ppBlob);
}

mixin(uuid!(ID3D12DescriptorHeap, "8efb471d-616c-4f49-90f7-127bb763fa51"));
public interface ID3D12DescriptorHeap : ID3D12Pageable
{
extern(Windows):
    D3D12_DESCRIPTOR_HEAP_DESC GetDesc();
    D3D12_CPU_DESCRIPTOR_HANDLE GetCPUDescriptorHandleForHeapStart();
    D3D12_GPU_DESCRIPTOR_HANDLE GetGPUDescriptorHandleForHeapStart();
}

mixin(uuid!(ID3D12QueryHeap, "0d9658ae-ed45-469e-a61d-970ec583cab4"));
public interface ID3D12QueryHeap : ID3D12Pageable
{
extern(Windows):
}

mixin(uuid!(ID3D12CommandSignature, "c36a797c-ec80-4f0a-8985-a7b2475082d1"));
public interface ID3D12CommandSignature : ID3D12Pageable
{
extern(Windows):
}

mixin(uuid!(ID3D12CommandList, "7116d91c-e7e4-47ce-b8c6-ec8168f437e5"));
public interface ID3D12CommandList : ID3D12DeviceChild
{
extern(Windows):
    D3D12_COMMAND_LIST_TYPE GetType();
}

mixin(uuid!(ID3D12GraphicsCommandList, "5b160d0f-ac1b-4185-8ba8-b3ae42a5a455"));
public interface ID3D12GraphicsCommandList : ID3D12CommandList
{
extern(Windows):
    HRESULT Close();
    HRESULT Reset(ID3D12CommandAllocator pAllocator, ID3D12PipelineState pInitialState);
    void ClearState(ID3D12PipelineState pPipelineState);
    void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation);
    void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation);
    void Dispatch(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ);
    void CopyBufferRegion(ID3D12Resource pDstBuffer, ulong DstOffset, ID3D12Resource pSrcBuffer, ulong SrcOffset, ulong NumBytes);
    void CopyTextureRegion(const D3D12_TEXTURE_COPY_LOCATION *pDst, uint DstX, uint DstY, uint DstZ, const D3D12_TEXTURE_COPY_LOCATION *pSrc, const D3D12_BOX *pSrcBox);
    void CopyResource(ID3D12Resource pDstResource, ID3D12Resource pSrcResource);
    void CopyTiles(ID3D12Resource pTiledResource, const D3D12_TILED_RESOURCE_COORDINATE *pTileRegionStartCoordinate, const D3D12_TILE_REGION_SIZE *pTileRegionSize, ID3D12Resource pBuffer, ulong BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags);
    void ResolveSubresource(ID3D12Resource pDstResource, uint DstSubresource, ID3D12Resource pSrcResource, uint SrcSubresource, DXGI_FORMAT Format);
    void IASetPrimitiveTopology(D3D12_PRIMITIVE_TOPOLOGY PrimitiveTopology);
    void RSSetViewports(uint NumViewports, const D3D12_VIEWPORT *pViewports);
    void RSSetScissorRects(uint NumRects, const D3D12_RECT *pRects);
    void OMSetBlendFactor(const float[4] BlendFactor);
    void OMSetStencilRef(uint StencilRef);
    void SetPipelineState(ID3D12PipelineState pPipelineState);
    void ResourceBarrier(uint NumBarriers, const D3D12_RESOURCE_BARRIER *pBarriers);
    void ExecuteBundle(ID3D12GraphicsCommandList pCommandList);
    void SetDescriptorHeaps(uint NumDescriptorHeaps, const(ID3D12DescriptorHeap) *ppDescriptorHeaps);
    void SetComputeRootSignature(ID3D12RootSignature pRootSignature);
    void SetGraphicsRootSignature(ID3D12RootSignature pRootSignature);
    void SetComputeRootDescriptorTable(uint RootParameterIndex, D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);
    void SetGraphicsRootDescriptorTable(uint RootParameterIndex, D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);
    void SetComputeRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues);
    void SetGraphicsRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues);
    void SetComputeRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, const void *pSrcData, uint DestOffsetIn32BitValues);
    void SetGraphicsRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, const void *pSrcData, uint DestOffsetIn32BitValues);
    void SetComputeRootConstantBufferView(uint RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);
    void SetGraphicsRootConstantBufferView(uint RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);
    void SetComputeRootShaderResourceView(uint RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);
    void SetGraphicsRootShaderResourceView(uint RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);
    void SetComputeRootUnorderedAccessView(uint RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);
    void SetGraphicsRootUnorderedAccessView(uint RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);
    void IASetIndexBuffer(const D3D12_INDEX_BUFFER_VIEW *pView);
    void IASetVertexBuffers(uint StartSlot, uint NumViews, const D3D12_VERTEX_BUFFER_VIEW *pViews);
    void SOSetTargets(uint StartSlot, uint NumViews, const D3D12_STREAM_OUTPUT_BUFFER_VIEW *pViews);
    void OMSetRenderTargets(uint NumRenderTargetDescriptors, const D3D12_CPU_DESCRIPTOR_HANDLE *pRenderTargetDescriptors, bool RTsSingleHandleToDescriptorRange, const D3D12_CPU_DESCRIPTOR_HANDLE *pDepthStencilDescriptor);
    void ClearDepthStencilView(D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, D3D12_CLEAR_FLAGS ClearFlags, float Depth, ubyte Stencil, uint NumRects, const D3D12_RECT *pRects);
    void ClearRenderTargetView(D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, const float[4] ColorRGBA, uint NumRects, const D3D12_RECT *pRects);
    void ClearUnorderedAccessViewUint(D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource pResource, const uint[4] Values, uint NumRects, const D3D12_RECT *pRects);
    void ClearUnorderedAccessViewFloat(D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource pResource, const float[4] Values, uint NumRects, const D3D12_RECT *pRects);
    void DiscardResource(ID3D12Resource pResource, const D3D12_DISCARD_REGION *pRegion);
    void BeginQuery(ID3D12QueryHeap pQueryHeap, D3D12_QUERY_TYPE Type, uint Index);
    void EndQuery(ID3D12QueryHeap pQueryHeap, D3D12_QUERY_TYPE Type, uint Index);
    void ResolveQueryData(ID3D12QueryHeap pQueryHeap, D3D12_QUERY_TYPE Type, uint StartIndex, uint NumQueries, ID3D12Resource pDestinationBuffer, ulong AlignedDestinationBufferOffset);
    void SetPredication(ID3D12Resource pBuffer, ulong AlignedBufferOffset, D3D12_PREDICATION_OP Operation);
    void SetMarker(uint Metadata, const void *pData, uint Size);
    void BeginEvent(uint Metadata, const void *pData, uint Size);
    void EndEvent();
    void ExecuteIndirect(ID3D12CommandSignature pCommandSignature, uint MaxCommandCount, ID3D12Resource pArgumentBuffer, ulong ArgumentBufferOffset, ID3D12Resource pCountBuffer, ulong CountBufferOffset);
}

mixin(uuid!(ID3D12GraphicsCommandList1, "553103fb-1fe7-4557-bb38-946d7d0e7ca7"));
public interface ID3D12GraphicsCommandList1 : ID3D12GraphicsCommandList
{
extern(Windows):
    void AtomicCopyBufferUINT(ID3D12Resource pDstBuffer, ulong DstOffset, ID3D12Resource pSrcBuffer, ulong SrcOffset, uint Dependencies, const(ID3D12Resource) *ppDependentResources, const D3D12_SUBRESOURCE_RANGE_UINT64 *pDependentSubresourceRanges);
    void AtomicCopyBufferUINT64(ID3D12Resource pDstBuffer, ulong DstOffset, ID3D12Resource pSrcBuffer, ulong SrcOffset, uint Dependencies, const(ID3D12Resource) *ppDependentResources, const D3D12_SUBRESOURCE_RANGE_UINT64 *pDependentSubresourceRanges);
    void OMSetDepthBounds(float Min, float Max);
    void SetSamplePositions(uint NumSamplesPerPixel, uint NumPixels, D3D12_SAMPLE_POSITION *pSamplePositions);
    void ResolveSubresourceRegion(ID3D12Resource pDstResource, uint DstSubresource, uint DstX, uint DstY, ID3D12Resource pSrcResource, uint SrcSubresource, D3D12_RECT *pSrcRect, DXGI_FORMAT Format, D3D12_RESOLVE_MODE ResolveMode);
    void SetViewInstanceMask(uint Mask);
}

mixin(uuid!(ID3D12GraphicsCommandList2, "38C3E585-FF17-412C-9150-4FC6F9D72A28"));
public interface ID3D12GraphicsCommandList2 : ID3D12GraphicsCommandList1
{
extern(Windows):
    void WriteBufferImmediate(uint Count, const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *pParams, const D3D12_WRITEBUFFERIMMEDIATE_MODE *pModes);
}

mixin(uuid!(ID3D12CommandQueue, "0ec870a6-5d7e-4c22-8cfc-5baae07616ed"));
public interface ID3D12CommandQueue : ID3D12Pageable
{
extern(Windows):
        void UpdateTileMappings(ID3D12Resource pResource, uint NumResourceRegions, const D3D12_TILED_RESOURCE_COORDINATE *pResourceRegionStartCoordinates, const D3D12_TILE_REGION_SIZE *pResourceRegionSizes, ID3D12Heap pHeap, uint NumRanges, const D3D12_TILE_RANGE_FLAGS *pRangeFlags, const uint *pHeapRangeStartOffsets, const uint *pRangeTileCounts, D3D12_TILE_MAPPING_FLAGS Flags);
        void CopyTileMappings(ID3D12Resource pDstResource, const D3D12_TILED_RESOURCE_COORDINATE *pDstRegionStartCoordinate, ID3D12Resource pSrcResource, const D3D12_TILED_RESOURCE_COORDINATE *pSrcRegionStartCoordinate, const D3D12_TILE_REGION_SIZE *pRegionSize, D3D12_TILE_MAPPING_FLAGS Flags);
        void ExecuteCommandLists(uint NumCommandLists, const(ID3D12CommandList) *ppCommandLists);
        void SetMarker( uint Metadata, const void *pData, uint Size);
        void BeginEvent(uint Metadata, const void *pData, uint Size);
        void EndEvent();
        HRESULT Signal(ID3D12Fence pFence, ulong Value);
        HRESULT Wait(ID3D12Fence pFence, ulong Value);
        HRESULT GetTimestampFrequency(ulong *pFrequency);
        HRESULT GetClockCalibration(ulong *pGpuTimestamp, ulong *pCpuTimestamp);
        D3D12_COMMAND_QUEUE_DESC GetDesc();
}

mixin(uuid!(ID3D12Device, "189819f1-1db6-4b57-be54-1821339b85f7"));
public interface ID3D12Device : ID3D12Object
{
extern(Windows):
    uint GetNodeCount();
    HRESULT CreateCommandQueue(const D3D12_COMMAND_QUEUE_DESC *pDesc, REFIID riid, void **ppCommandQueue);
    HRESULT CreateCommandAllocator(D3D12_COMMAND_LIST_TYPE type, REFIID riid, void **ppCommandAllocator);
    HRESULT CreateGraphicsPipelineState(const D3D12_GRAPHICS_PIPELINE_STATE_DESC *pDesc, REFIID riid, void **ppPipelineState);
    HRESULT CreateComputePipelineState(const D3D12_COMPUTE_PIPELINE_STATE_DESC *pDesc, REFIID riid, void **ppPipelineState);
    HRESULT CreateCommandList(uint nodeMask, D3D12_COMMAND_LIST_TYPE type, ID3D12CommandAllocator pCommandAllocator, ID3D12PipelineState pInitialState, REFIID riid, void **ppCommandList);
    HRESULT CheckFeatureSupport(D3D12_FEATURE Feature, void *pFeatureSupportData, uint FeatureSupportDataSize);
    HRESULT CreateDescriptorHeap(const D3D12_DESCRIPTOR_HEAP_DESC *pDescriptorHeapDesc, REFIID riid, void **ppvHeap);
    uint GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType);
    HRESULT CreateRootSignature(uint nodeMask, const void *pBlobWithRootSignature, size_t blobLengthInBytes, REFIID riid, void **ppvRootSignature);
    void CreateConstantBufferView(const D3D12_CONSTANT_BUFFER_VIEW_DESC *pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);
    void CreateShaderResourceView(ID3D12Resource pResource, const D3D12_SHADER_RESOURCE_VIEW_DESC *pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);
    void CreateUnorderedAccessView(ID3D12Resource pResource, ID3D12Resource pCounterResource, const D3D12_UNORDERED_ACCESS_VIEW_DESC *pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);
    void CreateRenderTargetView(ID3D12Resource pResource, const D3D12_RENDER_TARGET_VIEW_DESC *pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);
    void CreateDepthStencilView(ID3D12Resource pResource, const D3D12_DEPTH_STENCIL_VIEW_DESC *pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);
    void CreateSampler(const D3D12_SAMPLER_DESC *pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);
    void CopyDescriptors(uint NumDestDescriptorRanges, const D3D12_CPU_DESCRIPTOR_HANDLE *pDestDescriptorRangeStarts, const uint *pDestDescriptorRangeSizes, uint NumSrcDescriptorRanges, const D3D12_CPU_DESCRIPTOR_HANDLE *pSr, const uint *pSrcDescriptorRangeSizes, D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);
    void CopyDescriptorsSimple(uint NumDescriptors, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);
    D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo(uint visibleMask, uint numResourceDescs, const D3D12_RESOURCE_DESC *pResourceDescs);
    D3D12_HEAP_PROPERTIES GetCustomHeapProperties(uint nodeMask, D3D12_HEAP_TYPE heapType);
    HRESULT CreateCommittedResource(const D3D12_HEAP_PROPERTIES *pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, const D3D12_RESOURCE_DESC *pDesc, D3D12_RESOURCE_STATES InitialResourceState, const D3D12_CLEAR_VALUE *pOptimizedClearValue, REFIID riidResource, void **ppvResource);
    HRESULT CreateHeap(const D3D12_HEAP_DESC *pDesc, REFIID riid, void **ppvHeap);
    HRESULT CreatePlacedResource(ID3D12Heap pHeap, ulong HeapOffset, const D3D12_RESOURCE_DESC *pDesc, D3D12_RESOURCE_STATES InitialState, const D3D12_CLEAR_VALUE *pOptimizedClearValue, REFIID riid, void **ppvResource);
    HRESULT CreateReservedResource(const D3D12_RESOURCE_DESC *pDesc, D3D12_RESOURCE_STATES InitialState, const D3D12_CLEAR_VALUE *pOptimizedClearValue, REFIID riid, void **ppvResource);
    HRESULT CreateSharedHandle(ID3D12DeviceChild pObject, const SECURITY_ATTRIBUTES *pAttributes, uint Access, const wchar *Name, HANDLE *pHandle);
    HRESULT OpenSharedHandle(HANDLE NTHandle, REFIID riid, void **ppvObj);
    HRESULT OpenSharedHandleByName(const wchar *Name, uint Access, HANDLE *pNTHandle);
    HRESULT MakeResident( uint NumObjects, const(ID3D12Pageable) *ppObjects);
    HRESULT Evict(uint NumObjects, const(ID3D12Pageable) *ppObjects);
    HRESULT CreateFence(ulong InitialValue, D3D12_FENCE_FLAGS Flags, REFIID riid, void **ppFence);
    HRESULT GetDeviceRemovedReason();
    void GetCopyableFootprints(const D3D12_RESOURCE_DESC *pResourceDesc, uint FirstSubresource, uint NumSubresources, ulong BaseOffset, D3D12_PLACED_SUBRESOURCE_FOOTPRINT *pLayouts, uint *pNumRows, ulong *pRowSizeInBytes, ulong *pTotalBytes);
    HRESULT CreateQueryHeap(const D3D12_QUERY_HEAP_DESC *pDesc, REFIID riid, void **ppvHeap);
    HRESULT SetStablePowerState(bool Enable);
    HRESULT CreateCommandSignature(const D3D12_COMMAND_SIGNATURE_DESC *pDesc, ID3D12RootSignature pRootSignature, REFIID riid, void **ppvCommandSignature);
    void GetResourceTiling(ID3D12Resource pTiledResource, uint *pNumTilesForEntireResource, D3D12_PACKED_MIP_INFO *pPackedMipDesc, D3D12_TILE_SHAPE *pStandardTileShapeForNonPackedMips, uint *pNumSubresourceTilings, uint FirstSubresourceTilingToGet, D3D12_SUBRESOURCE_TILING *pSubresourceTilingsForNonPackedMips);
    LUID GetAdapterLuid();
}

mixin(uuid!(ID3D12PipelineLibrary, "c64226a8-9201-46af-b4cc-53fb9ff7414f"));
public interface ID3D12PipelineLibrary : ID3D12DeviceChild
{
extern(Windows):
    HRESULT StorePipeline(const wchar *pName, ID3D12PipelineState pPipeline);
    HRESULT LoadGraphicsPipeline(const wchar *pName, const D3D12_GRAPHICS_PIPELINE_STATE_DESC *pDesc, REFIID riid, void **ppPipelineState);
    HRESULT LoadComputePipeline(const wchar *pName, const D3D12_COMPUTE_PIPELINE_STATE_DESC *pDesc, REFIID riid, void **ppPipelineState);
    size_t GetSerializedSize();
    HRESULT Serialize(void *pData, size_t DataSizeInBytes);
}

mixin(uuid!(ID3D12PipelineLibrary1, "80eabf42-2568-4e5e-bd82-c37f86961dc3"));
public interface ID3D12PipelineLibrary1 : ID3D12PipelineLibrary
{
extern(Windows):
    HRESULT LoadPipeline(const wchar *Name, const D3D12_PIPELINE_STATE_STREAM_DESC *pDesc, REFIID riid, void **ppPipelineState);
}

mixin(uuid!(ID3D12Device1, "77acce80-638e-4e65-8895-c1f23386863e"));
public interface ID3D12Device1 : ID3D12Device
{
extern(Windows):
    HRESULT CreatePipelineLibrary(const void *pLibraryBlob, size_t BlobLength, REFIID riid, void **ppPipelineLibrary);
    HRESULT SetEventOnMultipleFenceCompletion(const(ID3D12Fence) *ppFences, const ulong *pFenceValues, uint NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, HANDLE hEvent);
    HRESULT SetResidencyPriority(uint NumObjects, const(ID3D12Pageable) *ppObjects, const D3D12_RESIDENCY_PRIORITY *pPriorities);
}

mixin(uuid!(ID3D12Device2, "30baa41e-b15b-475c-a0bb-1af5c5b64328"));
public interface ID3D12Device2 : ID3D12Device1
{
extern(Windows):
    HRESULT CreatePipelineState(const D3D12_PIPELINE_STATE_STREAM_DESC *pDesc, REFIID riid, void **ppPipelineState);
}

mixin(uuid!(ID3D12Device3, "81dadc15-2bad-4392-93c5-101345c4aa98"));
public interface ID3D12Device3 : ID3D12Device2
{
extern(Windows):
    HRESULT OpenExistingHeapFromAddress(const void *pAddress, REFIID riid, void **ppvHeap);
    HRESULT OpenExistingHeapFromFileMapping(HANDLE hFileMapping, REFIID riid, void **ppvHeap);
    HRESULT EnqueueMakeResident(D3D12_RESIDENCY_FLAGS Flags, uint NumObjects, const(ID3D12Pageable) *ppObjects, ID3D12Fence pFenceToSignal, ulong FenceValueToSignal);
}

mixin(uuid!(ID3D12Tools, "7071e1f0-e84b-4b33-974f-12fa49de65c5"));
public interface ID3D12Tools : IUnknown
{
extern(Windows):
    void EnableShaderInstrumentation(bool bEnable);
    bool ShaderInstrumentationEnabled();
}

enum D3D12_COMMAND_LIST_FLAGS
{
    D3D12_COMMAND_LIST_FLAG_NONE = 0
}

enum D3D12_COMMAND_POOL_FLAGS
{
    D3D12_COMMAND_POOL_FLAG_NONE = 0
}

enum D3D12_COMMAND_RECORDER_FLAGS
{
    D3D12_COMMAND_RECORDER_FLAG_NONE = 0
}

enum D3D12_PROTECTED_SESSION_STATUS
{
    D3D12_PROTECTED_SESSION_STATUS_OK = 0,
    D3D12_PROTECTED_SESSION_STATUS_INVALID = 1
}

enum D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS
{
    D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE = 0,
    D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED = 0x1
}

enum D3D12_PROTECTED_RESOURCE_SESSION_FLAGS
{
    D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE = 0
}

enum D3D12_LIFETIME_STATE
{
    D3D12_LIFETIME_STATE_IN_USE = 0,
    D3D12_LIFETIME_STATE_NOT_IN_USE = ( D3D12_LIFETIME_STATE_IN_USE + 1 ) 
}

enum D3D12_META_COMMAND_PARAMETER_TYPE
{
    D3D12_META_COMMAND_PARAMETER_TYPE_FLOAT = 0,
    D3D12_META_COMMAND_PARAMETER_TYPE_UINT64 = 1,
    D3D12_META_COMMAND_PARAMETER_TYPE_GPU_VIRTUAL_ADDRESS = 2,
    D3D12_META_COMMAND_PARAMETER_TYPE_CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 3,
    D3D12_META_COMMAND_PARAMETER_TYPE_GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 4
}

enum D3D12_META_COMMAND_PARAMETER_FLAGS
{
    D3D12_META_COMMAND_PARAMETER_FLAG_INPUT = 0x1,
    D3D12_META_COMMAND_PARAMETER_FLAG_OUTPUT = 0x2
}

enum D3D12_META_COMMAND_PARAMETER_STAGE
{
    D3D12_META_COMMAND_PARAMETER_STAGE_CREATION = 0,
    D3D12_META_COMMAND_PARAMETER_STAGE_INITIALIZATION = 1,
    D3D12_META_COMMAND_PARAMETER_STAGE_EXECUTION = 2
}

struct D3D12_META_COMMAND_PARAMETER_DESC
{
    const wchar *Name;
    D3D12_META_COMMAND_PARAMETER_TYPE Type;
    D3D12_META_COMMAND_PARAMETER_FLAGS Flags;
    D3D12_RESOURCE_STATES RequiredResourceState;
    uint StructureOffset;
}

enum D3D12_GRAPHICS_STATES
{
    D3D12_GRAPHICS_STATE_NONE = 0,
    D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS = ( 1 << 0 ) ,
    D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER = ( 1 << 1 ) ,
    D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY = ( 1 << 2 ) ,
    D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP = ( 1 << 3 ) ,
    D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE = ( 1 << 4 ) ,
    D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE = ( 1 << 5 ) ,
    D3D12_GRAPHICS_STATE_RS_VIEWPORTS = ( 1 << 6 ) ,
    D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS = ( 1 << 7 ) ,
    D3D12_GRAPHICS_STATE_PREDICATION = ( 1 << 8 ) ,
    D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS = ( 1 << 9 ) ,
    D3D12_GRAPHICS_STATE_OM_STENCIL_REF = ( 1 << 10 ) ,
    D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR = ( 1 << 11 ) ,
    D3D12_GRAPHICS_STATE_PIPELINE_STATE = ( 1 << 12 ) ,
    D3D12_GRAPHICS_STATE_SO_TARGETS = ( 1 << 13 ) ,
    D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS = ( 1 << 14 ) ,
    D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS = ( 1 << 15 ) ,
    D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK = ( 1 << 16 ) 
}

struct D3D12_META_COMMAND_DESC
{
    GUID Id;
    const wchar *Name;
    D3D12_GRAPHICS_STATES InitializationDirtyState;
    D3D12_GRAPHICS_STATES ExecutionDirtyState;
}


struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT
{
    uint NodeIndex;
    D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS Support;
}

struct D3D12_PROTECTED_RESOURCE_SESSION_DESC
{
    uint NodeMask;
    D3D12_PROTECTED_RESOURCE_SESSION_FLAGS Flags;
}

mixin(uuid!(ID3D12ProtectedSession, "A1533D18-0AC1-4084-85B9-89A96116806B"));
public interface ID3D12ProtectedSession : ID3D12DeviceChild
{
extern(Windows):
    HRESULT GetStatusFence(REFIID riid, void **ppFence);
    D3D12_PROTECTED_SESSION_STATUS GetSessionStatus();
}

mixin(uuid!(ID3D12ProtectedResourceSession, "6CD696F4-F289-40CC-8091-5A6C0A099C3D"));
public interface ID3D12ProtectedResourceSession : ID3D12ProtectedSession
{
extern(Windows):
    D3D12_PROTECTED_RESOURCE_SESSION_DESC GetDesc();
}

mixin(uuid!(ID3D12Device4, "e865df17-a9ee-46f9-a463-3098315aa2e5"));
public interface ID3D12Device4 : ID3D12Device3
{
extern(Windows):
    HRESULT CreateCommandList1(uint nodeMask, D3D12_COMMAND_LIST_TYPE type, D3D12_COMMAND_LIST_FLAGS flags, REFIID riid, void **ppCommandList);
    HRESULT CreateProtectedResourceSession(const D3D12_PROTECTED_RESOURCE_SESSION_DESC *pDesc, REFIID riid, void **ppSession);
    HRESULT CreateCommittedResource1(const D3D12_HEAP_PROPERTIES *pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, const D3D12_RESOURCE_DESC *pDesc, D3D12_RESOURCE_STATES InitialResourceState, const D3D12_CLEAR_VALUE *pOptimizedClearValue, ID3D12ProtectedResourceSession pProtectedSession, REFIID riidResource, void **ppvResource);
    HRESULT CreateHeap1(const D3D12_HEAP_DESC *pDesc, ID3D12ProtectedResourceSession pProtectedSession, REFIID riid, void **ppvHeap);
    HRESULT CreateReservedResource1(const D3D12_RESOURCE_DESC *pDesc, D3D12_RESOURCE_STATES InitialState, const D3D12_CLEAR_VALUE *pOptimizedClearValue, ID3D12ProtectedResourceSession pProtectedSession, REFIID riid, void **ppvResource);
    D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo1(uint visibleMask, uint numResourceDescs, const D3D12_RESOURCE_DESC *pResourceDescs, D3D12_RESOURCE_ALLOCATION_INFO1 *pResourceAllocationInfo1);
}

mixin(uuid!(ID3D12LifetimeOwner, "e667af9f-cd56-4f46-83ce-032e595d70a8"));
public interface ID3D12LifetimeOwner : IUnknown
{
extern(Windows):
    void LifetimeStateUpdated(D3D12_LIFETIME_STATE NewState);
}

mixin(uuid!(ID3D12SwapChainAssistant, "f1df64b6-57fd-49cd-8807-c0eb88b45c8f"));
public interface ID3D12SwapChainAssistant : IUnknown
{
extern(Windows):
    LUID GetLUID();
    HRESULT GetSwapChainObject(REFIID riid, void **ppv);
    HRESULT GetCurrentResourceAndCommandQueue(REFIID riidResource, void **ppvResource, REFIID riidQueue, void **ppvQueue);
    HRESULT InsertImplicitSync();
}

mixin(uuid!(ID3D12LifetimeTracker, "3fd03d36-4eb1-424a-a582-494ecb8ba813"));
public interface ID3D12LifetimeTracker : ID3D12DeviceChild
{
extern(Windows):
    HRESULT DestroyOwnedObject(ID3D12DeviceChild pObject);
}

mixin(uuid!(ID3D12StateObject, "47016943-fca8-4594-93ea-af258b55346d"));
public interface ID3D12StateObject : ID3D12Pageable
{
extern(Windows):
}

mixin(uuid!(ID3D12StateObjectProperties, "de5fa827-9bf9-4f26-89ff-d7f56fde3860"));
public interface ID3D12StateObjectProperties : IUnknown
{
extern(Windows):
    void *GetShaderIdentifier(const wchar *pExportName);
    ulong GetShaderStackSize(const wchar *pExportName);
    ulong GetPipelineStackSize();
    void SetPipelineStackSize(ulong PipelineStackSizeInBytes);
}

enum D3D12_STATE_SUBOBJECT_TYPE
{
    D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG = 0,
    D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE = 1,
    D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE = 2,
    D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK = 3,
    D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY = 5,
    D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION = 6,
    D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 7,
    D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 8,
    D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG = 9,
    D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG = 10,
    D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP = 11,
    D3D12_STATE_SUBOBJECT_TYPE_MAX_VALID = ( D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP + 1 ) 
}

struct D3D12_STATE_SUBOBJECT
{
    D3D12_STATE_SUBOBJECT_TYPE Type;
    const void *pDesc;
}

enum D3D12_STATE_OBJECT_FLAGS
{
    D3D12_STATE_OBJECT_FLAG_NONE = 0,
    D3D12_STATE_OBJECT_FLAG_ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS = 0x1,
    D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS = 0x2
}

struct D3D12_STATE_OBJECT_CONFIG
{
    D3D12_STATE_OBJECT_FLAGS Flags;
}

struct D3D12_GLOBAL_ROOT_SIGNATURE
{
    ID3D12RootSignature pGlobalRootSignature;
}

struct D3D12_LOCAL_ROOT_SIGNATURE
{
    ID3D12RootSignature pLocalRootSignature;
}

struct D3D12_NODE_MASK
{
    uint NodeMask;
}

enum D3D12_EXPORT_FLAGS
{
    D3D12_EXPORT_FLAG_NONE = 0
}

struct D3D12_EXPORT_DESC
{
    const wchar *Name;
    const wchar *ExportToRename;
    D3D12_EXPORT_FLAGS Flags;
}

struct D3D12_DXIL_LIBRARY_DESC
{
    D3D12_SHADER_BYTECODE DXILLibrary;
    uint NumExports;
    D3D12_EXPORT_DESC *pExports;
}

struct D3D12_EXISTING_COLLECTION_DESC
{
    ID3D12StateObject pExistingCollection;
    uint NumExports;
    D3D12_EXPORT_DESC *pExports;
}

struct D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION
    {
    const D3D12_STATE_SUBOBJECT *pSubobjectToAssociate;
    uint NumExports;
    const wchar **pExports;
}

struct D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION
{
    const wchar *SubobjectToAssociate;
    uint NumExports;
    const wchar **pExports;
}

enum D3D12_HIT_GROUP_TYPE
{
    D3D12_HIT_GROUP_TYPE_TRIANGLES = 0,
    D3D12_HIT_GROUP_TYPE_PROCEDURAL_PRIMITIVE = 0x1
}

struct D3D12_HIT_GROUP_DESC
{
    const wchar *HitGroupExport;
    D3D12_HIT_GROUP_TYPE Type;
    const wchar *AnyHitShaderImport;
    const wchar *ClosestHitShaderImport;
    const wchar *IntersectionShaderImport;
}

struct D3D12_RAYTRACING_SHADER_CONFIG
{
    uint MaxPayloadSizeInBytes;
    uint MaxAttributeSizeInBytes;
}

struct D3D12_RAYTRACING_PIPELINE_CONFIG
{
    uint MaxTraceRecursionDepth;
}

enum D3D12_STATE_OBJECT_TYPE
{
    D3D12_STATE_OBJECT_TYPE_COLLECTION = 0,
    D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE = 3
}

struct D3D12_STATE_OBJECT_DESC
{
    D3D12_STATE_OBJECT_TYPE Type;
    uint NumSubobjects;
    const D3D12_STATE_SUBOBJECT *pSubobjects;
}

enum D3D12_RAYTRACING_GEOMETRY_FLAGS
{
    D3D12_RAYTRACING_GEOMETRY_FLAG_NONE = 0,
    D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE = 0x1,
    D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION = 0x2
}

enum D3D12_RAYTRACING_GEOMETRY_TYPE
{
    D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES = 0,
    D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS = ( D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES + 1 ) 
}

enum D3D12_RAYTRACING_INSTANCE_FLAGS
{
    D3D12_RAYTRACING_INSTANCE_FLAG_NONE = 0,
    D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE = 0x1,
    D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE = 0x2,
    D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE = 0x4,
    D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE = 0x8
}

struct D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE
{
    D3D12_GPU_VIRTUAL_ADDRESS StartAddress;
    ulong StrideInBytes;
}

struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE
{
    D3D12_GPU_VIRTUAL_ADDRESS StartAddress;
    ulong SizeInBytes;
}

struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE
{
    D3D12_GPU_VIRTUAL_ADDRESS StartAddress;
    ulong SizeInBytes;
    ulong StrideInBytes;
}

struct D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC
{
    D3D12_GPU_VIRTUAL_ADDRESS Transform3x4;
    DXGI_FORMAT IndexFormat;
    DXGI_FORMAT VertexFormat;
    uint IndexCount;
    uint VertexCount;
    D3D12_GPU_VIRTUAL_ADDRESS IndexBuffer;
    D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE VertexBuffer;
}

struct D3D12_RAYTRACING_AABB
{
    float MinX;
    float MinY;
    float MinZ;
    float MaxX;
    float MaxY;
    float MaxZ;
}

struct D3D12_RAYTRACING_GEOMETRY_AABBS_DESC
{
    ulong AABBCount;
    D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE AABBs;
}

enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS
{
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE = 0,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE = 0x1,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION = 0x2,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE = 0x4,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD = 0x8,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY = 0x10,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE = 0x20
}

enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE
{
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE = 0,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT = 0x1,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS = 0x2,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE = 0x3,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE = 0x4
}

enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE
{
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL = 0,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL = 0x1
}

enum D3D12_ELEMENTS_LAYOUT
{
    D3D12_ELEMENTS_LAYOUT_ARRAY = 0,
    D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS = 0x1
}

enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE
{
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE = 0,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION = 0x1,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION = 0x2,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE = 0x3
}

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC
{
    D3D12_GPU_VIRTUAL_ADDRESS DestBuffer;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE InfoType;
}

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC
{
    ulong CompactedSizeInBytes;
}

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC
{
    ulong DecodedSizeInBytes;
}

struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER
{
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE Type;
    uint NumDescs;
}

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC
{
    ulong SerializedSizeInBytes;
    ulong NumBottomLevelAccelerationStructurePointers;
}

struct D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER
{
    GUID DriverOpaqueGUID;
    ubyte[16] DriverOpaqueVersioningData;
}

enum D3D12_SERIALIZED_DATA_TYPE
{
    D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE = 0
}

enum D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS
{
    D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE = 0,
    D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE = 0x1,
    D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED = 0x2,
    D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION = 0x3,
    D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE = 0x4
}

struct D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER
{
    D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER DriverMatchingIdentifier;
    ulong SerializedSizeInBytesIncludingHeader;
    ulong DeserializedSizeInBytes;
    ulong NumBottomLevelAccelerationStructurePointersAfterHeader;
}

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC
{
    ulong CurrentSizeInBytes;
}

struct D3D12_RAYTRACING_INSTANCE_DESC
{
    float[3][4] Transform;
    uint InstanceID;
    uint InstanceMask;
    uint InstanceContributionToHitGroupIndex;
    uint Flags;
    D3D12_GPU_VIRTUAL_ADDRESS AccelerationStructure;
}

struct D3D12_RAYTRACING_GEOMETRY_DESC
{
    D3D12_RAYTRACING_GEOMETRY_TYPE Type;
    D3D12_RAYTRACING_GEOMETRY_FLAGS Flags;
    union
    {
        D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC Triangles;
        D3D12_RAYTRACING_GEOMETRY_AABBS_DESC AABBs;
    };
}

struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS
{
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE Type;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS Flags;
    uint NumDescs;
    D3D12_ELEMENTS_LAYOUT DescsLayout;
    union
    {
        D3D12_GPU_VIRTUAL_ADDRESS InstanceDescs;
        const D3D12_RAYTRACING_GEOMETRY_DESC *pGeometryDescs;
        const D3D12_RAYTRACING_GEOMETRY_DESC **ppGeometryDescs;
    };
}

struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC
{
    D3D12_GPU_VIRTUAL_ADDRESS DestAccelerationStructureData;
    D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS Inputs;
    D3D12_GPU_VIRTUAL_ADDRESS SourceAccelerationStructureData;
    D3D12_GPU_VIRTUAL_ADDRESS ScratchAccelerationStructureData;
}

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO
{
    ulong ResultDataMaxSizeInBytes;
    ulong ScratchDataSizeInBytes;
    ulong UpdateScratchDataSizeInBytes;
}

enum D3D12_RAY_FLAGS
{
    D3D12_RAY_FLAG_NONE = 0,
    D3D12_RAY_FLAG_FORCE_OPAQUE = 0x1,
    D3D12_RAY_FLAG_FORCE_NON_OPAQUE = 0x2,
    D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH = 0x4,
    D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER = 0x8,
    D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES = 0x10,
    D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES = 0x20,
    D3D12_RAY_FLAG_CULL_OPAQUE = 0x40,
    D3D12_RAY_FLAG_CULL_NON_OPAQUE = 0x80
}

enum D3D12_HIT_KIND
{
    D3D12_HIT_KIND_TRIANGLE_FRONT_FACE = 0xfe,
    D3D12_HIT_KIND_TRIANGLE_BACK_FACE = 0xff
}

mixin(uuid!(ID3D12Device5, "8b4f173b-2fea-4b80-8f58-4307191ab95d"));
public interface ID3D12Device5 : ID3D12Device4
{
extern(Windows):
    HRESULT CreateLifetimeTracker(ID3D12LifetimeOwner pOwner, REFIID riid, void **ppvTracker);
    void RemoveDevice();
    HRESULT EnumerateMetaCommands(uint *pNumMetaCommands, D3D12_META_COMMAND_DESC *pDescs);
    HRESULT EnumerateMetaCommandParameters(REFGUID CommandId, D3D12_META_COMMAND_PARAMETER_STAGE Stage, uint *pTotalStructureSizeInBytes, uint *pParameterCount, D3D12_META_COMMAND_PARAMETER_DESC *pParameterDescs);
    HRESULT CreateMetaCommand(REFGUID CommandId, uint NodeMask, const void *pCreationParametersData, size_t CreationParametersDataSizeInBytes, REFIID riid, void **ppMetaCommand);
    HRESULT CreateStateObject(const D3D12_STATE_OBJECT_DESC *pDesc, REFIID riid, void **ppStateObject);
    void GetRaytracingAccelerationStructurePrebuildInfo(const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS *pDesc, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO *pInfo);
    D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS CheckDriverMatchingIdentifier(D3D12_SERIALIZED_DATA_TYPE SerializedDataType, const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER *pIdentifierToCheck);
}

enum D3D12_AUTO_BREADCRUMB_OP
{
    D3D12_AUTO_BREADCRUMB_OP_SETMARKER = 0,
    D3D12_AUTO_BREADCRUMB_OP_BEGINEVENT = 1,
    D3D12_AUTO_BREADCRUMB_OP_ENDEVENT = 2,
    D3D12_AUTO_BREADCRUMB_OP_DRAWINSTANCED = 3,
    D3D12_AUTO_BREADCRUMB_OP_DRAWINDEXEDINSTANCED = 4,
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEINDIRECT = 5,
    D3D12_AUTO_BREADCRUMB_OP_DISPATCH = 6,
    D3D12_AUTO_BREADCRUMB_OP_COPYBUFFERREGION = 7,
    D3D12_AUTO_BREADCRUMB_OP_COPYTEXTUREREGION = 8,
    D3D12_AUTO_BREADCRUMB_OP_COPYRESOURCE = 9,
    D3D12_AUTO_BREADCRUMB_OP_COPYTILES = 10,
    D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCE = 11,
    D3D12_AUTO_BREADCRUMB_OP_CLEARRENDERTARGETVIEW = 12,
    D3D12_AUTO_BREADCRUMB_OP_CLEARUNORDEREDACCESSVIEW = 13,
    D3D12_AUTO_BREADCRUMB_OP_CLEARDEPTHSTENCILVIEW = 14,
    D3D12_AUTO_BREADCRUMB_OP_RESOURCEBARRIER = 15,
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEBUNDLE = 16,
    D3D12_AUTO_BREADCRUMB_OP_PRESENT = 17,
    D3D12_AUTO_BREADCRUMB_OP_RESOLVEQUERYDATA = 18,
    D3D12_AUTO_BREADCRUMB_OP_BEGINSUBMISSION = 19,
    D3D12_AUTO_BREADCRUMB_OP_ENDSUBMISSION = 20,
    D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME = 21,
    D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES = 22,
    D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT = 23,
    D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT64 = 24,
    D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCEREGION = 25,
    D3D12_AUTO_BREADCRUMB_OP_WRITEBUFFERIMMEDIATE = 26,
    D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME1 = 27,
    D3D12_AUTO_BREADCRUMB_OP_SETPROTECTEDRESOURCESESSION = 28,
    D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME2 = 29,
    D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES1 = 30,
    D3D12_AUTO_BREADCRUMB_OP_BUILDRAYTRACINGACCELERATIONSTRUCTURE = 31,
    D3D12_AUTO_BREADCRUMB_OP_EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO = 32,
    D3D12_AUTO_BREADCRUMB_OP_COPYRAYTRACINGACCELERATIONSTRUCTURE = 33,
    D3D12_AUTO_BREADCRUMB_OP_DISPATCHRAYS = 34,
    D3D12_AUTO_BREADCRUMB_OP_INITIALIZEMETACOMMAND = 35,
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEMETACOMMAND = 36,
    D3D12_AUTO_BREADCRUMB_OP_ESTIMATEMOTION = 37,
    D3D12_AUTO_BREADCRUMB_OP_RESOLVEMOTIONVECTORHEAP = 38,
    D3D12_AUTO_BREADCRUMB_OP_SETPIPELINESTATE1 = 39
}

struct D3D12_AUTO_BREADCRUMB_NODE
{
    const char *pCommandListDebugNameA;
    const wchar *pCommandListDebugNameW;
    const char *pCommandQueueDebugNameA;
    const wchar *pCommandQueueDebugNameW;
    ID3D12GraphicsCommandList pCommandList;
    ID3D12CommandQueue pCommandQueue;
    uint BreadcrumbCount;
    uint *pLastBreadcrumbValue;
    D3D12_AUTO_BREADCRUMB_OP *pCommandHistory;
    D3D12_AUTO_BREADCRUMB_NODE *pNext;
}

enum D3D12_DRED_VERSION
{
    D3D12_DRED_VERSION_1_0 = 0x1
}

enum D3D12_DRED_FLAGS
{
    D3D12_DRED_FLAG_NONE = 0,
    D3D12_DRED_FLAG_FORCE_ENABLE = 1,
    D3D12_DRED_FLAG_DISABLE_AUTOBREADCRUMBS = 2
}

struct D3D12_DEVICE_REMOVED_EXTENDED_DATA
{
    D3D12_DRED_FLAGS Flags;
    D3D12_AUTO_BREADCRUMB_NODE *pHeadAutoBreadcrumbNode;
}

struct D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA
{
    D3D12_DRED_VERSION Version;
    union
    {
       D3D12_DEVICE_REMOVED_EXTENDED_DATA Dred_1_0;
    };
}

mixin(uuid!(ID3D12Resource1, "9D5E227A-4430-4161-88B3-3ECA6BB16E19"));
public interface ID3D12Resource1 : ID3D12Resource
{
extern(Windows):
    HRESULT GetProtectedResourceSession(REFIID riid, void **ppProtectedSession);
}

mixin(uuid!(ID3D12Heap1, "572F7389-2168-49E3-9693-D6DF5871BF6D"));
public interface ID3D12Heap1 : ID3D12Heap
{
extern(Windows):
    HRESULT GetProtectedResourceSession(REFIID riid, void **ppProtectedSession);
}

mixin(uuid!(ID3D12GraphicsCommandList3, "6FDA83A7-B84C-4E38-9AC8-C7BD22016B3D"));
public interface ID3D12GraphicsCommandList3 : ID3D12GraphicsCommandList2
{
extern(Windows):
    void SetProtectedResourceSession(ID3D12ProtectedResourceSession pProtectedResourceSession);
}

enum D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE
{
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD = 0,
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE = ( D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD + 1 ) ,
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR = ( D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE + 1 ) ,
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS = ( D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR + 1 ) 
}

struct D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS
{
    D3D12_CLEAR_VALUE ClearValue;
}

struct D3D12_RENDER_PASS_BEGINNING_ACCESS
{
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE Type;
    union 
    {
        D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS Clear;
    };
}

enum D3D12_RENDER_PASS_ENDING_ACCESS_TYPE
{
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD = 0,
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE = ( D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD + 1 ),
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE = ( D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE + 1 ),
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS = ( D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE + 1 )
}

struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS
{
    uint SrcSubresource;
    uint DstSubresource;
    uint DstX;
    uint DstY;
    D3D12_RECT SrcRect;
}

struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS
{
    ID3D12Resource pSrcResource;
    ID3D12Resource pDstResource;
    uint SubresourceCount;
    const D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS *pSubresourceParameters;
    DXGI_FORMAT Format;
    D3D12_RESOLVE_MODE ResolveMode;
    bool PreserveResolveSource;
}

struct D3D12_RENDER_PASS_ENDING_ACCESS
{
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE Type;
    union 
    {
        D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS Resolve;
    };
}

struct D3D12_RENDER_PASS_RENDER_TARGET_DESC
{
    D3D12_CPU_DESCRIPTOR_HANDLE cpuDescriptor;
    D3D12_RENDER_PASS_BEGINNING_ACCESS BeginningAccess;
    D3D12_RENDER_PASS_ENDING_ACCESS EndingAccess;
}

struct D3D12_RENDER_PASS_DEPTH_STENCIL_DESC
{
    D3D12_CPU_DESCRIPTOR_HANDLE cpuDescriptor;
    D3D12_RENDER_PASS_BEGINNING_ACCESS DepthBeginningAccess;
    D3D12_RENDER_PASS_BEGINNING_ACCESS StencilBeginningAccess;
    D3D12_RENDER_PASS_ENDING_ACCESS DepthEndingAccess;
    D3D12_RENDER_PASS_ENDING_ACCESS StencilEndingAccess;
}

enum D3D12_RENDER_PASS_FLAGS
{
    D3D12_RENDER_PASS_FLAG_NONE = 0,
    D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES = 0x1,
    D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS = 0x2,
    D3D12_RENDER_PASS_FLAG_RESUMING_PASS = 0x4
}

mixin(uuid!(ID3D12MetaCommand, "DBB84C27-36CE-4FC9-B801-F048C46AC570"));
public interface ID3D12MetaCommand : ID3D12Pageable
{
extern(Windows):
    ulong GetRequiredParameterResourceSize(D3D12_META_COMMAND_PARAMETER_STAGE Stage, uint ParameterIndex);
}

struct D3D12_DISPATCH_RAYS_DESC
{
    D3D12_GPU_VIRTUAL_ADDRESS_RANGE RayGenerationShaderRecord;
    D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE MissShaderTable;
    D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE HitGroupTable;
    D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE CallableShaderTable;
    uint Width;
    uint Height;
    uint Depth;
}

mixin(uuid!(ID3D12GraphicsCommandList4, "8754318e-d3a9-4541-98cf-645b50dc4874"));
public interface ID3D12GraphicsCommandList4 : ID3D12GraphicsCommandList3
{
extern(Windows):
    void BeginRenderPass(uint NumRenderTargets, const D3D12_RENDER_PASS_RENDER_TARGET_DESC *pRenderTargets, const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC *pDepthStencil, D3D12_RENDER_PASS_FLAGS Flags);
    void EndRenderPass();
    void InitializeMetaCommand(ID3D12MetaCommand pMetaCommand, const void *pInitializationParametersData, size_t InitializationParametersDataSizeInBytes);
    void ExecuteMetaCommand(ID3D12MetaCommand pMetaCommand, const void *pExecutionParametersData, size_t ExecutionParametersDataSizeInBytes);
    void BuildRaytracingAccelerationStructure(const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC *pDesc, uint NumPostbuildInfoDescs, const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC *pPostbuildInfoDescs);
    void EmitRaytracingAccelerationStructurePostbuildInfo(const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC *pDesc, uint NumSourceAccelerationStructures, const D3D12_GPU_VIRTUAL_ADDRESS *pSourceAccelerationStructureData);
    void CopyRaytracingAccelerationStructure(D3D12_GPU_VIRTUAL_ADDRESS DestAccelerationStructureData, D3D12_GPU_VIRTUAL_ADDRESS SourceAccelerationStructureData, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE Mode);
    void SetPipelineState1(ID3D12StateObject pStateObject);
    void DispatchRays(const D3D12_DISPATCH_RAYS_DESC *pDesc);
}

