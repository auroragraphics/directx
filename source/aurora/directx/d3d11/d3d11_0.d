module aurora.directx.d3d11.d3d11_0;

version(Windows):

public import std.bitmanip;
public import aurora.directx.com;
public import aurora.directx.dxgi;
public import aurora.directx.d3d.d3dcommon;
public import aurora.directx.d3d11.d3d11shader;
public import aurora.directx.d3d11.d3d11sdklayers;
public import aurora.directx.d3d11.d3d11shadertracing;

public: 

///
/// Constants
///
enum int D3D11_16BIT_INDEX_STRIP_CUT_VALUE	= 0xffff;
enum int D3D11_32BIT_INDEX_STRIP_CUT_VALUE	= 0xffffffff;
enum int D3D11_8BIT_INDEX_STRIP_CUT_VALUE	= 0xff;
enum int D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT	= 9;
enum int D3D11_CLIP_OR_CULL_DISTANCE_COUNT	= 8;
enum int D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT	= 2;
enum int D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT	= 14;
enum int D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS	= 4;
enum int D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT	= 15;
enum int D3D11_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT	= 16;
enum int D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS	= 4;
enum int D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT	= 15;
enum int D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST	= 1;
enum int D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS	= 1;
enum int D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT	= 64;
enum int D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS	= 4;
enum int D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT	= 1;
enum int D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST	= 1;
enum int D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS	= 1;
enum int D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS	= 1;
enum int D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT	= 128;
enum int D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST	= 1;
enum int D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS	= 1;
enum int D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT	= 128;
enum int D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS	= 1;
enum int D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT	= 16;
enum int D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST	= 1;
enum int D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS	= 1;
enum int D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT	= 16;
enum int D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT	= 32;
enum int D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS	= 4;
enum int D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_COMMONSHADER_TEMP_REGISTER_COUNT	= 4096;
enum int D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST	= 3;
enum int D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS	= 3;
enum int D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX	= 10;
enum int D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN	= -10;
enum int D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE	= -8;
enum int D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE	= 7;
enum int D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	= 256;
enum int D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP	= 64;
enum int D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	= 240;
enum int D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP	= 68;
enum int D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	= 224;
enum int D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP	= 72;
enum int D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	= 208;
enum int D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP	= 76;
enum int D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	= 192;
enum int D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP	= 84;
enum int D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	= 176;
enum int D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP	= 92;
enum int D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	= 160;
enum int D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP	= 100;
enum int D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	= 144;
enum int D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP	= 112;
enum int D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	= 128;
enum int D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP	= 128;
enum int D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	= 112;
enum int D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP	= 144;
enum int D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	= 96;
enum int D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP	= 168;
enum int D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	= 80;
enum int D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP	= 204;
enum int D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	= 64;
enum int D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP	= 256;
enum int D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	= 48;
enum int D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP	= 34;
enum int D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	= 32;
enum int D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP	= 512;
enum int D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	= 16;
enum int D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP	= 768;
enum int D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION	= 1;
enum int D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT	= 256;
enum int D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP	= 768;
enum int D3D11_CS_4_X_THREAD_GROUP_MAX_X	= 768;
enum int D3D11_CS_4_X_THREAD_GROUP_MAX_Y	= 768;
enum int D3D11_CS_4_X_UAV_REGISTER_COUNT	= 1;
enum int D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION	= 65535;
enum int D3D11_CS_TGSM_REGISTER_COUNT	= 8192;
enum int D3D11_CS_TGSM_REGISTER_READS_PER_INST = 1;
enum int D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1;
enum int D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1;
enum int D3D11_CS_THREADGROUPID_REGISTER_COMPONENTS = 3;
enum int D3D11_CS_THREADGROUPID_REGISTER_COUNT = 1;
enum int D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = 1;
enum int D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = 1;
enum int D3D11_CS_THREADIDINGROUP_REGISTER_COMPONENTS = 3;
enum int D3D11_CS_THREADIDINGROUP_REGISTER_COUNT = 1;
enum int D3D11_CS_THREADID_REGISTER_COMPONENTS = 3;
enum int D3D11_CS_THREADID_REGISTER_COUNT = 1;
enum int D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024;
enum int D3D11_CS_THREAD_GROUP_MAX_X = 1024;
enum int D3D11_CS_THREAD_GROUP_MAX_Y = 1024;
enum int D3D11_CS_THREAD_GROUP_MAX_Z = 64;
enum int D3D11_CS_THREAD_GROUP_MIN_X = 1;
enum int D3D11_CS_THREAD_GROUP_MIN_Y = 1;
enum int D3D11_CS_THREAD_GROUP_MIN_Z = 1;
enum int D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384;
enum float D3D11_DEFAULT_BLEND_FACTOR_ALPHA = 1.0f;
enum float D3D11_DEFAULT_BLEND_FACTOR_BLUE = 1.0f;
enum float D3D11_DEFAULT_BLEND_FACTOR_GREEN = 1.0f;
enum float D3D11_DEFAULT_BLEND_FACTOR_RED = 1.0f;
enum float D3D11_DEFAULT_BORDER_COLOR_COMPONENT = 0.0f;
enum int D3D11_DEFAULT_DEPTH_BIAS = 0;
enum float D3D11_DEFAULT_DEPTH_BIAS_CLAMP = 0.0f;
enum int D3D11_DEFAULT_MAX_ANISOTROPY = 16;
enum float D3D11_DEFAULT_MIP_LOD_BIAS = 0.0f;
enum int D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0;
enum int D3D11_DEFAULT_SAMPLE_MASK = 0xffffffff;
enum int D3D11_DEFAULT_SCISSOR_ENDX = 0;
enum int D3D11_DEFAULT_SCISSOR_ENDY = 0;
enum int D3D11_DEFAULT_SCISSOR_STARTX = 0;
enum int D3D11_DEFAULT_SCISSOR_STARTY = 0;
enum float D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0.0f;
enum int D3D11_DEFAULT_STENCIL_READ_MASK = 0xff;
enum int D3D11_DEFAULT_STENCIL_REFERENCE = 0;
enum int D3D11_DEFAULT_STENCIL_WRITE_MASK = 0xff;
enum int D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX	= 0;
enum int D3D11_DEFAULT_VIEWPORT_HEIGHT	= 0;
enum float D3D11_DEFAULT_VIEWPORT_MAX_DEPTH = 0.0f;
enum float D3D11_DEFAULT_VIEWPORT_MIN_DEPTH = 0.0f;
enum int D3D11_DEFAULT_VIEWPORT_TOPLEFTX	= 0;
enum int D3D11_DEFAULT_VIEWPORT_TOPLEFTY	= 0;
enum int D3D11_DEFAULT_VIEWPORT_WIDTH	= 0;
enum int D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS	= 3968;
enum int D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS	= 4;
enum int D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT	= 32;
enum int D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST	= 2;
enum int D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS	= 1;
enum int D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS	= 3;
enum int D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT	= 1;
enum int D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST	= 2;
enum int D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS	= 1;
enum int D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS	= 4;
enum int D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT	= 32;
enum int D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST	= 2;
enum int D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS	= 1;
enum int D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS	= 1;
enum int D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT	= 1;
enum int D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST	= 2;
enum int D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS	= 1;
enum int D3D11_DS_OUTPUT_REGISTER_COMPONENTS	= 4;
enum int D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_DS_OUTPUT_REGISTER_COUNT	= 32;
enum float D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP	= 0.6f;
enum float D3D11_FLOAT32_MAX = 3.402823466e+38f;
enum float D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = 0.6f;
enum float D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = 2.4f;
enum float D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = 1.0f;
enum float D3D11_FLOAT_TO_SRGB_OFFSET = 0.055f;
enum float D3D11_FLOAT_TO_SRGB_SCALE_1 = 12.92f;
enum float D3D11_FLOAT_TO_SRGB_SCALE_2 = 1.055f;
enum float D3D11_FLOAT_TO_SRGB_THRESHOLD = 0.0031308f;
enum float D3D11_FTOI_INSTRUCTION_MAX_INPUT = 2147483647.999f;
enum float D3D11_FTOI_INSTRUCTION_MIN_INPUT = -2147483648.999f;
enum float D3D11_FTOU_INSTRUCTION_MAX_INPUT = 4294967295.999f;
enum float D3D11_FTOU_INSTRUCTION_MIN_INPUT = 0.0f;
enum int D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST	= 2;
enum int D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS	= 1;
enum int D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS	= 1;
enum int D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT	= 1;
enum int D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS	= 1;
enum int D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT	= 1;
enum int D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST	= 2;
enum int D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS	= 1;
enum int D3D11_GS_INPUT_REGISTER_COMPONENTS	= 4;
enum int D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_GS_INPUT_REGISTER_COUNT	= 32;
enum int D3D11_GS_INPUT_REGISTER_READS_PER_INST	= 2;
enum int D3D11_GS_INPUT_REGISTER_READ_PORTS	= 1;
enum int D3D11_GS_INPUT_REGISTER_VERTICES	= 32;
enum int D3D11_GS_MAX_INSTANCE_COUNT	= 32;
enum int D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES	= 1024;
enum int D3D11_GS_OUTPUT_ELEMENTS	= 32;
enum int D3D11_GS_OUTPUT_REGISTER_COMPONENTS	= 4;
enum int D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_GS_OUTPUT_REGISTER_COUNT	= 32;
enum int D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT	= 32;
enum int D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT	= 32;
enum int D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS	= 4;
enum int D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST	= 2;
enum int D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS	= 1;
enum int D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND	= 0xffffffff;
enum int D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS	= 1;
enum int D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT	= 1;
enum int D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST	= 2;
enum int D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS	= 1;
enum int D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS	= 1;
enum int D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT	= 1;
enum int D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST	= 2;
enum int D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS	= 1;
enum int D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS	= 1;
enum int D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT	= 1;
enum int D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST	= 2;
enum int D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS	= 1;
enum int D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND	= 0xffffffff;
enum float D3D11_HS_MAXTESSFACTOR_LOWER_BOUND = 1.0f;
enum float D3D11_HS_MAXTESSFACTOR_UPPER_BOUND = 64.0f;
enum int D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS	= 3968;
enum int D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS	= 1;
enum int D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT	= 1;
enum int D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST	= 2;
enum int D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS	= 1;
enum int D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS	= 4;
enum int D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT	= 32;
enum int D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST	= 2;
enum int D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS	= 1;
enum int D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS	= 128;
enum int D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES	= 0;
enum int D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY	= 0;
enum int D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES	= 0;
enum int D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT	= 1;
enum int D3D11_IA_INSTANCE_ID_BIT_COUNT	= 32;
enum int D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT	= 32;
enum int D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT	= 32;
enum int D3D11_IA_PRIMITIVE_ID_BIT_COUNT	= 32;
enum int D3D11_IA_VERTEX_ID_BIT_COUNT	= 32;
enum int D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT	= 32;
enum int D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS	= 128;
enum int D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT	= 32;
enum int D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT	= 0xffffffff;
enum int D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER	= 0xffffffff;
enum int D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL	= 0xffffffff;
enum int D3D11_KEEP_UNORDERED_ACCESS_VIEWS	= 0xffffffff;
enum float D3D11_LINEAR_GAMMA	= 1.0f;
enum int D3D11_MAJOR_VERSION	= 11;
enum float D3D11_MAX_BORDER_COLOR_COMPONENT	= 1.0f;
enum float D3D11_MAX_DEPTH	= 1.0f;
enum int D3D11_MAX_MAXANISOTROPY	= 16;
enum int D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT	= 32;
enum float D3D11_MAX_POSITION_VALUE	= 3.402823466e+34f;
enum int D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP	= 17;
enum int D3D11_MINOR_VERSION	= 0;
enum float D3D11_MIN_BORDER_COLOR_COMPONENT	= 0.0f;
enum float D3D11_MIN_DEPTH	= 0.0f;
enum int D3D11_MIN_MAXANISOTROPY	= 0;
enum float D3D11_MIP_LOD_BIAS_MAX	= 15.99f;
enum float D3D11_MIP_LOD_BIAS_MIN	= -16.0f;
enum int D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT	= 8;
enum int D3D11_MIP_LOD_RANGE_BIT_COUNT	= 8;
enum float D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH	= 1.4f;
enum int D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT	= 0;
enum int D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT	= 15;
enum int D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT	= 16;
enum int D3D11_PS_CS_UAV_REGISTER_COMPONENTS	= 1;
enum int D3D11_PS_CS_UAV_REGISTER_COUNT	= 8;
enum int D3D11_PS_CS_UAV_REGISTER_READS_PER_INST	= 1;
enum int D3D11_PS_CS_UAV_REGISTER_READ_PORTS	= 1;
enum int D3D11_PS_FRONTFACING_DEFAULT_VALUE	= 0xffffffff;
enum int D3D11_PS_FRONTFACING_FALSE_VALUE	= 0;
enum int D3D11_PS_FRONTFACING_TRUE_VALUE	= 0xffffffff;
enum int D3D11_PS_INPUT_REGISTER_COMPONENTS	= 4;
enum int D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_PS_INPUT_REGISTER_COUNT	= 32;
enum int D3D11_PS_INPUT_REGISTER_READS_PER_INST	= 2;
enum int D3D11_PS_INPUT_REGISTER_READ_PORTS	= 1;
enum float D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT	= 0.0f;
enum int D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS	= 1;
enum int D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT	= 1;
enum int D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS	= 1;
enum int D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_PS_OUTPUT_MASK_REGISTER_COUNT	= 1;
enum int D3D11_PS_OUTPUT_REGISTER_COMPONENTS	= 4;
enum int D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_PS_OUTPUT_REGISTER_COUNT	= 8;
enum float D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT	= 0.5f;
enum int D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT	= 16;
enum int D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE	= 4096;
enum int D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP	= 27;
enum int D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT	= 4096;
enum int D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE	= 4096;
enum int D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP	= 32;
enum int D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP	= 32;
enum int D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION	= 16384;
enum int D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT	= 1024;
enum int D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT	= 4096;
enum int D3D11_REQ_MAXANISOTROPY	= 16;
enum int D3D11_REQ_MIP_LEVELS	= 15;
enum int D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES	= 2048;
enum int D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE	= 4096;
enum int D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH	= 16384;
enum int D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM	= 128;
enum float D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM	= 0.25f;
enum int D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM	= 2048;
enum int D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP	= 20;
enum int D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE	= 4096;
enum int D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION	= 2048;
enum int D3D11_REQ_TEXTURE1D_U_DIMENSION	= 16384;
enum int D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION	= 2048;
enum int D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION	= 16384;
enum int D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION	= 2048;
enum int D3D11_REQ_TEXTURECUBE_DIMENSION	= 16384;
enum int D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL	= 0;
enum int D3D11_SHADER_MAJOR_VERSION	= 5;
enum int D3D11_SHADER_MAX_INSTANCES	= 65535;
enum int D3D11_SHADER_MAX_INTERFACES	= 253;
enum int D3D11_SHADER_MAX_INTERFACE_CALL_SITES	= 4096;
enum int D3D11_SHADER_MAX_TYPES	= 65535;
enum int D3D11_SHADER_MINOR_VERSION	= 0;
enum int D3D11_SHIFT_INSTRUCTION_PAD_VALUE	= 0;
enum int D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT	= 5;
enum int D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT	= 8;
enum int D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES	= 2048;
enum int D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES	= 512;
enum int D3D11_SO_BUFFER_SLOT_COUNT	= 4;
enum int D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP	= 0xffffffff;
enum int D3D11_SO_NO_RASTERIZED_STREAM	= 0xffffffff;
enum int D3D11_SO_OUTPUT_COMPONENT_COUNT	= 128;
enum int D3D11_SO_STREAM_COUNT	= 4;
enum int D3D11_SPEC_DATE_DAY	= 16;
enum int D3D11_SPEC_DATE_MONTH	= 05;
enum int D3D11_SPEC_DATE_YEAR	= 2011;
enum float D3D11_SPEC_VERSION	= 1.07f;
enum float D3D11_SRGB_GAMMA	= 2.2f;
enum float D3D11_SRGB_TO_FLOAT_DENOMINATOR_1	= 12.92f;
enum float D3D11_SRGB_TO_FLOAT_DENOMINATOR_2	= 1.055f;
enum float D3D11_SRGB_TO_FLOAT_EXPONENT	= 2.4f;
enum float D3D11_SRGB_TO_FLOAT_OFFSET	= 0.055f;
enum float D3D11_SRGB_TO_FLOAT_THRESHOLD	= 0.04045f;
enum float D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP	= 0.5f;
enum int D3D11_STANDARD_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED	= 64;
enum int D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE	= 4;
enum int D3D11_STANDARD_PIXEL_COMPONENT_COUNT	= 128;
enum int D3D11_STANDARD_PIXEL_ELEMENT_COUNT	= 32;
enum int D3D11_STANDARD_VECTOR_SIZE	= 4;
enum int D3D11_STANDARD_VERTEX_ELEMENT_COUNT	= 32;
enum int D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT	= 64;
enum int D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT	= 8;
enum int D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT	= 8;
enum int D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR	= 64;
enum int D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR	= 64;
enum int D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR	= 63;
enum int D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR	= 64;
enum int D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR	= 2;
enum int D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR	= 1;
enum int D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR	= 1;
enum int D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT	= 16;
enum int D3D11_UNBOUND_MEMORY_ACCESS_RESULT	= 0;
enum int D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX	= 15;
enum int D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE	= 16;
enum int D3D11_VIEWPORT_BOUNDS_MAX	= 32767;
enum int D3D11_VIEWPORT_BOUNDS_MIN	= -32768;
enum int D3D11_VS_INPUT_REGISTER_COMPONENTS	= 4;
enum int D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT	= 3;
enum int D3D11_VS_INPUT_REGISTER_COUNT	= 32;
enum int D3D11_VS_INPUT_REGISTER_READS_PER_INST	= 2;
enum int D3D11_VS_INPUT_REGISTER_READ_PORTS	= 1;
enum int D3D11_VS_OUTPUT_REGISTER_COMPONENTS	= 4;
enum int D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT	= 32;
enum int D3D11_VS_OUTPUT_REGISTER_COUNT	= 32;
enum int D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT	= 10;
enum int D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP	= 25;
enum int D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP	= 25;
enum int D3D11_APPEND_ALIGNED_ELEMENT = 0xffffffff;

enum int D3D11_FILTER_REDUCTION_TYPE_MASK = 0x3;
enum int D3D11_FILTER_REDUCTION_TYPE_SHIFT = 7;
enum int D3D11_FILTER_TYPE_MASK = 0x3;
enum int D3D11_MIN_FILTER_SHIFT = 4;
enum int D3D11_MAG_FILTER_SHIFT = 2;
enum int D3D11_MIP_FILTER_SHIFT = 0;
enum int D3D11_COMPARISON_FILTERING_BIT = 0x80;
enum int D3D11_ANISOTROPIC_FILTERING_BIT = 0x40;

const IID D3D11_KEY_EXCHANGE_RSAES_OAEP = {0xc1949895, 0xd72a, 0x4a1d, [0x8e, 0x5d, 0xed, 0x85, 0x7d, 0x17, 0x15, 0x20]};
const IID D3D11_CRYPTO_TYPE_AES128_CTR = {0x9b6bd711, 0x4f74, 0x41c9, [0x9e, 0x7b, 0xb, 0xe2, 0xd7, 0xd9, 0x3b, 0x4f]};
const IID D3D11_DECODER_ENCRYPTION_HW_CENC = {0x89d6ac4f, 0x9f2, 0x4229, [0xb2, 0xcd, 0x37, 0x74, 0xa, 0x6d, 0xfd, 0x81]};
const IID D3D11_KEY_EXCHANGE_HW_PROTECTION = {0xb1170d8a, 0x628d, 0x4da3, [0xad, 0x3b, 0x82, 0xdd, 0xb0, 0x8b, 0x49, 0x70]};
const IID D3D11_DECODER_PROFILE_MPEG2_MOCOMP = {0xe6a9f44b, 0x61b0, 0x4563, [0x9e, 0xa4, 0x63, 0xd2, 0xa3, 0xc6, 0xfe, 0x66]};
const IID D3D11_DECODER_PROFILE_MPEG2_IDCT = {0xbf22ad00, 0x03ea, 0x4690, [0x80, 0x77, 0x47, 0x33, 0x46, 0x20, 0x9b, 0x7e]};
const IID D3D11_DECODER_PROFILE_MPEG2_VLD = {0xee27417f, 0x5e28, 0x4e65, [0xbe, 0xea, 0x1d, 0x26, 0xb5, 0x08, 0xad, 0xc9]};
const IID D3D11_DECODER_PROFILE_MPEG1_VLD = {0x6f3ec719, 0x3735, 0x42cc, [0x80, 0x63, 0x65, 0xcc, 0x3c, 0xb3, 0x66, 0x16]};
const IID D3D11_DECODER_PROFILE_MPEG2and1_VLD = {0x86695f12, 0x340e, 0x4f04, [0x9f, 0xd3, 0x92, 0x53, 0xdd, 0x32, 0x74, 0x60]};
const IID D3D11_DECODER_PROFILE_H264_MOCOMP_NOFGT = {0x1b81be64, 0xa0c7, 0x11d3, [0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5]};
const IID D3D11_DECODER_PROFILE_H264_MOCOMP_FGT = {0x1b81be65, 0xa0c7, 0x11d3, [0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5]};
const IID D3D11_DECODER_PROFILE_H264_IDCT_NOFGT = {0x1b81be66, 0xa0c7, 0x11d3, [0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5]};
const IID D3D11_DECODER_PROFILE_H264_IDCT_FGT = {0x1b81be67, 0xa0c7, 0x11d3, [0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5]};
const IID D3D11_DECODER_PROFILE_H264_VLD_NOFGT = {0x1b81be68, 0xa0c7, 0x11d3, [0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5]};
const IID D3D11_DECODER_PROFILE_H264_VLD_FGT = {0x1b81be69, 0xa0c7, 0x11d3, [0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5]};
const IID D3D11_DECODER_PROFILE_H264_VLD_WITHFMOASO_NOFGT = {0xd5f04ff9, 0x3418, 0x45d8, [0x95, 0x61, 0x32, 0xa7, 0x6a, 0xae, 0x2d, 0xdd]};
const IID D3D11_DECODER_PROFILE_H264_VLD_STEREO_PROGRESSIVE_NOFGT = {0xd79be8da, 0x0cf1, 0x4c81, [0xb8, 0x2a, 0x69, 0xa4, 0xe2, 0x36, 0xf4, 0x3d]};
const IID D3D11_DECODER_PROFILE_H264_VLD_STEREO_NOFGT = {0xf9aaccbb, 0xc2b6, 0x4cfc, [0x87, 0x79, 0x57, 0x07, 0xb1, 0x76, 0x05, 0x52]};
const IID D3D11_DECODER_PROFILE_H264_VLD_MULTIVIEW_NOFGT = {0x705b9d82, 0x76cf, 0x49d6, [0xb7, 0xe6, 0xac, 0x88, 0x72, 0xdb, 0x01, 0x3c]};
const IID D3D11_DECODER_PROFILE_WMV8_POSTPROC = {0x1b81be80, 0xa0c7, 0x11d3, [0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5]};
const IID D3D11_DECODER_PROFILE_WMV8_MOCOMP = {0x1b81be81, 0xa0c7, 0x11d3, [0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5]};
const IID D3D11_DECODER_PROFILE_WMV9_POSTPROC = {0x1b81be90, 0xa0c7, 0x11d3, [0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5]};
const IID D3D11_DECODER_PROFILE_WMV9_MOCOMP = {0x1b81be91, 0xa0c7, 0x11d3, [0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5]};
const IID D3D11_DECODER_PROFILE_WMV9_IDCT = {0x1b81be94, 0xa0c7, 0x11d3, [0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5]};
const IID D3D11_DECODER_PROFILE_VC1_POSTPROC = {0x1b81beA0, 0xa0c7, 0x11d3, [0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5]};
const IID D3D11_DECODER_PROFILE_VC1_MOCOMP = {0x1b81beA1, 0xa0c7, 0x11d3, [0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5]};
const IID D3D11_DECODER_PROFILE_VC1_IDCT = {0x1b81beA2, 0xa0c7, 0x11d3, [0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5]};
const IID D3D11_DECODER_PROFILE_VC1_VLD = {0x1b81beA3, 0xa0c7, 0x11d3, [0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5]};
const IID D3D11_DECODER_PROFILE_VC1_D2010 = {0x1b81beA4, 0xa0c7, 0x11d3, [0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5]};
const IID D3D11_DECODER_PROFILE_MPEG4PT2_VLD_SIMPLE = {0xefd64d74, 0xc9e8, 0x41d7, [0xa5, 0xe9, 0xe9, 0xb0, 0xe3, 0x9f, 0xa3, 0x19]};
const IID D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_NOGMC = {0xed418a9f, 0x010d, 0x4eda, [0x9a, 0xe3, 0x9a, 0x65, 0x35, 0x8d, 0x8d, 0x2e]};
const IID D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_GMC = {0xab998b5b, 0x4258, 0x44a9, [0x9f, 0xeb, 0x94, 0xe5, 0x97, 0xa6, 0xba, 0xae]};
const IID D3D11_DECODER_PROFILE_HEVC_VLD_MAIN = {0x5b11d51b, 0x2f4c, 0x4452, [0xbc, 0xc3, 0x09, 0xf2, 0xa1, 0x16, 0x0c, 0xc0]};
const IID D3D11_DECODER_PROFILE_HEVC_VLD_MAIN10 = {0x107af0e0, 0xef1a, 0x4d19, [0xab, 0xa8, 0x67, 0xa1, 0x63, 0x07, 0x3d, 0x13]};
const IID D3D11_DECODER_PROFILE_VP9_VLD_PROFILE0 = {0x463707f8, 0xa1d0, 0x4585, [0x87, 0x6d, 0x83, 0xaa, 0x6d, 0x60, 0xb8, 0x9e]};
const IID D3D11_DECODER_PROFILE_VP9_VLD_10BIT_PROFILE2 = {0xa4c749ef, 0x6ecf, 0x48aa, [0x84, 0x48, 0x50, 0xa7, 0xa1, 0x16, 0x5f, 0xf7]};
const IID D3D11_DECODER_PROFILE_VP8_VLD = {0x90b899ea, 0x3a62, 0x4705, [0x88, 0xb3, 0x8d, 0xf0, 0x4b, 0x27, 0x44, 0xe7]};
const IID D3D11_AUTHENTICATED_QUERY_PROTECTION = {0xa84eb584, 0xc495, 0x48aa, [0xb9, 0x4d, 0x8b, 0xd2, 0xd6, 0xfb, 0xce, 0x5]};
const IID D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE = {0xbc1b18a5, 0xb1fb, 0x42ab, [0xbd, 0x94, 0xb5, 0x82, 0x8b, 0x4b, 0xf7, 0xbe]};
const IID D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE = {0xec1c539d, 0x8cff, 0x4e2a, [0xbc, 0xc4, 0xf5, 0x69, 0x2f, 0x99, 0xf4, 0x80]};
const IID D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION = {0x2634499e, 0xd018, 0x4d74, [0xac, 0x17, 0x7f, 0x72, 0x40, 0x59, 0x52, 0x8d]};
const IID D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT = {0xdb207b3, 0x9450, 0x46a6, [0x82, 0xde, 0x1b, 0x96, 0xd4, 0x4f, 0x9c, 0xf2]};
const IID D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS = {0x649bbadb, 0xf0f4, 0x4639, [0xa1, 0x5b, 0x24, 0x39, 0x3f, 0xc3, 0xab, 0xac]};
const IID D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT = {0x12f0bd6, 0xe662, 0x4474, [0xbe, 0xfd, 0xaa, 0x53, 0xe5, 0x14, 0x3c, 0x6d]};
const IID D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT = {0x2c042b5e, 0x8c07, 0x46d5, [0xaa, 0xbe, 0x8f, 0x75, 0xcb, 0xad, 0x4c, 0x31]};
const IID D3D11_AUTHENTICATED_QUERY_OUTPUT_ID = {0x839ddca3, 0x9b4e, 0x41e4, [0xb0, 0x53, 0x89, 0x2b, 0xd2, 0xa1, 0x1e, 0xe7]};
const IID D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES = {0x6214d9d2, 0x432c, 0x4abb, [0x9f, 0xce, 0x21, 0x6e, 0xea, 0x26, 0x9e, 0x3b]};
const IID D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT = {0xb30f7066, 0x203c, 0x4b07, [0x93, 0xfc, 0xce, 0xaa, 0xfd, 0x61, 0x24, 0x1e]};
const IID D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID = {0xf83a5958, 0xe986, 0x4bda, [0xbe, 0xb0, 0x41, 0x1f, 0x6a, 0x7a, 0x1, 0xb7]};
const IID D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE = {0xec1791c7, 0xdad3, 0x4f15, [0x9e, 0xc3, 0xfa, 0xa9, 0x3d, 0x60, 0xd4, 0xf0]};
const IID D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE = {0x6114bdb, 0x3523, 0x470a, [0x8d, 0xca, 0xfb, 0xc2, 0x84, 0x51, 0x54, 0xf0]};
const IID D3D11_AUTHENTICATED_CONFIGURE_PROTECTION = {0x50455658, 0x3f47, 0x4362, [0xbf, 0x99, 0xbf, 0xdf, 0xcd, 0xe9, 0xed, 0x29]};
const IID D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION = {0x6346cc54, 0x2cfc, 0x4ad4, [0x82, 0x24, 0xd1, 0x58, 0x37, 0xde, 0x77, 0x0]};
const IID D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE = {0x772d047, 0x1b40, 0x48e8, [0x9c, 0xa6, 0xb5, 0xf5, 0x10, 0xde, 0x9f, 0x1]};
const IID D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE = {0x41fff286, 0x6ae0, 0x4d43, [0x9d, 0x55, 0xa4, 0x6e, 0x9e, 0xfd, 0x15, 0x8a]};

///
/// Mixins
///

///The following macros have not been converted to mixins yet
/*
#define D3D11_ENCODE_BASIC_FILTER( min, mag, mip, reduction )                                                     \
                                   ( ( D3D11_FILTER ) (                                                           \
                                   ( ( ( min ) & D3D11_FILTER_TYPE_MASK ) << D3D11_MIN_FILTER_SHIFT ) |           \
                                   ( ( ( mag ) & D3D11_FILTER_TYPE_MASK ) << D3D11_MAG_FILTER_SHIFT ) |           \
                                   ( ( ( mip ) & D3D11_FILTER_TYPE_MASK ) << D3D11_MIP_FILTER_SHIFT ) |           \
                                   ( ( ( reduction ) & D3D11_FILTER_REDUCTION_TYPE_MASK ) << D3D11_FILTER_REDUCTION_TYPE_SHIFT ) ) ) 
#define D3D11_ENCODE_ANISOTROPIC_FILTER( reduction )                                                  \
                                         ( ( D3D11_FILTER ) (                                         \
                                         D3D11_ANISOTROPIC_FILTERING_BIT |                            \
                                         D3D11_ENCODE_BASIC_FILTER( D3D11_FILTER_TYPE_LINEAR,         \
                                                                    D3D11_FILTER_TYPE_LINEAR,         \
                                                                    D3D11_FILTER_TYPE_LINEAR,         \
                                                                    reduction ) ) )                     
#define D3D11_DECODE_MIN_FILTER( d3d11Filter )                                                              \
                                 ( ( D3D11_FILTER_TYPE )                                                    \
                                 ( ( ( d3d11Filter ) >> D3D11_MIN_FILTER_SHIFT ) & D3D11_FILTER_TYPE_MASK ) ) 
#define D3D11_DECODE_MAG_FILTER( d3d11Filter )                                                              \
                                 ( ( D3D11_FILTER_TYPE )                                                    \
                                 ( ( ( d3d11Filter ) >> D3D11_MAG_FILTER_SHIFT ) & D3D11_FILTER_TYPE_MASK ) ) 
#define D3D11_DECODE_MIP_FILTER( d3d11Filter )                                                              \
                                 ( ( D3D11_FILTER_TYPE )                                                    \
                                 ( ( ( d3d11Filter ) >> D3D11_MIP_FILTER_SHIFT ) & D3D11_FILTER_TYPE_MASK ) ) 
#define D3D11_DECODE_FILTER_REDUCTION( d3d11Filter )                                                        \
                                 ( ( D3D11_FILTER_REDUCTION_TYPE )                                                      \
                                 ( ( ( d3d11Filter ) >> D3D11_FILTER_REDUCTION_TYPE_SHIFT ) & D3D11_FILTER_REDUCTION_TYPE_MASK ) ) 
#define D3D11_DECODE_IS_COMPARISON_FILTER( d3d11Filter )                                                    \
                                 ( D3D11_DECODE_FILTER_REDUCTION( d3d11Filter ) == D3D11_FILTER_REDUCTION_TYPE_COMPARISON ) 
#define D3D11_DECODE_IS_ANISOTROPIC_FILTER( d3d11Filter )                                               \
                            ( ( ( d3d11Filter ) & D3D11_ANISOTROPIC_FILTERING_BIT ) &&                  \
                            ( D3D11_FILTER_TYPE_LINEAR == D3D11_DECODE_MIN_FILTER( d3d11Filter ) ) &&   \
                            ( D3D11_FILTER_TYPE_LINEAR == D3D11_DECODE_MAG_FILTER( d3d11Filter ) ) &&   \
                            ( D3D11_FILTER_TYPE_LINEAR == D3D11_DECODE_MIP_FILTER( d3d11Filter ) ) )
*/ 

///
/// Functions
///

extern (Windows) {
	HRESULT D3D11CreateDevice(IDXGIAdapter pAdapter, D3D_DRIVER_TYPE DriverType, HMODULE Software, UINT Flags, const D3D_FEATURE_LEVEL *pFeatureLevels, UINT FeatureLevels, UINT SDKVersion, ID3D11Device *ppDevice, D3D_FEATURE_LEVEL *pFeatureLevel, ID3D11DeviceContext *ppImmediateContext);
	HRESULT D3D11CreateDeviceAndSwapChain(IDXGIAdapter pAdapter, D3D_DRIVER_TYPE DriverType, HMODULE Software, UINT Flags, const D3D_FEATURE_LEVEL *pFeatureLevels, UINT FeatureLevels, UINT SDKVersion, const DXGI_SWAP_CHAIN_DESC *pSwapChainDesc, IDXGISwapChain *ppSwapChain, ID3D11Device *ppDevice, D3D_FEATURE_LEVEL *pFeatureLevel, ID3D11DeviceContext *ppImmediateContext);
}
uint D3D11CalcSubresource(uint MipSlice, uint ArraySlice, uint MipLevels ) { return MipSlice + ArraySlice * MipLevels; }

///
/// Enumerations
///

alias D3D_PRIMITIVE_TOPOLOGY D3D11_PRIMITIVE_TOPOLOGY;
alias D3D_PRIMITIVE D3D11_PRIMITIVE;
alias D3D_SRV_DIMENSION D3D11_SRV_DIMENSION;

enum D3D11_INPUT_CLASSIFICATION : uint
{
	VERTEX_DATA	= 0,
	INSTANCE_DATA = 1
}

enum D3D11_FILL_MODE : uint
{
	WIREFRAME = 2,
	SOLID = 3
}

enum D3D11_CULL_MODE : uint
{
	NONE = 1,
	FRONT = 2,
	BACK = 3
}

enum D3D11_RESOURCE_DIMENSION : uint
{
	UNKNOWN	= 0,
	BUFFER	= 1,
	TEXTURE1D	= 2,
	TEXTURE2D	= 3,
	TEXTURE3D	= 4
}

enum D3D11_DSV_DIMENSION : uint
{
	UNKNOWN	= 0,
	TEXTURE1D = 1,
	TEXTURE1DARRAY = 2,
	TEXTURE2D = 3,
	TEXTURE2DARRAY = 4,
	TEXTURE2DMS = 5,
	TEXTURE2DMSARRAY = 6
}

enum D3D11_RTV_DIMENSION : uint
{
	UNKNOWN	= 0,
	BUFFER	= 1,
	TEXTURE1D	= 2,
	TEXTURE1DARRAY	= 3,
	TEXTURE2D	= 4,
	TEXTURE2DARRAY	= 5,
	TEXTURE2DMS	= 6,
	TEXTURE2DMSARRAY	= 7,
	TEXTURE3D	= 8
}

enum D3D11_UAV_DIMENSION : uint
{
	UNKNOWN	= 0,
	BUFFER	= 1,
	TEXTURE1D	= 2,
	TEXTURE1DARRAY	= 3,
	TEXTURE2D	= 4,
	TEXTURE2DARRAY	= 5,
	TEXTURE3D	= 8
}

enum D3D11_USAGE : uint
{
	DEFAULT	= 0,
	IMMUTABLE = 1,
	DYNAMIC	= 2,
	STAGING	= 3
}

enum D3D11_BIND_FLAG : uint
{
	VERTEX_BUFFER	= 0x1L,
	INDEX_BUFFER	= 0x2L,
	CONSTANT_BUFFER	= 0x4L,
	SHADER_RESOURCE	= 0x8L,
	STREAM_OUTPUT	= 0x10L,
	RENDER_TARGET	= 0x20L,
	DEPTH_STENCIL	= 0x40L,
	UNORDERED_ACCESS	= 0x80L,
	DECODER	= 0x200L,
	VIDEO_ENCODER	= 0x400L
}

enum D3D11_CPU_ACCESS_FLAG : uint
{
	WRITE	= 0x10000L,
	READ	= 0x20000L
}

enum D3D11_RESOURCE_MISC_FLAG : uint
{
	GENERATE_MIPS	= 0x1L,
	SHARED	= 0x2L,
	TEXTURECUBE	= 0x4L,
	DRAWINDIRECT_ARGS	= 0x10L,
	BUFFER_ALLOW_RAW_VIEWS	= 0x20L,
	BUFFER_STRUCTURED	= 0x40L,
	RESOURCE_CLAMP	= 0x80L,
	SHARED_KEYEDMUTEX	= 0x100L,
	GDI_COMPATIBLE	= 0x200L,
	SHARED_NTHANDLE	= 0x800L,
	RESTRICTED_CONTENT	= 0x1000L,
	RESTRICT_SHARED_RESOURCE	= 0x2000L,
	RESTRICT_SHARED_RESOURCE_DRIVER	= 0x4000L,
	GUARDED	= 0x8000L,
	TILE_POOL	= 0x20000L,
	TILED	= 0x40000L,
	HW_PROTECTED	= 0x80000L
}

enum D3D11_MAP : uint
{
	READ	= 1,
	WRITE	= 2,
	READ_WRITE	= 3,
	WRITE_DISCARD	= 4,
	WRITE_NO_OVERWRITE	= 5
}

enum D3D11_MAP_FLAG : uint
{
	DO_NOT_WAIT	= 0x100000L
}

enum D3D11_RAISE_FLAG : uint
{
	DRIVER_INTERNAL_ERROR	= 0x1L
}

enum D3D11_CLEAR_FLAG : uint
{
	DEPTH	= 0x1L,
	STENCIL	= 0x2L
}

enum D3D11_COMPARISON_FUNC : uint
{
	NEVER	= 1,
	LESS	= 2,
	EQUAL	= 3,
	LESS_EQUAL	= 4,
	GREATER	= 5,
	NOT_EQUAL	= 6,
	GREATER_EQUAL	= 7,
	ALWAYS	= 8
}

enum D3D11_DEPTH_WRITE_MASK : uint
{
	ZERO	= 0,
	ALL	= 1
}

enum D3D11_STENCIL_OP : uint
{
	KEEP	= 1,
	ZERO	= 2,
	REPLACE	= 3,
	INCR_SAT	= 4,
	DECR_SAT	= 5,
	INVERT	= 6,
	INCR	= 7,
	DECR	= 8
}

enum D3D11_BLEND : uint
{
	ZERO	= 1,
	ONE	= 2,
	SRC_COLOR	= 3,
	INV_SRC_COLOR	= 4,
	SRC_ALPHA	= 5,
	INV_SRC_ALPHA	= 6,
	DEST_ALPHA	= 7,
	INV_DEST_ALPHA	= 8,
	DEST_COLOR	= 9,
	INV_DEST_COLOR	= 10,
	SRC_ALPHA_SAT	= 11,
	BLEND_FACTOR	= 14,
	INV_BLEND_FACTOR	= 15,
	SRC1_COLOR	= 16,
	INV_SRC1_COLOR	= 17,
	SRC1_ALPHA	= 18,
	INV_SRC1_ALPHA	= 19
}

enum D3D11_BLEND_OP : uint
{
	ADD	= 1,
	SUBTRACT = 2,
	REV_SUBTRACT = 3,
	MIN	= 4,
	MAX	= 5
}

enum D3D11_COLOR_WRITE_ENABLE : uint
{
	RED	= 1,
	GREEN = 2,
	BLUE = 4,
	ALPHA = 8,
	ALL	= ( ( ( RED | GREEN )  | BLUE )  | ALPHA ) 
}

enum D3D11_TEXTURECUBE_FACE : uint
{
	POSITIVE_X	= 0,
	NEGATIVE_X	= 1,
	POSITIVE_Y	= 2,
	NEGATIVE_Y	= 3,
	POSITIVE_Z	= 4,
	NEGATIVE_Z	= 5
}

enum D3D11_BUFFEREX_SRV_FLAG : uint
{
	RAW	= 0x1
}

enum D3D11_DSV_FLAG : uint
{
	DEPTH	= 0x1L,
	STENCIL	= 0x2L
}

enum D3D11_BUFFER_UAV_FLAG : uint
{
	RAW	= 0x1,
	APPEND	= 0x2,
	COUNTER	= 0x4
}

enum D3D11_FILTER : uint
{
	MIN_MAG_MIP_POINT	= 0,
	MIN_MAG_POINT_MIP_LINEAR	= 0x1,
	MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x4,
	MIN_POINT_MAG_MIP_LINEAR	= 0x5,
	MIN_LINEAR_MAG_MIP_POINT	= 0x10,
	MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x11,
	MIN_MAG_LINEAR_MIP_POINT	= 0x14,
	MIN_MAG_MIP_LINEAR	= 0x15,
	ANISOTROPIC	= 0x55,
	COMPARISON_MIN_MAG_MIP_POINT	= 0x80,
	COMPARISON_MIN_MAG_POINT_MIP_LINEAR	= 0x81,
	COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x84,
	COMPARISON_MIN_POINT_MAG_MIP_LINEAR	= 0x85,
	COMPARISON_MIN_LINEAR_MAG_MIP_POINT	= 0x90,
	COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x91,
	COMPARISON_MIN_MAG_LINEAR_MIP_POINT	= 0x94,
	COMPARISON_MIN_MAG_MIP_LINEAR	= 0x95,
	COMPARISON_ANISOTROPIC	= 0xd5,
	MINIMUM_MIN_MAG_MIP_POINT	= 0x100,
	MINIMUM_MIN_MAG_POINT_MIP_LINEAR	= 0x101,
	MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x104,
	MINIMUM_MIN_POINT_MAG_MIP_LINEAR	= 0x105,
	MINIMUM_MIN_LINEAR_MAG_MIP_POINT	= 0x110,
	MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x111,
	MINIMUM_MIN_MAG_LINEAR_MIP_POINT	= 0x114,
	MINIMUM_MIN_MAG_MIP_LINEAR	= 0x115,
	MINIMUM_ANISOTROPIC	= 0x155,
	MAXIMUM_MIN_MAG_MIP_POINT	= 0x180,
	MAXIMUM_MIN_MAG_POINT_MIP_LINEAR	= 0x181,
	MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x184,
	MAXIMUM_MIN_POINT_MAG_MIP_LINEAR	= 0x185,
	MAXIMUM_MIN_LINEAR_MAG_MIP_POINT	= 0x190,
	MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x191,
	MAXIMUM_MIN_MAG_LINEAR_MIP_POINT	= 0x194,
	MAXIMUM_MIN_MAG_MIP_LINEAR	= 0x195,
	MAXIMUM_ANISOTROPIC	= 0x1d5
}

enum D3D11_FILTER_TYPE : uint
{
	POINT = 0,
	LINEAR = 1
}

enum D3D11_FILTER_REDUCTION_TYPE : uint
{
	STANDARD = 0,
	COMPARISON = 1,
	MINIMUM	= 2,
	MAXIMUM	= 3
}

enum D3D11_TEXTURE_ADDRESS_MODE : uint
{
	WRAP	= 1,
	MIRROR	= 2,
	CLAMP	= 3,
	BORDER	= 4,
	MIRROR_ONCE	= 5
}

enum D3D11_FORMAT_SUPPORT : uint
{
	BUFFER	= 0x1,
	IA_VERTEX_BUFFER	= 0x2,
	IA_INDEX_BUFFER	= 0x4,
	SO_BUFFER	= 0x8,
	TEXTURE1D	= 0x10,
	TEXTURE2D	= 0x20,
	TEXTURE3D	= 0x40,
	TEXTURECUBE	= 0x80,
	SHADER_LOAD	= 0x100,
	SHADER_SAMPLE	= 0x200,
	SHADER_SAMPLE_COMPARISON	= 0x400,
	SHADER_SAMPLE_MONO_TEXT	= 0x800,
	MIP	= 0x1000,
	MIP_AUTOGEN	= 0x2000,
	RENDER_TARGET	= 0x4000,
	BLENDABLE	= 0x8000,
	DEPTH_STENCIL	= 0x10000,
	CPU_LOCKABLE	= 0x20000,
	MULTISAMPLE_RESOLVE	= 0x40000,
	DISPLAY	= 0x80000,
	CAST_WITHIN_BIT_LAYOUT	= 0x100000,
	MULTISAMPLE_RENDERTARGET	= 0x200000,
	MULTISAMPLE_LOAD	= 0x400000,
	SHADER_GATHER	= 0x800000,
	BACK_BUFFER_CAST	= 0x1000000,
	TYPED_UNORDERED_ACCESS_VIEW	= 0x2000000,
	SHADER_GATHER_COMPARISON	= 0x4000000,
	DECODER_OUTPUT	= 0x8000000,
	VIDEO_PROCESSOR_OUTPUT	= 0x10000000,
	VIDEO_PROCESSOR_INPUT	= 0x20000000,
	VIDEO_ENCODER	= 0x40000000
}

enum D3D11_FORMAT_SUPPORT2 : uint
{
	UAV_ATOMIC_ADD	= 0x1,
	UAV_ATOMIC_BITWISE_OPS	= 0x2,
	UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE	= 0x4,
	UAV_ATOMIC_EXCHANGE	= 0x8,
	UAV_ATOMIC_SIGNED_MIN_OR_MAX	= 0x10,
	UAV_ATOMIC_UNSIGNED_MIN_OR_MAX	= 0x20,
	UAV_TYPED_LOAD	= 0x40,
	UAV_TYPED_STORE	= 0x80,
	OUTPUT_MERGER_LOGIC_OP	= 0x100,
	TILED	= 0x200,
	SHAREABLE	= 0x400,
	MULTIPLANE_OVERLAY	= 0x4000
}

enum D3D11_ASYNC_GETDATA_FLAG : uint
{
	DONOTFLUSH	= 0x1
}

enum D3D11_QUERY : uint
{
	EVENT	= 0,
	OCCLUSION	= ( EVENT + 1 ) ,
	TIMESTAMP	= ( OCCLUSION + 1 ) ,
	TIMESTAMP_DISJOINT	= ( TIMESTAMP + 1 ) ,
	PIPELINE_STATISTICS	= ( TIMESTAMP_DISJOINT + 1 ) ,
	OCCLUSION_PREDICATE	= ( PIPELINE_STATISTICS + 1 ) ,
	SO_STATISTICS	= ( OCCLUSION_PREDICATE + 1 ) ,
	SO_OVERFLOW_PREDICATE	= ( SO_STATISTICS + 1 ) ,
	SO_STATISTICS_STREAM0	= ( SO_OVERFLOW_PREDICATE + 1 ) ,
	SO_OVERFLOW_PREDICATE_STREAM0	= ( SO_STATISTICS_STREAM0 + 1 ) ,
	SO_STATISTICS_STREAM1	= ( SO_OVERFLOW_PREDICATE_STREAM0 + 1 ) ,
	SO_OVERFLOW_PREDICATE_STREAM1	= ( SO_STATISTICS_STREAM1 + 1 ) ,
	SO_STATISTICS_STREAM2	= ( SO_OVERFLOW_PREDICATE_STREAM1 + 1 ) ,
	SO_OVERFLOW_PREDICATE_STREAM2	= ( SO_STATISTICS_STREAM2 + 1 ) ,
	SO_STATISTICS_STREAM3	= ( SO_OVERFLOW_PREDICATE_STREAM2 + 1 ) ,
	SO_OVERFLOW_PREDICATE_STREAM3	= ( SO_STATISTICS_STREAM3 + 1 ) 
}

enum D3D11_QUERY_MISC_FLAG : uint
{
	PREDICATEHINT	= 0x1
}

enum D3D11_COUNTER : uint
{
	DEVICE_DEPENDENT_0	= 0x40000000
}

enum D3D11_COUNTER_TYPE : uint
{
	FLOAT32	= 0,
	UINT16	= ( FLOAT32 + 1 ) ,
	UINT32	= ( UINT16 + 1 ) ,
	UINT64	= ( UINT32 + 1 ) 
}

enum D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS : uint
{
	STANDARD_MULTISAMPLE_PATTERN	= 0xffffffff,
	CENTER_MULTISAMPLE_PATTERN	= 0xfffffffe
}

enum D3D11_DEVICE_CONTEXT_TYPE : uint
{
	IMMEDIATE	= 0,
	DEFERRED	= ( IMMEDIATE + 1 ) 
} 

enum D3D11_FEATURE : uint
{
	THREADING	= 0,
	DOUBLES	= ( THREADING + 1 ) ,
	FORMAT_SUPPORT	= ( DOUBLES + 1 ) ,
	FORMAT_SUPPORT2	= ( FORMAT_SUPPORT + 1 ) ,
	D3D10_X_HARDWARE_OPTIONS	= ( FORMAT_SUPPORT2 + 1 ) ,
	D3D11_OPTIONS	= ( D3D10_X_HARDWARE_OPTIONS + 1 ) ,
	ARCHITECTURE_INFO	= ( D3D11_OPTIONS + 1 ) ,
	D3D9_OPTIONS	= ( ARCHITECTURE_INFO + 1 ) ,
	SHADER_MIN_PRECISION_SUPPORT	= ( D3D9_OPTIONS + 1 ) ,
	D3D9_SHADOW_SUPPORT	= ( SHADER_MIN_PRECISION_SUPPORT + 1 ) ,
	D3D11_OPTIONS1	= ( D3D9_SHADOW_SUPPORT + 1 ) ,
	D3D9_SIMPLE_INSTANCING_SUPPORT	= ( D3D11_OPTIONS1 + 1 ) ,
	MARKER_SUPPORT	= ( D3D9_SIMPLE_INSTANCING_SUPPORT + 1 ) ,
	D3D9_OPTIONS1	= ( MARKER_SUPPORT + 1 ) ,
	D3D11_OPTIONS2	= ( D3D9_OPTIONS1 + 1 ) ,
	D3D11_OPTIONS3	= ( D3D11_OPTIONS2 + 1 ) ,
	GPU_VIRTUAL_ADDRESS_SUPPORT	= ( D3D11_OPTIONS3 + 1 ) ,
	D3D11_OPTIONS4	= ( GPU_VIRTUAL_ADDRESS_SUPPORT + 1 ) ,
	SHADER_CACHE	= ( D3D11_OPTIONS4 + 1 ) 
}

enum D3D11_SHADER_MIN_PRECISION_SUPPORT : uint
{
	PRECISION_10_BIT	= 0x1,
	PRECISION_16_BIT	= 0x2
}

enum D3D11_TILED_RESOURCES_TIER : uint
{
	NOT_SUPPORTED	= 0,
	TIER_1	= 1,
	TIER_2	= 2,
	TIER_3	= 3
}

enum D3D11_CONSERVATIVE_RASTERIZATION_TIER : uint
{
	NOT_SUPPORTED	= 0,
	TIER_1	= 1,
	TIER_2	= 2,
	TIER_3	= 3
}

enum D3D11_SHADER_CACHE_SUPPORT_FLAGS : uint
{
	NONE	= 0,
	AUTOMATIC_INPROC_CACHE	= 0x1,
	AUTOMATIC_DISK_CACHE	= 0x2
}

enum D3D11_VIDEO_DECODER_BUFFER_TYPE : uint
{
	PICTURE_PARAMETERS	= 0,
	MACROBLOCK_CONTROL	= 1,
	RESIDUAL_DIFFERENCE	= 2,
	DEBLOCKING_CONTROL	= 3,
	INVERSE_QUANTIZATION_MATRIX	= 4,
	SLICE_CONTROL	= 5,
	BITSTREAM	= 6,
	MOTION_VECTOR	= 7,
	FILM_GRAIN	= 8
}

enum D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT : uint
{
	INPUT	= 0x1,
	OUTPUT	= 0x2
}

enum D3D11_VIDEO_PROCESSOR_DEVICE_CAPS : uint
{
	LINEAR_SPACE	= 0x1,
	xvYCC	= 0x2,
	RGB_RANGE_CONVERSION	= 0x4,
	YCbCr_MATRIX_CONVERSION	= 0x8,
	NOMINAL_RANGE	= 0x10
}

enum D3D11_VIDEO_PROCESSOR_FEATURE_CAPS : uint
{
	ALPHA_FILL	= 0x1,
	CONSTRICTION	= 0x2,
	LUMA_KEY	= 0x4,
	ALPHA_PALETTE	= 0x8,
	LEGACY	= 0x10,
	STEREO	= 0x20,
	ROTATION	= 0x40,
	ALPHA_STREAM	= 0x80,
	PIXEL_ASPECT_RATIO	= 0x100,
	MIRROR	= 0x200,
	SHADER_USAGE	= 0x400,
	METADATA_HDR10	= 0x800
}

enum CAPS : uint
{
	BRIGHTNESS	= 0x1,
	CONTRAST	= 0x2,
	HUE	= 0x4,
	SATURATION	= 0x8,
	NOISE_REDUCTION	= 0x10,
	EDGE_ENHANCEMENT	= 0x20,
	ANAMORPHIC_SCALING	= 0x40,
	STEREO_ADJUSTMENT	= 0x80
}

enum D3D11_VIDEO_PROCESSOR_FORMAT_CAPS : uint
{
	RGB_INTERLACED	= 0x1,
	RGB_PROCAMP	= 0x2,
	RGB_LUMA_KEY	= 0x4,
	PALETTE_INTERLACED	= 0x8
}

enum D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS : uint
{
	DENOISE	= 0x1,
	DERINGING	= 0x2,
	EDGE_ENHANCEMENT	= 0x4,
	COLOR_CORRECTION	= 0x8,
	FLESH_TONE_MAPPING	= 0x10,
	IMAGE_STABILIZATION	= 0x20,
	SUPER_RESOLUTION	= 0x40,
	ANAMORPHIC_SCALING	= 0x80
}

enum D3D11_VIDEO_PROCESSOR_STEREO_CAPS : uint
{
	MONO_OFFSET	= 0x1,
	ROW_INTERLEAVED	= 0x2,
	COLUMN_INTERLEAVED	= 0x4,
	CHECKERBOARD	= 0x8,
	FLIP_MODE	= 0x10
}

enum D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS : uint
{
	DEINTERLACE_BLEND	= 0x1,
	DEINTERLACE_BOB	= 0x2,
	DEINTERLACE_ADAPTIVE	= 0x4,
	DEINTERLACE_MOTION_COMPENSATION	= 0x8,
	INVERSE_TELECINE	= 0x10,
	FRAME_RATE_CONVERSION	= 0x20
}

enum D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS : uint
{
	CAPS_32	= 0x1,
	CAPS_22	= 0x2,
	CAPS_2224	= 0x4,
	CAPS_2332	= 0x8,
	CAPS_32322	= 0x10,
	CAPS_55	= 0x20,
	CAPS_64	= 0x40,
	CAPS_87	= 0x80,
	CAPS_222222222223	= 0x100,
	CAPS_OTHER	= 0x80000000
}

enum D3D11_CONTENT_PROTECTION_CAPS : uint
{
	SOFTWARE	= 0x1,
	HARDWARE	= 0x2,
	PROTECTION_ALWAYS_ON	= 0x4,
	PARTIAL_DECRYPTION	= 0x8,
	CONTENT_KEY	= 0x10,
	FRESHEN_SESSION_KEY	= 0x20,
	ENCRYPTED_READ_BACK	= 0x40,
	ENCRYPTED_READ_BACK_KEY	= 0x80,
	SEQUENTIAL_CTR_IV	= 0x100,
	ENCRYPT_SLICEDATA_ONLY	= 0x200,
	DECRYPTION_BLT	= 0x400,
	HARDWARE_PROTECT_UNCOMPRESSED	= 0x800,
	HARDWARE_PROTECTED_MEMORY_PAGEABLE	= 0x1000,
	HARDWARE_TEARDOWN	= 0x2000,
	HARDWARE_DRM_COMMUNICATION	= 0x4000
}

enum D3D11_VIDEO_PROCESSOR_FILTER : uint
{
	BRIGHTNESS	= 0,
	CONTRAST	= 1,
	HUE	= 2,
	SATURATION	= 3,
	NOISE_REDUCTION	= 4,
	EDGE_ENHANCEMENT	= 5,
	ANAMORPHIC_SCALING	= 6,
	STEREO_ADJUSTMENT	= 7
}

enum D3D11_VIDEO_FRAME_FORMAT : uint
{
	PROGRESSIVE	= 0,
	INTERLACED_TOP_FIELD_FIRST	= 1,
	INTERLACED_BOTTOM_FIELD_FIRST	= 2
}

enum D3D11_VIDEO_USAGE : uint
{
	D3D11_VIDEO_USAGE_PLAYBACK_NORMAL	= 0,
	D3D11_VIDEO_USAGE_OPTIMAL_SPEED	= 1,
	D3D11_VIDEO_USAGE_OPTIMAL_QUALITY	= 2
}

enum D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE : uint
{
	RANGE_UNDEFINED	= 0,
	RANGE_16_235	= 1,
	RANGE_0_255	= 2
}

enum D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE : uint
{
	OPAQUE	= 0,
	BACKGROUND	= 1,
	DESTINATION	= 2,
	SOURCE_STREAM	= 3
}

enum D3D11_VIDEO_PROCESSOR_OUTPUT_RATE : uint
{
	NORMAL	= 0,
	HALF	= 1,
	CUSTOM	= 2
}

enum D3D11_VIDEO_PROCESSOR_STEREO_FORMAT : uint
{
	MONO	= 0,
	HORIZONTAL	= 1,
	VERTICAL	= 2,
	SEPARATE	= 3,
	MONO_OFFSET	= 4,
	ROW_INTERLEAVED	= 5,
	COLUMN_INTERLEAVED	= 6,
	CHECKERBOARD	= 7
}

enum D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE : uint
{
	NONE	= 0,
	FRAME0	= 1,
	FRAME1	= 2
}

enum D3D11_VIDEO_PROCESSOR_ROTATION : uint
{
	ROTATION_IDENTITY	= 0,
	ROTATION_90	= 1,
	ROTATION_180	= 2,
	ROTATION_270	= 3
}

enum D3D11_AUTHENTICATED_CHANNEL_TYPE : uint
{
	D3D11	= 1,
	DRIVER_SOFTWARE	= 2,
	DRIVER_HARDWARE	= 3
}

enum D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE : uint
{
	UNKNOWN	= 0,
	DWM	= 1,
	HANDLE	= 2
}

enum D3D11_BUS_TYPE : uint
{
	TYPE_OTHER	= 0,
	TYPE_PCI	= 0x1,
	TYPE_PCIX	= 0x2,
	TYPE_PCIEXPRESS	= 0x3,
	TYPE_AGP	= 0x4,
	IMPL_MODIFIER_INSIDE_OF_CHIPSET	= 0x10000,
	IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP	= 0x20000,
	IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET	= 0x30000,
	IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR	= 0x40000,
	IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE	= 0x50000,
	IMPL_MODIFIER_NON_STANDARD	= 0x80000000
}

enum D3D11_VDOV_DIMENSION : uint
{
	UNKNOWN	= 0,
	TEXTURE2D	= 1
}

enum D3D11_VPIV_DIMENSION : uint
{
	UNKNOWN	= 0,
	TEXTURE2D	= 1
}

enum D3D11_VPOV_DIMENSION : uint
{
	UNKNOWN	= 0,
	TEXTURE2D	= 1,
	TEXTURE2DARRAY	= 2
}

enum D3D11_CREATE_DEVICE_FLAG : uint
{
	SINGLETHREADED	= 0x1,
	DEBUG	= 0x2,
	SWITCH_TO_REF	= 0x4,
	PREVENT_INTERNAL_THREADING_OPTIMIZATIONS	= 0x8,
	BGRA_SUPPORT	= 0x20,
	DEBUGGABLE	= 0x40,
	PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY	= 0x80,
	DISABLE_GPU_TIMEOUT	= 0x100,
	VIDEO_SUPPORT	= 0x800
}

///
/// Structures
///

alias RECT D3D11_RECT;

struct CD3D11_DEFAULT {};

struct D3D11_BOX {
	uint left;
	uint top;
	uint front;
	uint right;
	uint bottom;
	uint back;
}

struct D3D11_COUNTER_DESC {
	D3D11_COUNTER Counter;
	uint MiscFlags;
}

struct D3D11_COUNTER_INFO {
	D3D11_COUNTER LastDeviceDependentCounter;
	uint          NumSimultaneousCounters;
	ubyte         NumDetectableParallelUnits;
}

struct D3D11_DEPTH_STENCIL_DESC {
	bool                       DepthEnable;
	D3D11_DEPTH_WRITE_MASK     DepthWriteMask;
	D3D11_COMPARISON_FUNC      DepthFunc;
	bool                       StencilEnable;
	ubyte                      StencilReadMask;
	ubyte                      StencilWriteMask;
	D3D11_DEPTH_STENCILOP_DESC FrontFace;
	D3D11_DEPTH_STENCILOP_DESC BackFace;
}

struct D3D11_DEPTH_STENCILOP_DESC {
	D3D11_STENCIL_OP      StencilFailOp;
	D3D11_STENCIL_OP      StencilDepthFailOp;
	D3D11_STENCIL_OP      StencilPassOp;
	D3D11_COMPARISON_FUNC StencilFunc;
}

struct DATA_D3D10_X_HARDWARE_OPTIONS {
	bool ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
}

struct DATA_DOUBLES {
	bool DoublePrecisionFloatShaderOps;
}

struct DATA_FORMAT_SUPPORT {
	DXGI_FORMAT InFormat;
	uint OutFormatSupport;
}

struct DATA_FORMAT_SUPPORT2 {
	DXGI_FORMAT InFormat;
	uint OutFormatSupport2;
}

struct DATA_THREADING {
	bool DriverConcurrentCreates;
	bool DriverCommandLists;
}

struct D3D11_INPUT_ELEMENT_DESC {
	const(char)*			   SemanticName;
	uint                       SemanticIndex;
	DXGI_FORMAT                Format;
	uint                       InputSlot;
	uint                       AlignedByteOffset;
	D3D11_INPUT_CLASSIFICATION InputSlotClass;
	uint                       InstanceDataStepRate;
}

struct DATA_PIPELINE_STATISTICS {
	ulong IAVertices;
	ulong IAPrimitives;
	ulong VSInvocations;
	ulong GSInvocations;
	ulong GSPrimitives;
	ulong CInvocations;
	ulong CPrimitives;
	ulong PSInvocations;
	ulong HSInvocations;
	ulong DSInvocations;
	ulong CSInvocations;
}

struct DATA_SO_STATISTICS {
	ulong NumPrimitivesWritten;
	ulong PrimitivesStorageNeeded;
}

struct DATA_TIMESTAMP_DISJOINT {
	ulong Frequency;
	bool Disjoint;
}

struct D3D11_QUERY_DESC {
	D3D11_QUERY Query;
	uint MiscFlags;
}

struct D3D11_RASTERIZER_DESC {
	D3D11_FILL_MODE FillMode;
	D3D11_CULL_MODE CullMode;
	bool            FrontCounterClockwise;
	int             DepthBias;
	float           DepthBiasClamp;
	float           SlopeScaledDepthBias;
	bool            DepthClipEnable;
	bool            ScissorEnable;
	bool            MultisampleEnable;
	bool            AntialiasedLineEnable;
}

struct D3D11_RENDER_TARGET_BLEND_DESC {
	bool           BlendEnable;
	D3D11_BLEND    SrcBlend;
	D3D11_BLEND    DestBlend;
	D3D11_BLEND_OP BlendOp;
	D3D11_BLEND    SrcBlendAlpha;
	D3D11_BLEND    DestBlendAlpha;
	D3D11_BLEND_OP BlendOpAlpha;
	ubyte          RenderTargetWriteMask;
}

struct D3D11_BLEND_DESC {
	bool AlphaToCoverageEnable;
	bool IndependentBlendEnable;
	D3D11_RENDER_TARGET_BLEND_DESC[8] RenderTarget;
}

struct D3D11_SAMPLER_DESC {
	D3D11_FILTER               Filter;
	D3D11_TEXTURE_ADDRESS_MODE AddressU;
	D3D11_TEXTURE_ADDRESS_MODE AddressV;
	D3D11_TEXTURE_ADDRESS_MODE AddressW;
	float                      MipLODBias;
	uint                       MaxAnisotropy;
	D3D11_COMPARISON_FUNC      ComparisonFunc;
	float[4]                   BorderColor;
	float                      MinLOD;
	float                      MaxLOD;
}

struct D3D11_SO_DECLARATION_ENTRY {
	uint   Stream;
	const(char)* SemanticName;
	uint   SemanticIndex;
	ubyte   StartComponent;
	ubyte   ComponentCount;
	ubyte   OutputSlot;
}

struct D3D11_VIEWPORT {
	float TopLeftX;
	float TopLeftY;
	float Width;
	float Height;
	float MinDepth;
	float MaxDepth;
}

struct DATA_ARCHITECTURE_INFO {
	bool TileBasedDeferredRenderer;
}

struct DATA_D3D9_OPTIONS {
	bool FullNonPow2TextureSupport;
}

struct DATA_D3D9_SHADOW_SUPPORT {
	bool SupportsDepthAsTextureWithLessEqualComparisonFilter;
}

struct DATA_D3D11_OPTIONS {
	bool OutputMergerLogicOp;
	bool UAVOnlyRenderingForcedSampleCount;
	bool DiscardAPIsSeenByDriver;
	bool FlagsForUpdateAndCopySeenByDriver;
	bool ClearView;
	bool CopyWithOverlap;
	bool ConstantBufferPartialUpdate;
	bool ConstantBufferOffsetting;
	bool MapNoOverwriteOnDynamicConstantBuffer;
	bool MapNoOverwriteOnDynamicBufferSRV;
	bool MultisampleRTVWithForcedSampleCountOne;
	bool SAD4ShaderInstructions;
	bool ExtendedDoublesShaderInstructions;
	bool ExtendedResourceSharing;
}

struct DATA_SHADER_MIN_PRECISION_SUPPORT {
	uint PixelShaderMinPrecision;
	uint AllOtherShaderStagesMinPrecision;
}

struct DATA_D3D9_SIMPLE_INSTANCING_SUPPORT {
	bool SimpleInstancingSupported;
}

struct DATA_D3D11_OPTIONS1 {
	D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
	bool MinMaxFiltering;
	bool ClearViewAlsoSupportsDepthOnlyFormats;
	bool MapOnDefaultBuffers;
}

struct DATA_MARKER_SUPPORT {
	bool Profile;
}

struct D3D11_BUFFER_DESC {
	uint ByteWidth;
	D3D11_USAGE Usage;
	uint BindFlags;
	uint CPUAccessFlags;
	uint MiscFlags;
	uint StructureByteStride;
}

struct D3D11_BUFFER_RTV {
	union {
		uint FirstElement;
		uint ElementOffset;
	};
	union {
		uint NumElements;
		uint ElementWidth;
	};
}

struct D3D11_BUFFER_SRV {
	union {
		uint FirstElement;
		uint ElementOffset;
	};
	union {
		uint NumElements;
		uint ElementWidth;
	};
}

struct D3D11_BUFFER_UAV {
	uint FirstElement;
	uint NumElements;
	uint Flags;
}

struct D3D11_BUFFEREX_SRV {
	uint FirstElement;
	uint NumElements;
	uint Flags;
}

struct D3D11_DEPTH_STENCIL_VIEW_DESC {
	DXGI_FORMAT         Format;
	D3D11_DSV_DIMENSION ViewDimension;
	uint                Flags;
	union {
		D3D11_TEX1D_DSV         Texture1D;
		D3D11_TEX1D_ARRAY_DSV   Texture1DArray;
		D3D11_TEX2D_DSV         Texture2D;
		D3D11_TEX2D_ARRAY_DSV   Texture2DArray;
		D3D11_TEX2DMS_DSV       Texture2DMS;
		D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
	};
}

struct D3D11_MAPPED_SUBRESOURCE {
	void *pData;
	uint RowPitch;
	uint DepthPitch;
}

struct D3D11_RENDER_TARGET_VIEW_DESC {
	DXGI_FORMAT         Format;
	D3D11_RTV_DIMENSION ViewDimension;
	union {
		D3D11_BUFFER_RTV        Buffer;
		D3D11_TEX1D_RTV         Texture1D;
		D3D11_TEX1D_ARRAY_RTV   Texture1DArray;
		D3D11_TEX2D_RTV         Texture2D;
		D3D11_TEX2D_ARRAY_RTV   Texture2DArray;
		D3D11_TEX2DMS_RTV       Texture2DMS;
		D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
		D3D11_TEX3D_RTV         Texture3D;
	};
}

struct D3D11_SHADER_RESOURCE_VIEW_DESC {
	DXGI_FORMAT         Format;
	D3D11_SRV_DIMENSION ViewDimension;
	union {
		D3D11_BUFFER_SRV        Buffer;
		D3D11_TEX1D_SRV         Texture1D;
		D3D11_TEX1D_ARRAY_SRV   Texture1DArray;
		D3D11_TEX2D_SRV         Texture2D;
		D3D11_TEX2D_ARRAY_SRV   Texture2DArray;
		D3D11_TEX2DMS_SRV       Texture2DMS;
		D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
		D3D11_TEX3D_SRV         Texture3D;
		D3D11_TEXCUBE_SRV       TextureCube;
		D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
		D3D11_BUFFEREX_SRV      BufferEx;
	};
}

struct D3D11_SUBRESOURCE_DATA {
	const void *pSysMem;
	uint SysMemPitch;
	uint SysMemSlicePitch;
}

struct D3D11_TEX1D_ARRAY_DSV {
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX1D_ARRAY_RTV {
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX1D_ARRAY_SRV {
	uint MostDetailedMip;
	uint MipLevels;
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX1D_ARRAY_UAV {
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX1D_DSV {
	uint MipSlice;
}

struct D3D11_TEX1D_RTV {
	uint MipSlice;
}

struct D3D11_TEX1D_SRV {
	uint MostDetailedMip;
	uint MipLevels;
}

struct D3D11_TEX1D_UAV {
	uint MipSlice;
}

struct D3D11_TEX2D_ARRAY_DSV {
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX2D_ARRAY_RTV {
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX2D_ARRAY_SRV {
	uint MostDetailedMip;
	uint MipLevels;
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX2D_ARRAY_UAV {
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX2D_DSV {
	uint MipSlice;
}

struct D3D11_TEX2D_RTV {
	uint MipSlice;
}

struct D3D11_TEX2D_SRV {
	uint MostDetailedMip;
	uint MipLevels;
}

struct D3D11_TEX2D_UAV {
	uint MipSlice;
}

struct D3D11_TEX2DMS_ARRAY_DSV {
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX2DMS_ARRAY_RTV {
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX2DMS_ARRAY_SRV {
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX2DMS_DSV {
	uint UnusedField_NothingToDefine;
}

struct D3D11_TEX2DMS_RTV {
	uint UnusedField_NothingToDefine;
}

struct D3D11_TEX2DMS_SRV {
	uint UnusedField_NothingToDefine;
}

struct D3D11_TEX3D_RTV {
	uint MipSlice;
	uint FirstWSlice;
	uint WSize;
}

struct D3D11_TEX3D_SRV {
	uint MostDetailedMip;
	uint MipLevels;
}

struct D3D11_TEX3D_UAV {
	uint MipSlice;
	uint FirstWSlice;
	uint WSize;
}

struct D3D11_TEXCUBE_ARRAY_SRV {
	uint MostDetailedMip;
	uint MipLevels;
	uint First2DArrayFace;
	uint NumCubes;
}

struct D3D11_TEXCUBE_SRV {
	uint MostDetailedMip;
	uint MipLevels;
}

struct D3D11_TEXTURE1D_DESC {
	uint Width;
	uint MipLevels;
	uint ArraySize;
	DXGI_FORMAT Format;
	D3D11_USAGE Usage;
	uint BindFlags;
	uint CPUAccessFlags;
	uint MiscFlags;
}

struct D3D11_TEXTURE2D_DESC {
	uint Width;
	uint Height;
	uint MipLevels;
	uint ArraySize;
	DXGI_FORMAT Format;
	DXGI_SAMPLE_DESC SampleDesc;
	D3D11_USAGE Usage;
	uint BindFlags;
	uint CPUAccessFlags;
	uint MiscFlags;
}

struct D3D11_TEXTURE3D_DESC {
	uint Width;
	uint Height;
	uint Depth;
	uint MipLevels;
	DXGI_FORMAT Format;
	D3D11_USAGE Usage;
	uint BindFlags;
	uint CPUAccessFlags;
	uint MiscFlags;
}

struct D3D11_UNORDERED_ACCESS_VIEW_DESC {
	DXGI_FORMAT         Format;
	D3D11_UAV_DIMENSION ViewDimension;
	union {
		D3D11_BUFFER_UAV      Buffer;
		D3D11_TEX1D_UAV       Texture1D;
		D3D11_TEX1D_ARRAY_UAV Texture1DArray;
		D3D11_TEX2D_UAV       Texture2D;
		D3D11_TEX2D_ARRAY_UAV Texture2DArray;
		D3D11_TEX3D_UAV       Texture3D;
	};
}

struct D3D11_CLASS_INSTANCE_DESC {
	uint InstanceId;
	uint InstanceIndex;
	uint TypeId;
	uint ConstantBuffer;
	uint BaseConstantBufferOffset;
	uint BaseTexture;
	uint BaseSampler;
	bool Created;
}

struct D3D11_VIDEO_DECODER_DESC
{
    GUID Guid;
    uint SampleWidth;
    uint SampleHeight;
    DXGI_FORMAT OutputFormat;
}

struct D3D11_VIDEO_DECODER_CONFIG
{
    GUID guidConfigBitstreamEncryption;
    GUID guidConfigMBcontrolEncryption;
    GUID guidConfigResidDiffEncryption;
    uint ConfigBitstreamRaw;
    uint ConfigMBcontrolRasterOrder;
    uint ConfigResidDiffHost;
    uint ConfigSpatialResid8;
    uint ConfigResid8Subtraction;
    uint ConfigSpatialHost8or9Clipping;
    uint ConfigSpatialResidInterleaved;
    uint ConfigIntraResidUnsigned;
    uint ConfigResidDiffAccelerator;
    uint ConfigHostInverseScan;
    uint ConfigSpecificIDCT;
    uint Config4GroupedCoefs;
    ushort ConfigMinRenderTargetBuffCount;
    ushort ConfigDecoderSpecific;
}

struct D3D11_ENCRYPTED_BLOCK_INFO
{
    uint NumEncryptedBytesAtBeginning;
    uint NumBytesInSkipPattern;
    uint NumBytesInEncryptPattern;
}

struct D3D11_VIDEO_DECODER_BUFFER_DESC
{
    D3D11_VIDEO_DECODER_BUFFER_TYPE BufferType;
    uint BufferIndex;
    uint DataOffset;
    uint DataSize;
    uint FirstMBaddress;
    uint NumMBsInBuffer;
    uint Width;
    uint Height;
    uint Stride;
    uint ReservedBits;
	void *pIV;
    uint IVSize;
    bool PartialEncryption;
    D3D11_ENCRYPTED_BLOCK_INFO EncryptedBlockInfo;
}

struct D3D11_VIDEO_DECODER_EXTENSION
{
    uint Function;
	void *pPrivateInputData;
    uint PrivateInputDataSize;
	void *pPrivateOutputData;
    uint PrivateOutputDataSize;
    uint ResourceCount;
	ID3D11Resource *ppResourceList;
}

struct D3D11_VIDEO_PROCESSOR_CAPS
{
    uint DeviceCaps;
    uint FeatureCaps;
    uint FilterCaps;
    uint InputFormatCaps;
    uint AutoStreamCaps;
    uint StereoCaps;
    uint RateConversionCapsCount;
    uint MaxInputStreams;
    uint MaxStreamStates;
}

struct D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS
{
    uint PastFrames;
    uint FutureFrames;
    uint ProcessorCaps;
    uint ITelecineCaps;
	uint CustomRateCount;
}

struct D3D11_VIDEO_CONTENT_PROTECTION_CAPS
{
    uint Caps;
    uint KeyExchangeTypeCount;
    uint BlockAlignmentSize;
    ulong ProtectedMemorySize;
}

struct D3D11_VIDEO_PROCESSOR_CUSTOM_RATE
{
    DXGI_RATIONAL CustomRate;
    uint OutputFrames;
    bool InputInterlaced;
    uint InputFramesOrFields;
}

struct D3D11_VIDEO_PROCESSOR_FILTER_RANGE
{
    int Minimum;
    int Maximum;
    int Default;
    float Multiplier;
}

struct D3D11_VIDEO_PROCESSOR_CONTENT_DESC
{
    D3D11_VIDEO_FRAME_FORMAT InputFrameFormat;
    DXGI_RATIONAL InputFrameRate;
    uint InputWidth;
    uint InputHeight;
    DXGI_RATIONAL OutputFrameRate;
    uint OutputWidth;
    uint OutputHeight;
    D3D11_VIDEO_USAGE Usage;
}

struct D3D11_VIDEO_COLOR_RGBA
{
    float R;
    float G;
    float B;
    float A;
}

struct D3D11_VIDEO_COLOR_YCbCrA
    {
    float Y;
    float Cb;
    float Cr;
    float A;
}

struct D3D11_VIDEO_COLOR
{
    union 
    {
        D3D11_VIDEO_COLOR_YCbCrA YCbCr;
        D3D11_VIDEO_COLOR_RGBA RGBA;
	};
}

struct D3D11_VIDEO_PROCESSOR_COLOR_SPACE
{
    uint Usage = 1;
    uint RGB_Range = 1;
    uint YCbCr_Matrix = 1;
    uint YCbCr_xvYCC = 1;
    uint Nominal_Range = 2;
    uint Reserved = 26;
}

struct D3D11_VIDEO_PROCESSOR_STREAM
{
    bool Enable;
    uint OutputIndex;
    uint InputFrameOrField;
    uint PastFrames;
    uint FutureFrames;
	ID3D11VideoProcessorInputView *ppPastSurfaces;
    ID3D11VideoProcessorInputView pInputSurface;
	ID3D11VideoProcessorInputView *ppFutureSurfaces;
	ID3D11VideoProcessorInputView *ppPastSurfacesRight;
    ID3D11VideoProcessorInputView pInputSurfaceRight;
	ID3D11VideoProcessorInputView *ppFutureSurfacesRight;
}

struct D3D11_OMAC
{
    ubyte[16] Omac;
}

struct D3D11_AUTHENTICATED_QUERY_INPUT
{
    GUID QueryType;
    HANDLE hChannel;
    uint SequenceNumber;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT
{
    D3D11_OMAC omac;
    GUID QueryType;
    HANDLE hChannel;
    uint SequenceNumber;
    HRESULT ReturnCode;
}

union D3D11_AUTHENTICATED_PROTECTION_FLAGS
{
    struct Flags
	{
        uint ProtectionEnabled = 1;
        uint OverlayOrFullscreenRequired = 1;
        uint Reserved = 30;
	};
    uint Value;
}

struct D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    D3D11_AUTHENTICATED_PROTECTION_FLAGS ProtectionFlags;
}

struct D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType;
}

struct D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    HANDLE DeviceHandle;
}

struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT
{
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    HANDLE DecoderHandle;
}

struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    HANDLE DecoderHandle;
    HANDLE CryptoSessionHandle;
    HANDLE DeviceHandle;
}

struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    uint RestrictedSharedResourceProcessCount;
}

struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT
{
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    uint ProcessIndex;
}

struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    uint ProcessIndex;
    D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessIdentifier;
    HANDLE ProcessHandle;
}

struct D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT
{
	D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    uint UnrestrictedProtectedSharedResourceCount;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT
{
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
    uint OutputIDCount;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT
{
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
    uint OutputIDIndex;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
    uint OutputIDIndex;
    ulong OutputID;
}

struct D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    D3D11_BUS_TYPE BusType;
    BOOL AccessibleInContiguousBlocks;
    BOOL AccessibleInNonContiguousBlocks;
}

struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    uint EncryptionGuidCount;
}

struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT
{
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    uint EncryptionGuidIndex;
}

struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    uint EncryptionGuidIndex;
    GUID EncryptionGuid;
}

struct D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT
{
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    GUID EncryptionGuid;
}

struct D3D11_AUTHENTICATED_CONFIGURE_INPUT
{
    D3D11_OMAC omac;
    GUID ConfigureType;
    HANDLE hChannel;
    uint SequenceNumber;
}

struct D3D11_AUTHENTICATED_CONFIGURE_OUTPUT
{
    D3D11_OMAC omac;
    GUID ConfigureType;
    HANDLE hChannel;
    uint SequenceNumber;
    HRESULT ReturnCode;
}

struct D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT
{
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    uint StartSequenceQuery;
    uint StartSequenceConfigure;
}

struct D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT
{
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    D3D11_AUTHENTICATED_PROTECTION_FLAGS Protections;
}

struct D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT
{
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    HANDLE DecoderHandle;
    HANDLE CryptoSessionHandle;
    HANDLE DeviceHandle;
}

struct D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT
{
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessType;
    HANDLE ProcessHandle;
    BOOL AllowAccess;
}

struct D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT
{
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    GUID EncryptionGuid;
}

struct D3D11_TEX2D_VDOV
{
    uint ArraySlice;
}

struct D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC
{
    GUID DecodeProfile;
    D3D11_VDOV_DIMENSION ViewDimension;
    union 
	{
        D3D11_TEX2D_VDOV Texture2D;
	};
}

struct D3D11_TEX2D_VPIV
{
    uint MipSlice;
    uint ArraySlice;
}

struct D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC
{
    uint FourCC;
    D3D11_VPIV_DIMENSION ViewDimension;
    union 
	{
        D3D11_TEX2D_VPIV Texture2D;
	};
}

struct D3D11_TEX2D_VPOV
{
    uint MipSlice;
}

struct D3D11_TEX2D_ARRAY_VPOV
{
    uint MipSlice;
    uint FirstArraySlice;
    uint ArraySize;
}

struct D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC
{
    D3D11_VPOV_DIMENSION ViewDimension;
    union 
	{
        D3D11_TEX2D_VPOV Texture2D;
        D3D11_TEX2D_ARRAY_VPOV Texture2DArray;
	};
}

///
/// Interfaces
///

mixin(uuid!(ID3D11Asynchronous, "4b35d0cd-1e15-4258-9c98-1b1333f6dd3b"));
public interface ID3D11Asynchronous : ID3D11DeviceChild
{
extern(Windows):
	uint GetDataSize();
}

mixin(uuid!(ID3D11BlendState, "75b68faa-347d-4159-8f45-a0640f01cd9a"));
public interface ID3D11BlendState : ID3D11DeviceChild
{
extern(Windows):
	void GetDesc(D3D11_BLEND_DESC *pDesc);
}

mixin(uuid!(ID3D11Counter, "6e8c49fb-a371-4770-b440-29086022b741"));
public interface ID3D11Counter : ID3D11Asynchronous
{
extern(Windows):
	void GetDesc(D3D11_COUNTER_DESC *pDesc);
}

mixin(uuid!(ID3D11CommandList, "a24bc4d1-769e-43f7-8013-98ff566c18e2"));
public interface ID3D11CommandList : ID3D11DeviceChild
{
extern(Windows):
	uint GetContextFlags();
}

mixin(uuid!(ID3D11DepthStencilState, "03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1"));
public interface ID3D11DepthStencilState : ID3D11DeviceChild
{
extern(Windows):
	void GetDesc(D3D11_DEPTH_STENCIL_DESC *pDesc);
}

mixin(uuid!(ID3D11Device, "db6f6ddb-ac77-4e88-8253-819df9bbf140"));
public interface ID3D11Device : IUnknown
{
extern(Windows):
	void GetDesc(D3D11_DEPTH_STENCIL_DESC *pDesc);
	HRESULT CheckCounter(const D3D11_COUNTER_DESC *pDesc, D3D11_COUNTER_TYPE *pType, uint *pActiveCounters, char* szName, uint* pNameLength, char* szUnits, uint* pUnitsLength, char* szDescription, uint* pDescriptionLength);
	void CheckCounterInfo(D3D11_COUNTER_INFO *pCounterInfo);
	HRESULT CheckFeatureSupport(D3D11_FEATURE Feature, void *pFeatureSupportData, uint FeatureSupportDataSize);
	HRESULT CheckFormatSupport(DXGI_FORMAT Format, uint* pFormatSupport);
	HRESULT CheckMultisampleQualityLevels(DXGI_FORMAT Format, uint SampleCount, uint *pNumQualityLevels);
	HRESULT CreateBlendState(const D3D11_BLEND_DESC *pBlendStateDesc, ID3D11BlendState *ppBlendState);
	HRESULT CreateBuffer(const D3D11_BUFFER_DESC *pDesc, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Buffer *ppBuffer);
	HRESULT CreateClassLinkage(ID3D11ClassLinkage *ppLinkage);
	HRESULT CreateComputeShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11ComputeShader *ppComputeShader);
	HRESULT CreateCounter(const D3D11_COUNTER_DESC *pCounterDesc, ID3D11Counter *ppCounter);
	HRESULT CreateDeferredContext(uint ContextFlags, ID3D11DeviceContext *ppDeferredContext);
	HRESULT CreateDepthStencilState(const D3D11_DEPTH_STENCIL_DESC *pDepthStencilDesc, ID3D11DepthStencilState *ppDepthStencilState);
	HRESULT CreateDepthStencilView(ID3D11Resource pResource, const D3D11_DEPTH_STENCIL_VIEW_DESC *pDesc, ID3D11DepthStencilView *ppDepthStencilView);
	HRESULT CreateDomainShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11DomainShader *ppDomainShader);
	HRESULT CreateGeometryShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader *ppGeometryShader);
	HRESULT CreateGeometryShaderWithStreamOutput(const void *pShaderBytecode, SIZE_T BytecodeLength, const D3D11_SO_DECLARATION_ENTRY *pSODeclaration, UINT NumEntries, const UINT *pBufferStrides, UINT NumStrides, UINT RasterizedStream, ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader *ppGeometryShader);
	HRESULT CreateHullShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11HullShader *ppHullShader);
	HRESULT CreateInputLayout(const D3D11_INPUT_ELEMENT_DESC *pInputElementDescs, UINT NumElements, const void *pShaderBytecodeWithInputSignature, SIZE_T BytecodeLength, ID3D11InputLayout *ppInputLayout);
	HRESULT CreatePixelShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11PixelShader *ppPixelShader);
	HRESULT CreatePredicate(const D3D11_QUERY_DESC *pPredicateDesc, ID3D11Predicate *ppPredicate);
	HRESULT CreateQuery(const D3D11_QUERY_DESC *pQueryDesc, ID3D11Query *ppQuery);
	HRESULT CreateRasterizerState(const D3D11_RASTERIZER_DESC *pRasterizerDesc, ID3D11RasterizerState *ppRasterizerState);
	HRESULT CreateRenderTargetView(ID3D11Resource pResource, const D3D11_RENDER_TARGET_VIEW_DESC *pDesc, ID3D11RenderTargetView *ppRTView);
	HRESULT CreateSamplerState(const D3D11_SAMPLER_DESC *pSamplerDesc, ID3D11SamplerState *ppSamplerState);
	HRESULT CreateShaderResourceView(ID3D11Resource pResource, const D3D11_SHADER_RESOURCE_VIEW_DESC *pDesc, ID3D11ShaderResourceView **ppSRView);
	HRESULT CreateTexture1D(const D3D11_TEXTURE1D_DESC *pDesc, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Texture1D *ppTexture1D);
	HRESULT CreateTexture2D(const D3D11_TEXTURE2D_DESC *pDesc, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Texture2D *ppTexture2D);
	HRESULT CreateTexture3D(const D3D11_TEXTURE3D_DESC *pDesc, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Texture3D *ppTexture3D);
	HRESULT CreateUnorderedAccessView(ID3D11Resource *pResource, const D3D11_UNORDERED_ACCESS_VIEW_DESC *pDesc, ID3D11UnorderedAccessView **ppUAView);
	HRESULT CreateVertexShader(const void *pShaderBytecode, uint BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11VertexShader *ppVertexShader);
	uint GetCreationFlags();
	HRESULT GetDeviceRemovedReason();
	uint GetExceptionMode();
	D3D_FEATURE_LEVEL GetFeatureLevel();
	void GetImmediateContext(ID3D11DeviceContext *ppImmediateContext);
	HRESULT GetPrivateData(GUID* guid, uint* pDataSize, void* pData);
	HRESULT OpenSharedResource(HANDLE hResource, IID* ReturnedInterface, void **ppResource);
	HRESULT SetExceptionMode(uint RaiseFlags);
	HRESULT SetPrivateData(GUID* guid, uint DataSize, const void *pData);
	HRESULT SetPrivateDataInterface(GUID* guid, const IUnknown *pData);
}

mixin(uuid!(ID3D11DeviceChild, "1841e5c8-16b0-489b-bcc8-44cfb0d5deae"));
public interface ID3D11DeviceChild : IUnknown
{
extern(Windows):
	void GetDevice(ID3D11Device **ppDevice);
	HRESULT GetPrivateData(GUID* guid, uint* pDataSize, void *pData);
	HRESULT SetPrivateData(GUID* guid, uint DataSize, const void *pData);
	HRESULT SetPrivateDataInterface(GUID* guid, const IUnknown pData);
}

mixin(uuid!(ID3D11DeviceContext, "c0bfa96c-e089-44fb-8eaf-26f8796190da"));
public interface ID3D11DeviceContext : ID3D11DeviceChild
{
extern(Windows):
	void Begin(ID3D11Asynchronous *pAsync);
	void ClearDepthStencilView(ID3D11DepthStencilView pDepthStencilView, uint ClearFlags, float Depth, ubyte Stencil);
	void ClearRenderTargetView(ID3D11RenderTargetView pRenderTargetView, const float[4] ColorRGBA);
	void ClearState();
	void ClearUnorderedAccessViewFloat(ID3D11UnorderedAccessView pUnorderedAccessView, const float[4] Values);
	void ClearUnorderedAccessViewUint(ID3D11UnorderedAccessView pUnorderedAccessView, const uint[4] Values);
	void CopyResource(ID3D11Resource pDstResource, ID3D11Resource pSrcResource);
	void CopyStructureCount(ID3D11Buffer pDstBuffer, uint DstAlignedByteOffset, ID3D11UnorderedAccessView pSrcView);
	void CopySubresourceRegion(ID3D11Resource pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, ID3D11Resource pSrcResource, uint SrcSubresource, const D3D11_BOX *pSrcBox);
	void CSGetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppConstantBuffers);
	void CSGetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState *ppSamplers);
	void CSGetShader(ID3D11ComputeShader *ppComputeShader, ID3D11ClassInstance *ppClassInstances, uint* pNumClassInstances);
	void CSGetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView *ppShaderResourceViews);
	void CSGetUnorderedAccessViews(uint StartSlot, uint NumUAVs, const(ID3D11UnorderedAccessView) *ppUnorderedAccessViews);
	void CSSetConstantBuffers(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppConstantBuffers);
	void CSSetSamplers(uint StartSlot, uint NumSamplers, const(ID3D11SamplerState) *ppSamplers);
	void CSSetShader(ID3D11ComputeShader pShader, const(ID3D11ClassInstance) *ppClassInstances, uint NumClassInstances);
	void CSSetShaderResources(uint StartSlot, uint NumViews, const(ID3D11ShaderResourceView) *ppShaderResourceViews);
	void CSSetUnorderedAccessViews(uint StartSlot, uint NumUAVs, const(ID3D11UnorderedAccessView) *ppUnorderedAccessViews, const(uint) *pUAVInitialCounts);
	void Dispatch(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ);
	void DispatchIndirect(ID3D11Buffer pBufferForArgs, uint AlignedOffsetForArgs);
	void Draw(uint VertexCount, uint StartVertexLocation);
	void DrawAuto();
	void DrawIndexed(uint IndexCount, uint StartIndexLocation, int BaseVertexLocation);
	void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation);
	void DrawIndexedInstancedIndirect(ID3D11Buffer pBufferForArgs, uint AlignedByteOffsetForArgs);
	void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation);
	void DrawInstancedIndirect(ID3D11Buffer pBufferForArgs, uint AlignedByteOffsetForArgs);
	void DSGetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppConstantBuffers);
	void DSGetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState *ppSamplers);
	void DSGetShader(ID3D11DomainShader *ppDomainShader, ID3D11ClassInstance *ppClassInstances, uint* pNumClassInstances);
	void DSGetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView *ppShaderResourceViews);
	void DSSetConstantBuffers(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppConstantBuffers);
	void DSSetSamplers(uint StartSlot, uint NumSamplers, const(ID3D11SamplerState) *ppSamplers);
	void DSSetShader(ID3D11DomainShader *pShader, const(ID3D11ClassInstance) *ppClassInstances, uint NumClassInstances);
	void DSSetShaderResources(uint StartSlot, uint NumViews, const(ID3D11ShaderResourceView) *ppShaderResourceViews);
	void End(ID3D11Asynchronous *pAsync);
	void ExecuteCommandList(ID3D11CommandList pCommandList, bool RestoreContextState);
	HRESULT FinishCommandList(bool RestoreDeferredContextState, ID3D11CommandList *ppCommandList);
	void Flush();
	void GenerateMips(ID3D11ShaderResourceView pShaderResourceView);
	uint GetContextFlags();
	HRESULT GetData(ID3D11Asynchronous *pAsync, void *pData, uint DataSize, uint GetDataFlags);
	void GetPredication(ID3D11Predicate *ppPredicate, bool* pPredicateValue);
	float GetResourceMinLOD(ID3D11Resource pResource);
	D3D11_DEVICE_CONTEXT_TYPE GetType();
	void GSGetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppConstantBuffers);
	void GSGetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState *ppSamplers);
	void GSGetShader(ID3D11GeometryShader *ppGeometryShader, ID3D11ClassInstance *ppClassInstances, uint* pNumClassInstances);
	void GSGetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView *ppShaderResourceViews);
	void GSSetConstantBuffers(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppConstantBuffers);
	void GSSetSamplers(uint StartSlot, uint NumSamplers, const(ID3D11SamplerState) *ppSamplers);
	void GSSetShader(ID3D11GeometryShader *pShader, const(ID3D11ClassInstance) *ppClassInstances, uint NumClassInstances);
	void GSSetShaderResources(uint StartSlot, uint NumViews, const(ID3D11ShaderResourceView) *ppShaderResourceViews);
	void HSGetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppConstantBuffers);
	void HSGetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState *ppSamplers);
	void HSGetShader(ID3D11HullShader *ppHullShader, ID3D11ClassInstance *ppClassInstances, uint* pNumClassInstances);
	void HSGetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView *ppShaderResourceViews);
	void HSSetConstantBuffers(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppConstantBuffers);
	void HSSetSamplers(uint StartSlot, uint NumSamplers, const(ID3D11SamplerState) *ppSamplers);
	void HSSetShader(ID3D11HullShader *pShader, const(ID3D11ClassInstance) *ppClassInstances, uint NumClassInstances);
	void HSSetShaderResources(uint StartSlot, uint NumViews, const(ID3D11ShaderResourceView) *ppShaderResourceViews);
	void IAGetIndexBuffer(ID3D11Buffer *pIndexBuffer, DXGI_FORMAT *Format, uint* Offset);
	void IAGetInputLayout(ID3D11InputLayout *ppInputLayout);
	void IAGetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY *pTopology);
	void IAGetVertexBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppVertexBuffers, uint *pStrides, uint *pOffsets);
	void IASetIndexBuffer(ID3D11Buffer pIndexBuffer, DXGI_FORMAT Format, uint Offset);
	void IASetInputLayout(ID3D11InputLayout pInputLayout);
	void IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY Topology);
	void IASetVertexBuffers(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppVertexBuffers, const(uint) *pStrides, const(uint) *pOffsets);
	HRESULT Map(ID3D11Resource pResource, uint Subresource, D3D11_MAP MapType, uint MapFlags, D3D11_MAPPED_SUBRESOURCE *pMappedResource);
	void OMGetBlendState(ID3D11BlendState *ppBlendState, float[4] BlendFactor, uint* pSampleMask);
	void OMGetDepthStencilState(ID3D11DepthStencilState *ppDepthStencilState, uint* pStencilRef);
	void OMGetRenderTargets(uint NumViews, ID3D11RenderTargetView *ppRenderTargetViews, ID3D11DepthStencilView *ppDepthStencilView);
	void OMGetRenderTargetsAndUnorderedAccessViews(uint NumViews, ID3D11RenderTargetView *ppRenderTargetViews, ID3D11DepthStencilView *ppDepthStencilView, uint UAVStartSlot, uint NumUAVs, ID3D11UnorderedAccessView *ppUnorderedAccessViews);
	void OMSetBlendState(ID3D11BlendState pBlendState, const float[4] BlendFactor, uint SampleMask);
	void OMSetDepthStencilState(ID3D11DepthStencilState pDepthStencilState, uint StencilRef);
	void OMSetRenderTargets(uint NumViews, const(ID3D11RenderTargetView) *ppRenderTargetViews, ID3D11DepthStencilView pDepthStencilView);
	void OMSetRenderTargetsAndUnorderedAccessViews(uint NumViews, const(ID3D11RenderTargetView) *ppRenderTargetViews, ID3D11DepthStencilView pDepthStencilView, uint UAVStartSlot, uint NumUAVs, const(ID3D11UnorderedAccessView) *ppUnorderedAccessView, const(uint) *pUAVInitialCounts);
	void PSGetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppConstantBuffers);
	void PSGetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState *ppSamplers);
	void PSGetShader(ID3D11PixelShader *ppPixelShader, ID3D11ClassInstance *ppClassInstances, uint* pNumClassInstances);
	void PSGetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView *ppShaderResourceViews);
	void PSSetConstantBuffers(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppConstantBuffers);
	void PSSetSamplers(uint StartSlot, uint NumSamplers, const(ID3D11SamplerState) *ppSamplers);
	void PSSetShader(ID3D11PixelShader *pShader, const(ID3D11ClassInstance) *ppClassInstances, uint NumClassInstances);
	void PSSetShaderResources(uint StartSlot, uint NumViews, const(ID3D11ShaderResourceView) *ppShaderResourceViews);
	void ResolveSubresource(ID3D11Resource pDstResource, uint DstSubresource, ID3D11Resource pSrcResource, uint SrcSubresource, DXGI_FORMAT Format);
	void RSGetScissorRects(uint* pNumRects, D3D11_RECT *pRects);
	void RSGetState(ID3D11RasterizerState *ppRasterizerState);
	void RSGetViewports(uint* pNumViewports, D3D11_VIEWPORT *pViewports);
	void RSSetScissorRects(uint NumRects, const D3D11_RECT *pRects);
	void RSSetState(ID3D11RasterizerState pRasterizerState);
	void RSSetViewports(uint NumViewports, const D3D11_VIEWPORT *pViewports);
	void SetPredication(ID3D11Predicate pPredicate, bool PredicateValue);
	void SetResourceMinLOD(ID3D11Resource pResource, float MinLOD);
	void SOGetTargets(uint NumBuffers, ID3D11Buffer *ppSOTargets);
	void SOSetTargets(uint NumBuffers, const(ID3D11Buffer) *ppSOTargets, const(uint) *pOffsets);
	void Unmap(ID3D11Resource pResource, uint Subresource);
	void UpdateSubresource(ID3D11Resource pDstResource, uint DstSubresource, const(D3D11_BOX) *pDstBox, const(void) *pSrcData, uint SrcRowPitch, uint SrcDepthPitch);
	void VSGetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer *ppConstantBuffers);
	void VSGetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState *ppSamplers);
	void VSGetShader(ID3D11VertexShader *ppVertexShader, ID3D11ClassInstance *ppClassInstances, uint* pNumClassInstances);
	void VSGetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView *ppShaderResourceViews);
	void VSSetConstantBuffers(uint StartSlot, uint NumBuffers, const(ID3D11Buffer) *ppConstantBuffers);
	void VSSetSamplers(uint StartSlot, uint NumSamplers, const(ID3D11SamplerState) *ppSamplers);
	void VSSetShader(ID3D11VertexShader *pShader, const(ID3D11ClassInstance) *ppClassInstances, uint NumClassInstances);
	void VSSetShaderResources(uint StartSlot, uint NumViews, const(ID3D11ShaderResourceView) *ppShaderResourceViews);
}

mixin(uuid!(ID3D11InputLayout, "e4819ddc-4cf0-4025-bd26-5de82a3e07b7"));
public interface ID3D11InputLayout : ID3D11DeviceChild
{
extern(Windows):
}

mixin(uuid!(ID3D11Predicate, "9eb576dd-9f77-4d86-81aa-8bab5fe490e2"));
public interface ID3D11Predicate : ID3D11Query
{
extern(Windows):
}

mixin(uuid!(ID3D11Query, "d6c00747-87b7-425e-b84d-44d108560afd"));
public interface ID3D11Query : ID3D11Asynchronous
{
extern(Windows):
	void GetDesc(D3D11_QUERY_DESC *pDesc);
}

mixin(uuid!(ID3D11RasterizerState, "9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7"));
public interface ID3D11RasterizerState : ID3D11DeviceChild
{
extern(Windows):
	void GetDesc(D3D11_RASTERIZER_DESC *pDesc);
}

mixin(uuid!(ID3D11SamplerState, "da6fea51-564c-4487-9810-f0d0f9b4e3a5"));
public interface ID3D11SamplerState : ID3D11DeviceChild
{
extern(Windows):
	void GetDesc(D3D11_SAMPLER_DESC *pDesc);
}

mixin(uuid!(ID3D11Buffer, "48570b85-d1ee-4fcd-a250-eb350722b037"));
public interface ID3D11Buffer : ID3D11Resource
{
extern(Windows):
	void GetDesc(D3D11_BUFFER_DESC *pDesc);
}

mixin(uuid!(ID3D11Resource, "dc8e63f3-d12b-4952-b47b-5e45026a862d"));
public interface ID3D11Resource : ID3D11DeviceChild
{
extern(Windows):
	uint GetEvictionPriority();
	void GetType(D3D11_RESOURCE_DIMENSION *rType);
	void SetEvictionPriority(uint EvictionPriority);
}

mixin(uuid!(ID3D11Texture1D, "f8fb5c27-c6b3-4f75-a4c8-439af2ef564c"));
public interface ID3D11Texture1D : ID3D11Resource
{
extern(Windows):
	void GetDesc(D3D11_TEXTURE1D_DESC *pDesc);
}

mixin(uuid!(ID3D11Texture2D, "6f15aaf2-d208-4e89-9ab4-489535d34f9c"));
public interface ID3D11Texture2D : ID3D11Resource
{
extern(Windows):
	void GetDesc(D3D11_TEXTURE2D_DESC *pDesc);
}

mixin(uuid!(ID3D11Texture3D, "037e866e-f56d-4357-a8af-9dabbe6e250e"));
public interface ID3D11Texture3D : ID3D11Resource
{
extern(Windows):
	void GetDesc(D3D11_TEXTURE3D_DESC *pDesc);
}

mixin(uuid!(ID3D11DepthStencilView, "9fdac92a-1876-48c3-afad-25b94f84a9b6"));
public interface ID3D11DepthStencilView : ID3D11View
{
extern(Windows):
	void GetDesc(D3D11_DEPTH_STENCIL_VIEW_DESC *pDesc);
}

mixin(uuid!(ID3D11RenderTargetView, "dfdba067-0b8d-4865-875b-d7b4516cc164"));
public interface ID3D11RenderTargetView : ID3D11View
{
extern(Windows):
	void GetDesc(D3D11_RENDER_TARGET_VIEW_DESC *pDesc);
}

mixin(uuid!(ID3D11ShaderResourceView, "b0e06fe0-8192-4e1a-b1ca-36d7414710b2"));
public interface ID3D11ShaderResourceView : ID3D11View
{
extern(Windows):
	void GetDesc(D3D11_SHADER_RESOURCE_VIEW_DESC *pDesc);
}

mixin(uuid!(ID3D11UnorderedAccessView, "28acf509-7f5c-48f6-8611-f316010a6380"));
public interface ID3D11UnorderedAccessView : ID3D11View
{
extern(Windows):
	void GetDesc(D3D11_UNORDERED_ACCESS_VIEW_DESC *pDesc);
}

mixin(uuid!(ID3D11View, "839d1216-bb2e-412b-b7f4-a9dbebe08ed1"));
public interface ID3D11View : ID3D11DeviceChild
{
extern(Windows):
	void GetResource(ID3D11Resource **ppResource);
}

mixin(uuid!(ID3D11ClassInstance, "a6cd7faa-b0b7-4a2f-9436-8662a65797cb"));
public interface ID3D11ClassInstance : ID3D11DeviceChild
{
extern(Windows):
	void GetClassLinkage(ID3D11ClassLinkage *ppLinkage);
	void GetDesc(D3D11_CLASS_INSTANCE_DESC *pDesc);
	void GetInstanceName(wchar* pInstanceName, uint *pBufferLength);
	void GetTypeName(const(char)* pTypeName, uint *pBufferLength);
}

mixin(uuid!(ID3D11ClassLinkage, "ddf57cba-9543-46e4-a12b-f207a0fe7fed"));
public interface ID3D11ClassLinkage : ID3D11DeviceChild
{
extern(Windows):
	HRESULT CreateClassInstance(const(char)* pszClassTypeName, uint ConstantBufferOffset, uint ConstantVectorOffset, uint TextureOffset, uint SamplerOffset, ID3D11ClassInstance *ppInstance);
	HRESULT GetClassInstance(const(wchar)* pClassInstanceName, uint InstanceIndex, ID3D11ClassInstance *ppInstance);
}

mixin(uuid!(ID3D11ComputeShader, "4f5b196e-c2bd-495e-bd01-1fded38e4969"));
public interface ID3D11ComputeShader : ID3D11DeviceChild
{
extern(Windows):
}

mixin(uuid!(ID3D11DomainShader, "f582c508-0f36-490c-9977-31eece268cfa"));
public interface ID3D11DomainShader : ID3D11DeviceChild
{
extern(Windows):
}

mixin(uuid!(ID3D11GeometryShader, "38325b96-effb-4022-ba02-2e795b70275c"));
public interface ID3D11GeometryShader : ID3D11DeviceChild
{
extern(Windows):
}

mixin(uuid!(ID3D11HullShader, "8e5c6061-628a-4c8e-8264-bbe45cb3d5dd"));
public interface ID3D11HullShader : ID3D11DeviceChild
{
extern(Windows):
}

mixin(uuid!(ID3D11PixelShader, "ea82e40d-51dc-4f33-93d4-db7c9125ae8c"));
public interface ID3D11PixelShader : ID3D11DeviceChild
{
extern(Windows):
}

mixin(uuid!(ID3D11VertexShader, "3b301d64-d678-4289-8897-22f8928b72f3"));
public interface ID3D11VertexShader : ID3D11DeviceChild
{
extern(Windows):
}

mixin(uuid!(ID3D11VideoDecoder, "3C9C5B51-995D-48d1-9B8D-FA5CAEDED65C"));
public interface ID3D11VideoDecoder : ID3D11DeviceChild
{
extern(Windows):
	HRESULT GetCreationParameters(D3D11_VIDEO_DECODER_DESC *pVideoDesc, D3D11_VIDEO_DECODER_CONFIG *pConfig);
	HRESULT GetDriverHandle(HANDLE *pDriverHandle);
}

mixin(uuid!(ID3D11VideoProcessorEnumerator, "31627037-53AB-4200-9061-05FAA9AB45F9"));
public interface ID3D11VideoProcessorEnumerator : ID3D11DeviceChild
{
extern(Windows):
	HRESULT CheckVideoProcessorFormat(DXGI_FORMAT Format, uint *pFlags);
	HRESULT GetVideoProcessorCaps(D3D11_VIDEO_PROCESSOR_CAPS *pCaps);
	HRESULT GetVideoProcessorContentDesc(D3D11_VIDEO_PROCESSOR_CONTENT_DESC *pContentDesc);
	HRESULT GetVideoProcessorCustomRate(uint TypeIndex, uint CustomRateIndex, D3D11_VIDEO_PROCESSOR_CUSTOM_RATE *pRate);
	HRESULT GetVideoProcessorFilterRange(D3D11_VIDEO_PROCESSOR_FILTER Filter, D3D11_VIDEO_PROCESSOR_FILTER_RANGE *pRange);
	HRESULT GetVideoProcessorRateConversionCaps(uint TypeIndex, D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS *pCaps);
}

mixin(uuid!(ID3D11VideoProcessor, "1D7B0652-185F-41c6-85CE-0C5BE3D4AE6C"));
public interface ID3D11VideoProcessor : ID3D11DeviceChild
{
extern(Windows):
	void GetContentDesc(D3D11_VIDEO_PROCESSOR_CONTENT_DESC *pDesc);
	void GetRateConversionCaps(D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS *pCaps);
}

mixin(uuid!(ID3D11AuthenticatedChannel, "3015A308-DCBD-47aa-A747-192486D14D4A"));
public interface ID3D11AuthenticatedChannel : IUnknown
{
extern(Windows):
	HRESULT GetCertificate(uint CertificateSize, ubyte *pCertificate);
	HRESULT GetCertificateSize(uint *pCertificateSize);
	void GetChannelHandle(HANDLE *pChannelHandle);
}

mixin(uuid!(ID3D11CryptoSession, "9B32F9AD-BDCC-40a6-A39D-D5C865845720"));
public interface ID3D11CryptoSession : ID3D11DeviceChild
{
extern(Windows):
	HRESULT GetCertificate(uint CertificateSize, ubyte *pCertificate);
	HRESULT GetCertificateSize(uint *pCertificateSize);
	void GetCryptoSessionHandle(HANDLE *pCryptoSessionHandle);
	void GetCryptoType(GUID *pCryptoType);
	void GetDecoderProfile(GUID *pDecoderProfile);
}

mixin(uuid!(ID3D11VideoDecoderOutputView, "C2931AEA-2A85-4f20-860F-FBA1FD256E18"));
public interface ID3D11VideoDecoderOutputView : ID3D11View
{
extern(Windows):
	void GetDesc(D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC *pDesc);
}

mixin(uuid!(ID3D11VideoProcessorInputView, "11EC5A5F-51DC-4945-AB34-6E8C21300EA5"));
public interface ID3D11VideoProcessorInputView : ID3D11View
{
extern(Windows):
	void GetDesc(D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC *pDesc);
}

mixin(uuid!(ID3D11VideoProcessorOutputView, "A048285E-25A9-4527-BD93-D68B68C44254"));
public interface ID3D11VideoProcessorOutputView : ID3D11View
{
extern(Windows):
	void GetDesc(D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC *pDesc);
}

mixin(uuid!(ID3D11VideoContext, "61F21C45-3C0E-4a74-9CEA-67100D9AD5E4"));
public interface ID3D11VideoContext : ID3D11DeviceChild
{
extern(Windows):
	HRESULT ConfigureAuthenticatedChannel(ID3D11AuthenticatedChannel pChannel, uint InputSize, const void *pInput, D3D11_AUTHENTICATED_CONFIGURE_OUTPUT *pOutput);
	HRESULT DecoderBeginFrame(ID3D11VideoDecoder pDecoder, ID3D11VideoDecoderOutputView pView, uint ContentKeySize, const void*pContentKey);
	HRESULT DecoderEndFrame(ID3D11VideoDecoder pDecoder);
	HRESULT DecoderExtension(ID3D11VideoDecoder pDecoder, const D3D11_VIDEO_DECODER_EXTENSION *pExtensionData);
	HRESULT DecryptionBlt(ID3D11CryptoSession pCryptoSession, ID3D11Texture2D pSrcSurface, ID3D11Texture2D pDstSurface, D3D11_ENCRYPTED_BLOCK_INFO *pEncryptedBlockInfo, const void *pContentKey, uint ContentKeySize, void *pIV, uint IVSize);
	HRESULT EncryptionBlt(ID3D11CryptoSession pCryptoSession, ID3D11Texture2D pSrcSurface, ID3D11Texture2D pDstSurface, void *pIV, uint IVSize);
	HRESULT FinishSessionKeyRefresh(ID3D11CryptoSession pCryptoSession);
	HRESULT GetDecoderBuffer(ID3D11VideoDecoder pDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE Type, uint *pBufferSize,void **ppBuffer);
	HRESULT GetEncryptionBltKey(ID3D11CryptoSession pCryptoSession, uint KeySize, void *pReadbackKey);
	HRESULT NegotiateAuthenticatedChannelKeyExchange(ID3D11AuthenticatedChannel pChannel, uint DataSize, void *pData);
	HRESULT NegotiateCryptoSessionKeyExchange(ID3D11CryptoSession pCryptoSession, uint *DataSize, void *pData);
	HRESULT QueryAuthenticatedChannel(ID3D11AuthenticatedChannel pChannel, uint InputSize, const void *pInput, uint OutputSize, void *pOutput);
	HRESULT ReleaseDecoderBuffer(ID3D11VideoDecoder pDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE Type);
	HRESULT StartSessionKeyRefresh(ID3D11CryptoSession pCryptoSession, uint RandomNumberSize, void *pRandomNumber);
	HRESULT SubmitDecoderBuffers(ID3D11VideoDecoder pDecoder, uint NumBuffers, const D3D11_VIDEO_DECODER_BUFFER_DESC *pBufferDesc);
	HRESULT VideoProcessorBlt(ID3D11VideoProcessor pVideoProcessor, ID3D11VideoProcessorOutputView pView, uint OutputFrame, uint StreamCount, const D3D11_VIDEO_PROCESSOR_STREAM *pStreams);
	void VideoProcessorGetOutputAlphaFillMode(ID3D11VideoProcessor pVideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE *pAlphaFillMode, uint *pStreamIndex);
	void VideoProcessorGetOutputBackgroundColor(ID3D11VideoProcessor pVideoProcessor, bool *pYCbCr, D3D11_VIDEO_COLOR *pColor);
	void VideoProcessorGetOutputColorSpace(ID3D11VideoProcessor pVideoProcessor, D3D11_VIDEO_PROCESSOR_COLOR_SPACE *pColorSpace);
	void VideoProcessorGetOutputConstriction(ID3D11VideoProcessor pVideoProcessor, bool *Enabled, SIZE *pSize);
	HRESULT VideoProcessorGetOutputExtension(ID3D11VideoProcessor pVideoProcessor, const GUID *pExtensionGuid, uint DataSize, void *pData);
	void VideoProcessorGetOutputStereoMode(ID3D11VideoProcessor pVideoProcessor, bool *pEnabled);
	void VideoProcessorGetOutputTargetRect(ID3D11VideoProcessor pVideoProcessor, bool *Enabled, RECT*pRect);
	void VideoProcessorGetStreamAlpha(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool *pEnabled, float *pAlpha);
	void VideoProcessorGetStreamAutoProcessingMode(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool *pEnabled);
	void VideoProcessorGetStreamColorSpace(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, D3D11_VIDEO_PROCESSOR_COLOR_SPACE *pColorSpace);
	void VideoProcessorGetStreamDestRect(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool *pEnabled, RECT *pRect);
	HRESULT VideoProcessorGetStreamExtension(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, const GUID *pExtensionGuid, uint DataSize, void *pData);
	void VideoProcessorGetStreamFilter(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex,D3D11_VIDEO_PROCESSOR_FILTER Filter, bool *pEnabled, int*pLevel);
	void VideoProcessorGetStreamFrameFormat(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, D3D11_VIDEO_FRAME_FORMAT *pFrameFormat);
	void VideoProcessorGetStreamLumaKey(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool *pEnabled, float *pLower, float *pUpper);
	void VideoProcessorGetStreamOutputRate(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE *pOutputRate, bool *pRepeatFrame, DXGI_RATIONAL *pCustomRate);
	void VideoProcessorGetStreamPalette(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, uint Count, uint *pEntries);
	void VideoProcessorGetStreamPixelAspectRatio(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool *pEnabled, DXGI_RATIONAL *pSourceAspectRatio, DXGI_RATIONAL *pDestinationAspectRatio);
	void VideoProcessorGetStreamRotation(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool *pEnable, D3D11_VIDEO_PROCESSOR_ROTATION *pRotation);
	void VideoProcessorGetStreamSourceRect(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool *pEnabled, RECT *pRect);
	void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool *pEnabled, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT *pFormat, bool *pLeftViewFrame0, bool *pBaseViewFrame0, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE *pFlipMode, int *MonoOffset);
	void VideoProcessorSetOutputAlphaFillMode(ID3D11VideoProcessor pVideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE AlphaFillMode, uint StreamIndex);
	void VideoProcessorSetOutputBackgroundColor(ID3D11VideoProcessor pVideoProcessor, bool YCbCr, const D3D11_VIDEO_COLOR *pColor);
	void VideoProcessorSetOutputColorSpace(ID3D11VideoProcessor pVideoProcessor, const D3D11_VIDEO_PROCESSOR_COLOR_SPACE *pColorSpace);
	void VideoProcessorSetOutputConstriction(ID3D11VideoProcessor pVideoProcessor, bool Enable, SIZE Size);
	HRESULT VideoProcessorSetOutputExtension(ID3D11VideoProcessor pVideoProcessor, const GUID *pExtensionGuid, uint DataSize, void *pData);
	void VideoProcessorSetOutputStereoMode(ID3D11VideoProcessor pVideoProcessor, bool Enable);
	void VideoProcessorSetOutputTargetRect(ID3D11VideoProcessor pVideoProcessor, bool Enable, const RECT *pRect);
	void VideoProcessorSetStreamAlpha(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool Enable, float Alpha);
	void VideoProcessorSetStreamAutoProcessingMode(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool Enable);
	void VideoProcessorSetStreamColorSpace(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, const D3D11_VIDEO_PROCESSOR_COLOR_SPACE *pColorSpace);
	void VideoProcessorSetStreamDestRect(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool Enable, const RECT *pRect);
	HRESULT VideoProcessorSetStreamExtension(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, const GUID *pExtensionGuid, uint DataSize, void *pData);
	void VideoProcessorSetStreamFilter(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, D3D11_VIDEO_PROCESSOR_FILTER Filter, bool Enable, int Level);
	void VideoProcessorSetStreamFrameFormat(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, D3D11_VIDEO_FRAME_FORMAT FrameFormat);
	void VideoProcessorSetStreamLumaKey(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool Enable, float Lower, float Upper);
	void VideoProcessorSetStreamOutputRate(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE OutputRate, bool RepeatFrame, const DXGI_RATIONAL *pCustomRate);
	void VideoProcessorSetStreamPalette(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, uint Count, const uint *pEntries);
	void VideoProcessorSetStreamPixelAspectRatio(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool Enable, const DXGI_RATIONAL *pSourceAspectRatio, const DXGI_RATIONAL *pDestinationAspectRatio);
	void VideoProcessorSetStreamRotation(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool Enable, D3D11_VIDEO_PROCESSOR_ROTATION Rotation);
	void VideoProcessorSetStreamSourceRect(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool Enable, const RECT *pRect);
	void VideoProcessorSetStreamStereoFormat(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool Enable, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT Format, bool LeftViewFrame0, bool BaseViewFrame0, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE FlipMode, int MonoOffset);
}

mixin(uuid!(ID3D11VideoDevice, "10EC4D5B-975A-4689-B9E4-D0AAC30FE333"));
public interface ID3D11VideoDevice : IUnknown
{
extern(Windows):
	HRESULT CheckCryptoKeyExchange(const GUID *pCryptoType, const GUID *pDecoderProfile, uint Index, GUID *pKeyExchangeType);
	HRESULT CheckVideoDecoderFormat(GUID pDecoderProfile, DXGI_FORMAT Format, bool *pSupported);
	HRESULT CreateAuthenticatedChannel(D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType, ID3D11AuthenticatedChannel *ppAuthenticatedChannel);
	HRESULT CreateCryptoSession(const GUID *pCryptoType, const GUID *pDecoderProfile, const GUID *pKeyExchangeType, ID3D11CryptoSession *ppCryptoSession);
	HRESULT CreateVideoDecoder(const D3D11_VIDEO_DECODER_DESC *pVideoDesc, const D3D11_VIDEO_DECODER_CONFIG *pConfig, ID3D11VideoDecoder **ppDecoder);
	HRESULT CreateVideoDecoderOutputView(ID3D11Resource pResource, const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC *pDesc, ID3D11VideoDecoderOutputView *ppVDOVView);
	HRESULT CreateVideoProcessor(ID3D11VideoProcessorEnumerator pEnum, uint RateConversionIndex, ID3D11VideoProcessor *ppVideoProcessor);
	HRESULT CreateVideoProcessorEnumerator(const D3D11_VIDEO_PROCESSOR_CONTENT_DESC *pDesc, ID3D11VideoProcessorEnumerator *ppEnum);
	HRESULT CreateVideoProcessorInputView(ID3D11Resource pResource, ID3D11VideoProcessorEnumerator pEnum, const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC *pDesc, ID3D11VideoProcessorInputView *ppVPIView);
	HRESULT CreateVideoProcessorOutputView(ID3D11Resource pResource, ID3D11VideoProcessorEnumerator pEnum, const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC *pDesc, ID3D11VideoProcessorOutputView *ppVPOView);
	HRESULT GetContentProtectionCaps(const GUID *pCryptoType, const GUID *pDecoderProfile, D3D11_VIDEO_CONTENT_PROTECTION_CAPS *pCaps);
	HRESULT GetVideoDecoderConfig(const D3D11_VIDEO_DECODER_DESC *pDesc, uint Index, D3D11_VIDEO_DECODER_CONFIG *pConfig);
	HRESULT GetVideoDecoderConfigCount(const D3D11_VIDEO_DECODER_DESC *pDesc, uint *pCount);
	HRESULT GetVideoDecoderProfile(uint Index, GUID *pDecoderProfile);
	uint GetVideoDecoderProfileCount();
	HRESULT SetPrivateData(REFGUID guid, uint DataSize, const void *pData);
	HRESULT SetPrivateDataInterface(REFGUID guid, const IUnknown *pData);
}
